// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WaypointV2.proto

#ifndef PROTOBUF_WaypointV2_2eproto__INCLUDED
#define PROTOBUF_WaypointV2_2eproto__INCLUDED

#include <string>

#include <dji/protobuf/stubs/common.h>

#if DJI_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < DJI_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <dji/protobuf/io/coded_stream.h>
#include <dji/protobuf/arena.h>
#include <dji/protobuf/arenastring.h>
#include <dji/protobuf/generated_message_table_driven.h>
#include <dji/protobuf/generated_message_util.h>
#include <dji/protobuf/metadata.h>
#include <dji/protobuf/message.h>
#include <dji/protobuf/repeated_field.h>  // IWYU pragma: export
#include <dji/protobuf/extension_set.h>  // IWYU pragma: export
#include <dji/protobuf/generated_enum_reflection.h>
#include <dji/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_WaypointV2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::dji::protobuf::internal::ParseTableField entries[];
  static const ::dji::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::dji::protobuf::internal::ParseTable schema[46];
  static const ::dji::protobuf::internal::FieldMetadata field_metadata[];
  static const ::dji::protobuf::internal::SerializationTable serialization_table[];
  static const ::dji::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocationCoordinateImpl();
void InitDefaultsLocationCoordinate();
void InitDefaultsWaypointMissionImpl();
void InitDefaultsWaypointMission();
void InitDefaultsWaypointItemImpl();
void InitDefaultsWaypointItem();
void InitDefaultsWaypointActionReachPointsTriggerParamImpl();
void InitDefaultsWaypointActionReachPointsTriggerParam();
void InitDefaultsWaypointActionTrajectoryTriggerParamImpl();
void InitDefaultsWaypointActionTrajectoryTriggerParam();
void InitDefaultsWaypointActionAssociateTriggerParamImpl();
void InitDefaultsWaypointActionAssociateTriggerParam();
void InitDefaultsWaypointActionSimpleIntervalParamImpl();
void InitDefaultsWaypointActionSimpleIntervalParam();
void InitDefaultsWaypointActionSimpleReachPointParamImpl();
void InitDefaultsWaypointActionSimpleReachPointParam();
void InitDefaultsActuatorCameraShootPhotoParamImpl();
void InitDefaultsActuatorCameraShootPhotoParam();
void InitDefaultsActuatorCameraStartRecordVideoParamImpl();
void InitDefaultsActuatorCameraStartRecordVideoParam();
void InitDefaultsActuatorCameraStopRecordVideoParamImpl();
void InitDefaultsActuatorCameraStopRecordVideoParam();
void InitDefaultsActuatorCameraFocusParamImpl();
void InitDefaultsActuatorCameraFocusParam();
void InitDefaultsActuatorCameraZoomLengthParamImpl();
void InitDefaultsActuatorCameraZoomLengthParam();
void InitDefaultsActuatorGimbalRotateParamImpl();
void InitDefaultsActuatorGimbalRotateParam();
void InitDefaultsActuatorAircraftControlGimbalParamImpl();
void InitDefaultsActuatorAircraftControlGimbalParam();
void InitDefaultsActuatorAircraftControlRotateYawParamImpl();
void InitDefaultsActuatorAircraftControlRotateYawParam();
void InitDefaultsActuatorAircraftControlStartStopFlyParamImpl();
void InitDefaultsActuatorAircraftControlStartStopFlyParam();
void InitDefaultsActuatorPayloadControlOperatingParamImpl();
void InitDefaultsActuatorPayloadControlOperatingParam();
void InitDefaultsWaypointActionOperatorSprayImpl();
void InitDefaultsWaypointActionOperatorSpray();
void InitDefaultsWaypointActionOperatorCameraImpl();
void InitDefaultsWaypointActionOperatorCamera();
void InitDefaultsWaypointActionOperatorGimbalImpl();
void InitDefaultsWaypointActionOperatorGimbal();
void InitDefaultsWaypointActionTriggerImpl();
void InitDefaultsWaypointActionTrigger();
void InitDefaultsWaypointActionOperatorAircraftControlImpl();
void InitDefaultsWaypointActionOperatorAircraftControl();
void InitDefaultsWaypointActionOperatorPayloadImpl();
void InitDefaultsWaypointActionOperatorPayload();
void InitDefaultsWaypointActionActuatorImpl();
void InitDefaultsWaypointActionActuator();
void InitDefaultsWaypointActionConfigImpl();
void InitDefaultsWaypointActionConfig();
void InitDefaultsTrajectoryReplayOperationDataImpl();
void InitDefaultsTrajectoryReplayOperationData();
void InitDefaultsErrorDataImpl();
void InitDefaultsErrorData();
void InitDefaultsWaypointUploadDataImpl();
void InitDefaultsWaypointUploadData();
void InitDefaultsActionUploadDataImpl();
void InitDefaultsActionUploadData();
void InitDefaultsWaypointDownloadDataImpl();
void InitDefaultsWaypointDownloadData();
void InitDefaultsActionDownloadDataImpl();
void InitDefaultsActionDownloadData();
void InitDefaultsWaypointExecuteDataImpl();
void InitDefaultsWaypointExecuteData();
void InitDefaultsActionExecuteDataImpl();
void InitDefaultsActionExecuteData();
void InitDefaultsWaypointStateChangeInformationImpl();
void InitDefaultsWaypointStateChangeInformation();
void InitDefaultsActionStateChangeInformationImpl();
void InitDefaultsActionStateChangeInformation();
void InitDefaultsTrajectoryReplayStateChangeInformationImpl();
void InitDefaultsTrajectoryReplayStateChangeInformation();
void InitDefaultsSizeImpl();
void InitDefaultsSize();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsAccurateShootPhotoTargetRectImpl();
void InitDefaultsAccurateShootPhotoTargetRect();
void InitDefaultsAccurateShootPhotoCameraStateInformationImpl();
void InitDefaultsAccurateShootPhotoCameraStateInformation();
void InitDefaultsAccurateShootPhotoGimbalStateInformationImpl();
void InitDefaultsAccurateShootPhotoGimbalStateInformation();
void InitDefaultsAccurateShootPhotoDeviceInformationImpl();
void InitDefaultsAccurateShootPhotoDeviceInformation();
void InitDefaultsAccurateShootPhotoFileInformationImpl();
void InitDefaultsAccurateShootPhotoFileInformation();
void InitDefaultsActuatorNavigationAccurateShootPhotoOperatingParamImpl();
void InitDefaultsActuatorNavigationAccurateShootPhotoOperatingParam();
void InitDefaultsWaypointActionOperatorNavigationImpl();
void InitDefaultsWaypointActionOperatorNavigation();
inline void InitDefaults() {
  InitDefaultsLocationCoordinate();
  InitDefaultsWaypointMission();
  InitDefaultsWaypointItem();
  InitDefaultsWaypointActionReachPointsTriggerParam();
  InitDefaultsWaypointActionTrajectoryTriggerParam();
  InitDefaultsWaypointActionAssociateTriggerParam();
  InitDefaultsWaypointActionSimpleIntervalParam();
  InitDefaultsWaypointActionSimpleReachPointParam();
  InitDefaultsActuatorCameraShootPhotoParam();
  InitDefaultsActuatorCameraStartRecordVideoParam();
  InitDefaultsActuatorCameraStopRecordVideoParam();
  InitDefaultsActuatorCameraFocusParam();
  InitDefaultsActuatorCameraZoomLengthParam();
  InitDefaultsActuatorGimbalRotateParam();
  InitDefaultsActuatorAircraftControlGimbalParam();
  InitDefaultsActuatorAircraftControlRotateYawParam();
  InitDefaultsActuatorAircraftControlStartStopFlyParam();
  InitDefaultsActuatorPayloadControlOperatingParam();
  InitDefaultsWaypointActionOperatorSpray();
  InitDefaultsWaypointActionOperatorCamera();
  InitDefaultsWaypointActionOperatorGimbal();
  InitDefaultsWaypointActionTrigger();
  InitDefaultsWaypointActionOperatorAircraftControl();
  InitDefaultsWaypointActionOperatorPayload();
  InitDefaultsWaypointActionActuator();
  InitDefaultsWaypointActionConfig();
  InitDefaultsTrajectoryReplayOperationData();
  InitDefaultsErrorData();
  InitDefaultsWaypointUploadData();
  InitDefaultsActionUploadData();
  InitDefaultsWaypointDownloadData();
  InitDefaultsActionDownloadData();
  InitDefaultsWaypointExecuteData();
  InitDefaultsActionExecuteData();
  InitDefaultsWaypointStateChangeInformation();
  InitDefaultsActionStateChangeInformation();
  InitDefaultsTrajectoryReplayStateChangeInformation();
  InitDefaultsSize();
  InitDefaultsPoint();
  InitDefaultsAccurateShootPhotoTargetRect();
  InitDefaultsAccurateShootPhotoCameraStateInformation();
  InitDefaultsAccurateShootPhotoGimbalStateInformation();
  InitDefaultsAccurateShootPhotoDeviceInformation();
  InitDefaultsAccurateShootPhotoFileInformation();
  InitDefaultsActuatorNavigationAccurateShootPhotoOperatingParam();
  InitDefaultsWaypointActionOperatorNavigation();
}
}  // namespace protobuf_WaypointV2_2eproto
namespace dji {
namespace waypointv2 {
class AccurateShootPhotoCameraStateInformation;
class AccurateShootPhotoCameraStateInformationDefaultTypeInternal;
extern AccurateShootPhotoCameraStateInformationDefaultTypeInternal _AccurateShootPhotoCameraStateInformation_default_instance_;
class AccurateShootPhotoDeviceInformation;
class AccurateShootPhotoDeviceInformationDefaultTypeInternal;
extern AccurateShootPhotoDeviceInformationDefaultTypeInternal _AccurateShootPhotoDeviceInformation_default_instance_;
class AccurateShootPhotoFileInformation;
class AccurateShootPhotoFileInformationDefaultTypeInternal;
extern AccurateShootPhotoFileInformationDefaultTypeInternal _AccurateShootPhotoFileInformation_default_instance_;
class AccurateShootPhotoGimbalStateInformation;
class AccurateShootPhotoGimbalStateInformationDefaultTypeInternal;
extern AccurateShootPhotoGimbalStateInformationDefaultTypeInternal _AccurateShootPhotoGimbalStateInformation_default_instance_;
class AccurateShootPhotoTargetRect;
class AccurateShootPhotoTargetRectDefaultTypeInternal;
extern AccurateShootPhotoTargetRectDefaultTypeInternal _AccurateShootPhotoTargetRect_default_instance_;
class ActionDownloadData;
class ActionDownloadDataDefaultTypeInternal;
extern ActionDownloadDataDefaultTypeInternal _ActionDownloadData_default_instance_;
class ActionExecuteData;
class ActionExecuteDataDefaultTypeInternal;
extern ActionExecuteDataDefaultTypeInternal _ActionExecuteData_default_instance_;
class ActionStateChangeInformation;
class ActionStateChangeInformationDefaultTypeInternal;
extern ActionStateChangeInformationDefaultTypeInternal _ActionStateChangeInformation_default_instance_;
class ActionUploadData;
class ActionUploadDataDefaultTypeInternal;
extern ActionUploadDataDefaultTypeInternal _ActionUploadData_default_instance_;
class ActuatorAircraftControlGimbalParam;
class ActuatorAircraftControlGimbalParamDefaultTypeInternal;
extern ActuatorAircraftControlGimbalParamDefaultTypeInternal _ActuatorAircraftControlGimbalParam_default_instance_;
class ActuatorAircraftControlRotateYawParam;
class ActuatorAircraftControlRotateYawParamDefaultTypeInternal;
extern ActuatorAircraftControlRotateYawParamDefaultTypeInternal _ActuatorAircraftControlRotateYawParam_default_instance_;
class ActuatorAircraftControlStartStopFlyParam;
class ActuatorAircraftControlStartStopFlyParamDefaultTypeInternal;
extern ActuatorAircraftControlStartStopFlyParamDefaultTypeInternal _ActuatorAircraftControlStartStopFlyParam_default_instance_;
class ActuatorCameraFocusParam;
class ActuatorCameraFocusParamDefaultTypeInternal;
extern ActuatorCameraFocusParamDefaultTypeInternal _ActuatorCameraFocusParam_default_instance_;
class ActuatorCameraShootPhotoParam;
class ActuatorCameraShootPhotoParamDefaultTypeInternal;
extern ActuatorCameraShootPhotoParamDefaultTypeInternal _ActuatorCameraShootPhotoParam_default_instance_;
class ActuatorCameraStartRecordVideoParam;
class ActuatorCameraStartRecordVideoParamDefaultTypeInternal;
extern ActuatorCameraStartRecordVideoParamDefaultTypeInternal _ActuatorCameraStartRecordVideoParam_default_instance_;
class ActuatorCameraStopRecordVideoParam;
class ActuatorCameraStopRecordVideoParamDefaultTypeInternal;
extern ActuatorCameraStopRecordVideoParamDefaultTypeInternal _ActuatorCameraStopRecordVideoParam_default_instance_;
class ActuatorCameraZoomLengthParam;
class ActuatorCameraZoomLengthParamDefaultTypeInternal;
extern ActuatorCameraZoomLengthParamDefaultTypeInternal _ActuatorCameraZoomLengthParam_default_instance_;
class ActuatorGimbalRotateParam;
class ActuatorGimbalRotateParamDefaultTypeInternal;
extern ActuatorGimbalRotateParamDefaultTypeInternal _ActuatorGimbalRotateParam_default_instance_;
class ActuatorNavigationAccurateShootPhotoOperatingParam;
class ActuatorNavigationAccurateShootPhotoOperatingParamDefaultTypeInternal;
extern ActuatorNavigationAccurateShootPhotoOperatingParamDefaultTypeInternal _ActuatorNavigationAccurateShootPhotoOperatingParam_default_instance_;
class ActuatorPayloadControlOperatingParam;
class ActuatorPayloadControlOperatingParamDefaultTypeInternal;
extern ActuatorPayloadControlOperatingParamDefaultTypeInternal _ActuatorPayloadControlOperatingParam_default_instance_;
class ErrorData;
class ErrorDataDefaultTypeInternal;
extern ErrorDataDefaultTypeInternal _ErrorData_default_instance_;
class LocationCoordinate;
class LocationCoordinateDefaultTypeInternal;
extern LocationCoordinateDefaultTypeInternal _LocationCoordinate_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Size;
class SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class TrajectoryReplayOperationData;
class TrajectoryReplayOperationDataDefaultTypeInternal;
extern TrajectoryReplayOperationDataDefaultTypeInternal _TrajectoryReplayOperationData_default_instance_;
class TrajectoryReplayStateChangeInformation;
class TrajectoryReplayStateChangeInformationDefaultTypeInternal;
extern TrajectoryReplayStateChangeInformationDefaultTypeInternal _TrajectoryReplayStateChangeInformation_default_instance_;
class WaypointActionActuator;
class WaypointActionActuatorDefaultTypeInternal;
extern WaypointActionActuatorDefaultTypeInternal _WaypointActionActuator_default_instance_;
class WaypointActionAssociateTriggerParam;
class WaypointActionAssociateTriggerParamDefaultTypeInternal;
extern WaypointActionAssociateTriggerParamDefaultTypeInternal _WaypointActionAssociateTriggerParam_default_instance_;
class WaypointActionConfig;
class WaypointActionConfigDefaultTypeInternal;
extern WaypointActionConfigDefaultTypeInternal _WaypointActionConfig_default_instance_;
class WaypointActionOperatorAircraftControl;
class WaypointActionOperatorAircraftControlDefaultTypeInternal;
extern WaypointActionOperatorAircraftControlDefaultTypeInternal _WaypointActionOperatorAircraftControl_default_instance_;
class WaypointActionOperatorCamera;
class WaypointActionOperatorCameraDefaultTypeInternal;
extern WaypointActionOperatorCameraDefaultTypeInternal _WaypointActionOperatorCamera_default_instance_;
class WaypointActionOperatorGimbal;
class WaypointActionOperatorGimbalDefaultTypeInternal;
extern WaypointActionOperatorGimbalDefaultTypeInternal _WaypointActionOperatorGimbal_default_instance_;
class WaypointActionOperatorNavigation;
class WaypointActionOperatorNavigationDefaultTypeInternal;
extern WaypointActionOperatorNavigationDefaultTypeInternal _WaypointActionOperatorNavigation_default_instance_;
class WaypointActionOperatorPayload;
class WaypointActionOperatorPayloadDefaultTypeInternal;
extern WaypointActionOperatorPayloadDefaultTypeInternal _WaypointActionOperatorPayload_default_instance_;
class WaypointActionOperatorSpray;
class WaypointActionOperatorSprayDefaultTypeInternal;
extern WaypointActionOperatorSprayDefaultTypeInternal _WaypointActionOperatorSpray_default_instance_;
class WaypointActionReachPointsTriggerParam;
class WaypointActionReachPointsTriggerParamDefaultTypeInternal;
extern WaypointActionReachPointsTriggerParamDefaultTypeInternal _WaypointActionReachPointsTriggerParam_default_instance_;
class WaypointActionSimpleIntervalParam;
class WaypointActionSimpleIntervalParamDefaultTypeInternal;
extern WaypointActionSimpleIntervalParamDefaultTypeInternal _WaypointActionSimpleIntervalParam_default_instance_;
class WaypointActionSimpleReachPointParam;
class WaypointActionSimpleReachPointParamDefaultTypeInternal;
extern WaypointActionSimpleReachPointParamDefaultTypeInternal _WaypointActionSimpleReachPointParam_default_instance_;
class WaypointActionTrajectoryTriggerParam;
class WaypointActionTrajectoryTriggerParamDefaultTypeInternal;
extern WaypointActionTrajectoryTriggerParamDefaultTypeInternal _WaypointActionTrajectoryTriggerParam_default_instance_;
class WaypointActionTrigger;
class WaypointActionTriggerDefaultTypeInternal;
extern WaypointActionTriggerDefaultTypeInternal _WaypointActionTrigger_default_instance_;
class WaypointDownloadData;
class WaypointDownloadDataDefaultTypeInternal;
extern WaypointDownloadDataDefaultTypeInternal _WaypointDownloadData_default_instance_;
class WaypointExecuteData;
class WaypointExecuteDataDefaultTypeInternal;
extern WaypointExecuteDataDefaultTypeInternal _WaypointExecuteData_default_instance_;
class WaypointItem;
class WaypointItemDefaultTypeInternal;
extern WaypointItemDefaultTypeInternal _WaypointItem_default_instance_;
class WaypointMission;
class WaypointMissionDefaultTypeInternal;
extern WaypointMissionDefaultTypeInternal _WaypointMission_default_instance_;
class WaypointStateChangeInformation;
class WaypointStateChangeInformationDefaultTypeInternal;
extern WaypointStateChangeInformationDefaultTypeInternal _WaypointStateChangeInformation_default_instance_;
class WaypointUploadData;
class WaypointUploadDataDefaultTypeInternal;
extern WaypointUploadDataDefaultTypeInternal _WaypointUploadData_default_instance_;
}  // namespace waypointv2
}  // namespace dji
namespace dji {
namespace waypointv2 {

enum WaypointMissionFinishedAction {
  NoAction = 0,
  GoHome = 1,
  AutoLanding = 2,
  GoFirstWaypoint = 3,
  ContinueUntilStop = 4,
  WaypointMissionFinishedAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointMissionFinishedAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointMissionFinishedAction_IsValid(int value);
const WaypointMissionFinishedAction WaypointMissionFinishedAction_MIN = NoAction;
const WaypointMissionFinishedAction WaypointMissionFinishedAction_MAX = ContinueUntilStop;
const int WaypointMissionFinishedAction_ARRAYSIZE = WaypointMissionFinishedAction_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointMissionFinishedAction_descriptor();
inline const ::std::string& WaypointMissionFinishedAction_Name(WaypointMissionFinishedAction value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointMissionFinishedAction_descriptor(), value);
}
inline bool WaypointMissionFinishedAction_Parse(
    const ::std::string& name, WaypointMissionFinishedAction* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointMissionFinishedAction>(
    WaypointMissionFinishedAction_descriptor(), name, value);
}
enum WaypointMissionRCLostConnection {
  FollowLostControlAction = 0,
  ContinueUntilFinished = 1,
  WaypointMissionRCLostConnection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointMissionRCLostConnection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointMissionRCLostConnection_IsValid(int value);
const WaypointMissionRCLostConnection WaypointMissionRCLostConnection_MIN = FollowLostControlAction;
const WaypointMissionRCLostConnection WaypointMissionRCLostConnection_MAX = ContinueUntilFinished;
const int WaypointMissionRCLostConnection_ARRAYSIZE = WaypointMissionRCLostConnection_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointMissionRCLostConnection_descriptor();
inline const ::std::string& WaypointMissionRCLostConnection_Name(WaypointMissionRCLostConnection value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointMissionRCLostConnection_descriptor(), value);
}
inline bool WaypointMissionRCLostConnection_Parse(
    const ::std::string& name, WaypointMissionRCLostConnection* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointMissionRCLostConnection>(
    WaypointMissionRCLostConnection_descriptor(), name, value);
}
enum WaypointMissionGotoWaypointMode {
  GotoWaypointSafely = 0,
  GotoWaypointPointToPoint = 1,
  WaypointMissionGotoWaypointMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointMissionGotoWaypointMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointMissionGotoWaypointMode_IsValid(int value);
const WaypointMissionGotoWaypointMode WaypointMissionGotoWaypointMode_MIN = GotoWaypointSafely;
const WaypointMissionGotoWaypointMode WaypointMissionGotoWaypointMode_MAX = GotoWaypointPointToPoint;
const int WaypointMissionGotoWaypointMode_ARRAYSIZE = WaypointMissionGotoWaypointMode_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointMissionGotoWaypointMode_descriptor();
inline const ::std::string& WaypointMissionGotoWaypointMode_Name(WaypointMissionGotoWaypointMode value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointMissionGotoWaypointMode_descriptor(), value);
}
inline bool WaypointMissionGotoWaypointMode_Parse(
    const ::std::string& name, WaypointMissionGotoWaypointMode* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointMissionGotoWaypointMode>(
    WaypointMissionGotoWaypointMode_descriptor(), name, value);
}
enum TrajectoryReplayTeachPointType {
  Normal = 0,
  TakePhoto = 1,
  PrecisionTakePhoto = 2,
  TrajectoryReplayTeachPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  TrajectoryReplayTeachPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool TrajectoryReplayTeachPointType_IsValid(int value);
const TrajectoryReplayTeachPointType TrajectoryReplayTeachPointType_MIN = Normal;
const TrajectoryReplayTeachPointType TrajectoryReplayTeachPointType_MAX = PrecisionTakePhoto;
const int TrajectoryReplayTeachPointType_ARRAYSIZE = TrajectoryReplayTeachPointType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* TrajectoryReplayTeachPointType_descriptor();
inline const ::std::string& TrajectoryReplayTeachPointType_Name(TrajectoryReplayTeachPointType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    TrajectoryReplayTeachPointType_descriptor(), value);
}
inline bool TrajectoryReplayTeachPointType_Parse(
    const ::std::string& name, TrajectoryReplayTeachPointType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<TrajectoryReplayTeachPointType>(
    TrajectoryReplayTeachPointType_descriptor(), name, value);
}
enum WaypointType {
  CurvatureContinuousPassed = 0,
  CurvatureContinuousStop = 1,
  CurvatureBreakStop = 2,
  CurvatureCoordinateTurning = 3,
  StraightIn = 4,
  StraightOut = 5,
  WaypointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointType_IsValid(int value);
const WaypointType WaypointType_MIN = CurvatureContinuousPassed;
const WaypointType WaypointType_MAX = StraightOut;
const int WaypointType_ARRAYSIZE = WaypointType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointType_descriptor();
inline const ::std::string& WaypointType_Name(WaypointType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointType_descriptor(), value);
}
inline bool WaypointType_Parse(
    const ::std::string& name, WaypointType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointType>(
    WaypointType_descriptor(), name, value);
}
enum WaypointYawMode {
  Auto = 0,
  UsingInitialDirection = 1,
  ControlByRC = 2,
  WaypointYawAngleControl = 3,
  TowardPointOfInterest = 4,
  CameraFollow = 5,
  WaypointYawMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointYawMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointYawMode_IsValid(int value);
const WaypointYawMode WaypointYawMode_MIN = Auto;
const WaypointYawMode WaypointYawMode_MAX = CameraFollow;
const int WaypointYawMode_ARRAYSIZE = WaypointYawMode_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointYawMode_descriptor();
inline const ::std::string& WaypointYawMode_Name(WaypointYawMode value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointYawMode_descriptor(), value);
}
inline bool WaypointYawMode_Parse(
    const ::std::string& name, WaypointYawMode* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointYawMode>(
    WaypointYawMode_descriptor(), name, value);
}
enum InterruptRecoverAction {
  GoBackToRecordPoint = 0,
  GoBackToCurrentProjectionPoint = 1,
  GoBackToNextProjectionPoint = 2,
  GoBackToNextNextProjectionPoint = 3,
  InterruptRecoverAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  InterruptRecoverAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool InterruptRecoverAction_IsValid(int value);
const InterruptRecoverAction InterruptRecoverAction_MIN = GoBackToRecordPoint;
const InterruptRecoverAction InterruptRecoverAction_MAX = GoBackToNextNextProjectionPoint;
const int InterruptRecoverAction_ARRAYSIZE = InterruptRecoverAction_MAX + 1;

const ::dji::protobuf::EnumDescriptor* InterruptRecoverAction_descriptor();
inline const ::std::string& InterruptRecoverAction_Name(InterruptRecoverAction value) {
  return ::dji::protobuf::internal::NameOfEnum(
    InterruptRecoverAction_descriptor(), value);
}
inline bool InterruptRecoverAction_Parse(
    const ::std::string& name, InterruptRecoverAction* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<InterruptRecoverAction>(
    InterruptRecoverAction_descriptor(), name, value);
}
enum WaypointActionTriggerType {
  TriggerTypeUnknown = 0,
  ReachPoints = 1,
  Associate = 2,
  Trajectory = 3,
  SimpleInterval = 4,
  SimpleReachPoint = 5,
  WaypointActionTriggerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointActionTriggerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointActionTriggerType_IsValid(int value);
const WaypointActionTriggerType WaypointActionTriggerType_MIN = TriggerTypeUnknown;
const WaypointActionTriggerType WaypointActionTriggerType_MAX = SimpleReachPoint;
const int WaypointActionTriggerType_ARRAYSIZE = WaypointActionTriggerType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointActionTriggerType_descriptor();
inline const ::std::string& WaypointActionTriggerType_Name(WaypointActionTriggerType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointActionTriggerType_descriptor(), value);
}
inline bool WaypointActionTriggerType_Parse(
    const ::std::string& name, WaypointActionTriggerType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointActionTriggerType>(
    WaypointActionTriggerType_descriptor(), name, value);
}
enum AssociateType {
  AssociateTypeUnknown = 0,
  ExecuteSynchronousAssoiate = 1,
  ExecuteAfterAssoiate = 2,
  AssociateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  AssociateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool AssociateType_IsValid(int value);
const AssociateType AssociateType_MIN = AssociateTypeUnknown;
const AssociateType AssociateType_MAX = ExecuteAfterAssoiate;
const int AssociateType_ARRAYSIZE = AssociateType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* AssociateType_descriptor();
inline const ::std::string& AssociateType_Name(AssociateType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    AssociateType_descriptor(), value);
}
inline bool AssociateType_Parse(
    const ::std::string& name, AssociateType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<AssociateType>(
    AssociateType_descriptor(), name, value);
}
enum WaypointActionActuatorType {
  ActuatorTypUnknown = 0,
  Camera = 1,
  Gimbal = 2,
  Spray = 3,
  AircraftControl = 4,
  PayloadControl = 5,
  Navigation = 6,
  WaypointActionActuatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  WaypointActionActuatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool WaypointActionActuatorType_IsValid(int value);
const WaypointActionActuatorType WaypointActionActuatorType_MIN = ActuatorTypUnknown;
const WaypointActionActuatorType WaypointActionActuatorType_MAX = Navigation;
const int WaypointActionActuatorType_ARRAYSIZE = WaypointActionActuatorType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* WaypointActionActuatorType_descriptor();
inline const ::std::string& WaypointActionActuatorType_Name(WaypointActionActuatorType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    WaypointActionActuatorType_descriptor(), value);
}
inline bool WaypointActionActuatorType_Parse(
    const ::std::string& name, WaypointActionActuatorType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<WaypointActionActuatorType>(
    WaypointActionActuatorType_descriptor(), name, value);
}
enum IntervalType {
  IntervalTypeUnknown = 0,
  IntervalTypeDistance = 1,
  IntervalTypeTime = 2,
  IntervalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  IntervalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool IntervalType_IsValid(int value);
const IntervalType IntervalType_MIN = IntervalTypeUnknown;
const IntervalType IntervalType_MAX = IntervalTypeTime;
const int IntervalType_ARRAYSIZE = IntervalType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* IntervalType_descriptor();
inline const ::std::string& IntervalType_Name(IntervalType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    IntervalType_descriptor(), value);
}
inline bool IntervalType_Parse(
    const ::std::string& name, IntervalType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<IntervalType>(
    IntervalType_descriptor(), name, value);
}
enum GimbalActionType {
  GimbalActionTypeUnknown = 0,
  RotateGimbal = 1,
  AircraftControlGimbal = 2,
  GimbalActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  GimbalActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool GimbalActionType_IsValid(int value);
const GimbalActionType GimbalActionType_MIN = GimbalActionTypeUnknown;
const GimbalActionType GimbalActionType_MAX = AircraftControlGimbal;
const int GimbalActionType_ARRAYSIZE = GimbalActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* GimbalActionType_descriptor();
inline const ::std::string& GimbalActionType_Name(GimbalActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    GimbalActionType_descriptor(), value);
}
inline bool GimbalActionType_Parse(
    const ::std::string& name, GimbalActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<GimbalActionType>(
    GimbalActionType_descriptor(), name, value);
}
enum CameraActionType {
  CameraActionTypeUnknown = 0,
  ShootSinglePhoto = 1,
  StartRecordVideo = 2,
  StopRecordVideo = 3,
  Focus = 4,
  ZoomLength = 5,
  CameraActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  CameraActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool CameraActionType_IsValid(int value);
const CameraActionType CameraActionType_MIN = CameraActionTypeUnknown;
const CameraActionType CameraActionType_MAX = ZoomLength;
const int CameraActionType_ARRAYSIZE = CameraActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* CameraActionType_descriptor();
inline const ::std::string& CameraActionType_Name(CameraActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    CameraActionType_descriptor(), value);
}
inline bool CameraActionType_Parse(
    const ::std::string& name, CameraActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<CameraActionType>(
    CameraActionType_descriptor(), name, value);
}
enum SprayActionType {
  SprayActionTypeUnknown = 0,
  AutoSpray = 1,
  SprayActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  SprayActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool SprayActionType_IsValid(int value);
const SprayActionType SprayActionType_MIN = SprayActionTypeUnknown;
const SprayActionType SprayActionType_MAX = AutoSpray;
const int SprayActionType_ARRAYSIZE = SprayActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* SprayActionType_descriptor();
inline const ::std::string& SprayActionType_Name(SprayActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    SprayActionType_descriptor(), value);
}
inline bool SprayActionType_Parse(
    const ::std::string& name, SprayActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<SprayActionType>(
    SprayActionType_descriptor(), name, value);
}
enum AircraftControlActionType {
  AircraftControlActionTypeUnknown = 0,
  RotateYaw = 1,
  StartStopFly = 2,
  AircraftControlActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  AircraftControlActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool AircraftControlActionType_IsValid(int value);
const AircraftControlActionType AircraftControlActionType_MIN = AircraftControlActionTypeUnknown;
const AircraftControlActionType AircraftControlActionType_MAX = StartStopFly;
const int AircraftControlActionType_ARRAYSIZE = AircraftControlActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* AircraftControlActionType_descriptor();
inline const ::std::string& AircraftControlActionType_Name(AircraftControlActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    AircraftControlActionType_descriptor(), value);
}
inline bool AircraftControlActionType_Parse(
    const ::std::string& name, AircraftControlActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<AircraftControlActionType>(
    AircraftControlActionType_descriptor(), name, value);
}
enum PayloadControlActionType {
  PayloadControlActionTypeUnknown = 0,
  Operating = 1,
  PayloadControlActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  PayloadControlActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool PayloadControlActionType_IsValid(int value);
const PayloadControlActionType PayloadControlActionType_MIN = PayloadControlActionTypeUnknown;
const PayloadControlActionType PayloadControlActionType_MAX = Operating;
const int PayloadControlActionType_ARRAYSIZE = PayloadControlActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* PayloadControlActionType_descriptor();
inline const ::std::string& PayloadControlActionType_Name(PayloadControlActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    PayloadControlActionType_descriptor(), value);
}
inline bool PayloadControlActionType_Parse(
    const ::std::string& name, PayloadControlActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<PayloadControlActionType>(
    PayloadControlActionType_descriptor(), name, value);
}
enum NavigationActionType {
  NavigationActionUnknown = 0,
  NavigationActionAccurateShootPhoto = 1,
  NavigationActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  NavigationActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool NavigationActionType_IsValid(int value);
const NavigationActionType NavigationActionType_MIN = NavigationActionUnknown;
const NavigationActionType NavigationActionType_MAX = NavigationActionAccurateShootPhoto;
const int NavigationActionType_ARRAYSIZE = NavigationActionType_MAX + 1;

const ::dji::protobuf::EnumDescriptor* NavigationActionType_descriptor();
inline const ::std::string& NavigationActionType_Name(NavigationActionType value) {
  return ::dji::protobuf::internal::NameOfEnum(
    NavigationActionType_descriptor(), value);
}
inline bool NavigationActionType_Parse(
    const ::std::string& name, NavigationActionType* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<NavigationActionType>(
    NavigationActionType_descriptor(), name, value);
}
enum AbstractionState {
  AbstractionStateUnknown = 0,
  Disconnected = 1,
  Recovering = 2,
  NotSupported = 3,
  ReadyToUpload = 4,
  UploadStarting = 5,
  Uploading = 6,
  ReadyToExecute = 7,
  ExecutionStarting = 8,
  Executing = 9,
  ExecutionPausing = 10,
  ExecutionPaused = 11,
  ExecutionResuming = 12,
  ExecutionStopping = 13,
  ExecutionInterrupting = 14,
  ExecutionInterrupted = 15,
  ExecutionRecovering = 16,
  ReadyToRetryUpload = 17,
  UploadCanceling = 18,
  Count = 19,
  AbstractionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  AbstractionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool AbstractionState_IsValid(int value);
const AbstractionState AbstractionState_MIN = AbstractionStateUnknown;
const AbstractionState AbstractionState_MAX = Count;
const int AbstractionState_ARRAYSIZE = AbstractionState_MAX + 1;

const ::dji::protobuf::EnumDescriptor* AbstractionState_descriptor();
inline const ::std::string& AbstractionState_Name(AbstractionState value) {
  return ::dji::protobuf::internal::NameOfEnum(
    AbstractionState_descriptor(), value);
}
inline bool AbstractionState_Parse(
    const ::std::string& name, AbstractionState* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<AbstractionState>(
    AbstractionState_descriptor(), name, value);
}
enum AbstractionEvent {
  Initialized = 0,
  SimulationOff = 1,
  EventDisconnected = 2,
  Connected = 3,
  UploadFailed = 4,
  UploadProgressUpdate = 5,
  UploadDone = 6,
  DownloadFailed = 7,
  DownloadProgressUpdate = 8,
  DownloadDone = 9,
  ExecutionStarted = 10,
  ExecutionStartFailed = 11,
  EventExecutionPaused = 12,
  ExecutionPauseFailed = 13,
  ExecutionStopped = 14,
  ExecutionStopFailed = 15,
  ExecutionResumed = 16,
  ExecutionResumeFailed = 17,
  ExecutionProgressUpdate = 18,
  ExecutionInterruptedEvent = 19,
  ExecutionFinished = 20,
  ExecutionInterruptedFailed = 21,
  ExecutionRecovered = 22,
  ExecutionRecoverFailed = 23,
  ExecutionPausedByAvoidance = 24,
  ExecutionUploadCancelled = 25,
  ExecutionDone = 26,
  AbstractionEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  AbstractionEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool AbstractionEvent_IsValid(int value);
const AbstractionEvent AbstractionEvent_MIN = Initialized;
const AbstractionEvent AbstractionEvent_MAX = ExecutionDone;
const int AbstractionEvent_ARRAYSIZE = AbstractionEvent_MAX + 1;

const ::dji::protobuf::EnumDescriptor* AbstractionEvent_descriptor();
inline const ::std::string& AbstractionEvent_Name(AbstractionEvent value) {
  return ::dji::protobuf::internal::NameOfEnum(
    AbstractionEvent_descriptor(), value);
}
inline bool AbstractionEvent_Parse(
    const ::std::string& name, AbstractionEvent* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<AbstractionEvent>(
    AbstractionEvent_descriptor(), name, value);
}
enum ActionState {
  ActionStateUnknown = 0,
  ActionStateDisconnected = 1,
  ActionStateRecovering = 2,
  ActionStateNotSupported = 3,
  ActionStateReadyToUpload = 4,
  ActionStateUploadStarting = 5,
  ActionStateUploading = 6,
  ActionStateReadyToExecute = 7,
  ActionStateExecuteStarting = 8,
  ActionStateExecuting = 9,
  ActionStateReadyToRetryUpload = 10,
  ActionStateNotReady = 11,
  ActionStateCount = 12,
  ActionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  ActionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool ActionState_IsValid(int value);
const ActionState ActionState_MIN = ActionStateUnknown;
const ActionState ActionState_MAX = ActionStateCount;
const int ActionState_ARRAYSIZE = ActionState_MAX + 1;

const ::dji::protobuf::EnumDescriptor* ActionState_descriptor();
inline const ::std::string& ActionState_Name(ActionState value) {
  return ::dji::protobuf::internal::NameOfEnum(
    ActionState_descriptor(), value);
}
inline bool ActionState_Parse(
    const ::std::string& name, ActionState* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<ActionState>(
    ActionState_descriptor(), name, value);
}
enum ActionEvent {
  ActionEventInitialized = 0,
  ActionEventWaypointUpload = 1,
  ActionEventDisconnected = 2,
  ActionEventUploadFailed = 3,
  ActionEventUploadProgressUpdate = 4,
  ActionEventUploadDone = 5,
  ActionEventDownloadFailed = 6,
  ActionEventDownloadProgressUpdate = 7,
  ActionEventDownloadDone = 8,
  ActionEventExecutionStarted = 9,
  ActionEventExecutionStartFailed = 10,
  ActionEventExecutionFinished = 11,
  ActionEventExecutionFailed = 12,
  ActionEventMissionStarted = 13,
  ActionEventMissionStoped = 14,
  ActionEventCount = 15,
  ActionEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  ActionEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool ActionEvent_IsValid(int value);
const ActionEvent ActionEvent_MIN = ActionEventInitialized;
const ActionEvent ActionEvent_MAX = ActionEventCount;
const int ActionEvent_ARRAYSIZE = ActionEvent_MAX + 1;

const ::dji::protobuf::EnumDescriptor* ActionEvent_descriptor();
inline const ::std::string& ActionEvent_Name(ActionEvent value) {
  return ::dji::protobuf::internal::NameOfEnum(
    ActionEvent_descriptor(), value);
}
inline bool ActionEvent_Parse(
    const ::std::string& name, ActionEvent* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<ActionEvent>(
    ActionEvent_descriptor(), name, value);
}
enum ExecuteState {
  ExecuteStatePrepareing = 0,
  ExecuteStateEnterLine = 1,
  ExecuteStateExecutingLine = 2,
  ExecuteStatePaused = 3,
  ExecuteStateInterrupting = 4,
  ExecuteStateExiting = 5,
  ExecuteStateFinishedGoHome = 6,
  ExecuteStateFinishedLanding = 7,
  ExecuteStateFinishedGotoFirstPoint = 8,
  ExecuteState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  ExecuteState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool ExecuteState_IsValid(int value);
const ExecuteState ExecuteState_MIN = ExecuteStatePrepareing;
const ExecuteState ExecuteState_MAX = ExecuteStateFinishedGotoFirstPoint;
const int ExecuteState_ARRAYSIZE = ExecuteState_MAX + 1;

const ::dji::protobuf::EnumDescriptor* ExecuteState_descriptor();
inline const ::std::string& ExecuteState_Name(ExecuteState value) {
  return ::dji::protobuf::internal::NameOfEnum(
    ExecuteState_descriptor(), value);
}
inline bool ExecuteState_Parse(
    const ::std::string& name, ExecuteState* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<ExecuteState>(
    ExecuteState_descriptor(), name, value);
}
enum TrajectoryReplayState {
  TrajectoryReplayStateUnknown = 0,
  TrajectoryReplayStateDisconnected = 1,
  TrajectoryReplayStateNotSupported = 2,
  TrajectoryReplayStateReadyToRecord = 3,
  TrajectoryReplayStateRecording = 4,
  TrajectoryReplayStateFailed = 5,
  TrajectoryReplayStateSucceed = 6,
  TrajectoryReplayStateCount = 7,
  TrajectoryReplayState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  TrajectoryReplayState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool TrajectoryReplayState_IsValid(int value);
const TrajectoryReplayState TrajectoryReplayState_MIN = TrajectoryReplayStateUnknown;
const TrajectoryReplayState TrajectoryReplayState_MAX = TrajectoryReplayStateCount;
const int TrajectoryReplayState_ARRAYSIZE = TrajectoryReplayState_MAX + 1;

const ::dji::protobuf::EnumDescriptor* TrajectoryReplayState_descriptor();
inline const ::std::string& TrajectoryReplayState_Name(TrajectoryReplayState value) {
  return ::dji::protobuf::internal::NameOfEnum(
    TrajectoryReplayState_descriptor(), value);
}
inline bool TrajectoryReplayState_Parse(
    const ::std::string& name, TrajectoryReplayState* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<TrajectoryReplayState>(
    TrajectoryReplayState_descriptor(), name, value);
}
enum TrajectoryReplayEvent {
  TrajectoryReplayEventInitialized = 0,
  TrajectoryReplayEventDisconnected = 1,
  TrajectoryReplayEventRecordStarted = 2,
  TrajectoryReplayEventRecordStartFailed = 3,
  TrajectoryReplayEventRecordOneFailed = 4,
  TrajectoryReplayEventRecordOneSucceed = 5,
  TrajectoryReplayEventRecordFinished = 6,
  TrajectoryReplayEventRecordFailed = 7,
  TrajectoryReplayEventRecordCancelled = 8,
  TrajectoryReplayEventRemoveOneFailed = 9,
  TrajectoryReplayEventRemoveOneSucceed = 10,
  TrajectoryReplayEventCount = 11,
  TrajectoryReplayEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32min,
  TrajectoryReplayEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::dji::protobuf::kint32max
};
bool TrajectoryReplayEvent_IsValid(int value);
const TrajectoryReplayEvent TrajectoryReplayEvent_MIN = TrajectoryReplayEventInitialized;
const TrajectoryReplayEvent TrajectoryReplayEvent_MAX = TrajectoryReplayEventCount;
const int TrajectoryReplayEvent_ARRAYSIZE = TrajectoryReplayEvent_MAX + 1;

const ::dji::protobuf::EnumDescriptor* TrajectoryReplayEvent_descriptor();
inline const ::std::string& TrajectoryReplayEvent_Name(TrajectoryReplayEvent value) {
  return ::dji::protobuf::internal::NameOfEnum(
    TrajectoryReplayEvent_descriptor(), value);
}
inline bool TrajectoryReplayEvent_Parse(
    const ::std::string& name, TrajectoryReplayEvent* value) {
  return ::dji::protobuf::internal::ParseNamedEnum<TrajectoryReplayEvent>(
    TrajectoryReplayEvent_descriptor(), name, value);
}
// ===================================================================

class LocationCoordinate : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.LocationCoordinate) */ {
 public:
  LocationCoordinate();
  virtual ~LocationCoordinate();

  LocationCoordinate(const LocationCoordinate& from);

  inline LocationCoordinate& operator=(const LocationCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationCoordinate(LocationCoordinate&& from) noexcept
    : LocationCoordinate() {
    *this = ::std::move(from);
  }

  inline LocationCoordinate& operator=(LocationCoordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const LocationCoordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationCoordinate* internal_default_instance() {
    return reinterpret_cast<const LocationCoordinate*>(
               &_LocationCoordinate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocationCoordinate* other);
  friend void swap(LocationCoordinate& a, LocationCoordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationCoordinate* New() const PROTOBUF_FINAL { return New(NULL); }

  LocationCoordinate* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocationCoordinate& from);
  void MergeFrom(const LocationCoordinate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocationCoordinate* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.LocationCoordinate)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  double altitude_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsLocationCoordinateImpl();
};
// -------------------------------------------------------------------

class WaypointMission : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointMission) */ {
 public:
  WaypointMission();
  virtual ~WaypointMission();

  WaypointMission(const WaypointMission& from);

  inline WaypointMission& operator=(const WaypointMission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointMission(WaypointMission&& from) noexcept
    : WaypointMission() {
    *this = ::std::move(from);
  }

  inline WaypointMission& operator=(WaypointMission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointMission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointMission* internal_default_instance() {
    return reinterpret_cast<const WaypointMission*>(
               &_WaypointMission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WaypointMission* other);
  friend void swap(WaypointMission& a, WaypointMission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointMission* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointMission* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointMission& from);
  void MergeFrom(const WaypointMission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointMission* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dji.waypointv2.WaypointItem waypoint_list = 11;
  int waypoint_list_size() const;
  void clear_waypoint_list();
  static const int kWaypointListFieldNumber = 11;
  const ::dji::waypointv2::WaypointItem& waypoint_list(int index) const;
  ::dji::waypointv2::WaypointItem* mutable_waypoint_list(int index);
  ::dji::waypointv2::WaypointItem* add_waypoint_list();
  ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointItem >*
      mutable_waypoint_list();
  const ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointItem >&
      waypoint_list() const;

  // .dji.waypointv2.LocationCoordinate reference_location = 13;
  bool has_reference_location() const;
  void clear_reference_location();
  static const int kReferenceLocationFieldNumber = 13;
  const ::dji::waypointv2::LocationCoordinate& reference_location() const;
  ::dji::waypointv2::LocationCoordinate* release_reference_location();
  ::dji::waypointv2::LocationCoordinate* mutable_reference_location();
  void set_allocated_reference_location(::dji::waypointv2::LocationCoordinate* reference_location);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::dji::protobuf::uint32 version() const;
  void set_version(::dji::protobuf::uint32 value);

  // uint32 misssion_id = 2;
  void clear_misssion_id();
  static const int kMisssionIdFieldNumber = 2;
  ::dji::protobuf::uint32 misssion_id() const;
  void set_misssion_id(::dji::protobuf::uint32 value);

  // uint32 total_len = 3;
  void clear_total_len();
  static const int kTotalLenFieldNumber = 3;
  ::dji::protobuf::uint32 total_len() const;
  void set_total_len(::dji::protobuf::uint32 value);

  // uint32 current_total_len = 4;
  void clear_current_total_len();
  static const int kCurrentTotalLenFieldNumber = 4;
  ::dji::protobuf::uint32 current_total_len() const;
  void set_current_total_len(::dji::protobuf::uint32 value);

  // uint32 repeat_times = 5;
  void clear_repeat_times();
  static const int kRepeatTimesFieldNumber = 5;
  ::dji::protobuf::uint32 repeat_times() const;
  void set_repeat_times(::dji::protobuf::uint32 value);

  // .dji.waypointv2.WaypointMissionFinishedAction finished_action = 6;
  void clear_finished_action();
  static const int kFinishedActionFieldNumber = 6;
  ::dji::waypointv2::WaypointMissionFinishedAction finished_action() const;
  void set_finished_action(::dji::waypointv2::WaypointMissionFinishedAction value);

  // float global_max_velocity = 7;
  void clear_global_max_velocity();
  static const int kGlobalMaxVelocityFieldNumber = 7;
  float global_max_velocity() const;
  void set_global_max_velocity(float value);

  // float global_cruise_velocity = 8;
  void clear_global_cruise_velocity();
  static const int kGlobalCruiseVelocityFieldNumber = 8;
  float global_cruise_velocity() const;
  void set_global_cruise_velocity(float value);

  // uint32 start_index = 9;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 9;
  ::dji::protobuf::uint32 start_index() const;
  void set_start_index(::dji::protobuf::uint32 value);

  // .dji.waypointv2.WaypointMissionRCLostConnection rc_lost_action = 10;
  void clear_rc_lost_action();
  static const int kRcLostActionFieldNumber = 10;
  ::dji::waypointv2::WaypointMissionRCLostConnection rc_lost_action() const;
  void set_rc_lost_action(::dji::waypointv2::WaypointMissionRCLostConnection value);

  // .dji.waypointv2.WaypointMissionGotoWaypointMode goto_first_action = 12;
  void clear_goto_first_action();
  static const int kGotoFirstActionFieldNumber = 12;
  ::dji::waypointv2::WaypointMissionGotoWaypointMode goto_first_action() const;
  void set_goto_first_action(::dji::waypointv2::WaypointMissionGotoWaypointMode value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointMission)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointItem > waypoint_list_;
  ::dji::waypointv2::LocationCoordinate* reference_location_;
  ::dji::protobuf::uint32 version_;
  ::dji::protobuf::uint32 misssion_id_;
  ::dji::protobuf::uint32 total_len_;
  ::dji::protobuf::uint32 current_total_len_;
  ::dji::protobuf::uint32 repeat_times_;
  int finished_action_;
  float global_max_velocity_;
  float global_cruise_velocity_;
  ::dji::protobuf::uint32 start_index_;
  int rc_lost_action_;
  int goto_first_action_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointMissionImpl();
};
// -------------------------------------------------------------------

class WaypointItem : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointItem) */ {
 public:
  WaypointItem();
  virtual ~WaypointItem();

  WaypointItem(const WaypointItem& from);

  inline WaypointItem& operator=(const WaypointItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointItem(WaypointItem&& from) noexcept
    : WaypointItem() {
    *this = ::std::move(from);
  }

  inline WaypointItem& operator=(WaypointItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointItem* internal_default_instance() {
    return reinterpret_cast<const WaypointItem*>(
               &_WaypointItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WaypointItem* other);
  friend void swap(WaypointItem& a, WaypointItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointItem* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointItem* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointItem& from);
  void MergeFrom(const WaypointItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointItem* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.LocationCoordinate location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::dji::waypointv2::LocationCoordinate& location() const;
  ::dji::waypointv2::LocationCoordinate* release_location();
  ::dji::waypointv2::LocationCoordinate* mutable_location();
  void set_allocated_location(::dji::waypointv2::LocationCoordinate* location);

  // .dji.waypointv2.LocationCoordinate poi_location = 9;
  bool has_poi_location() const;
  void clear_poi_location();
  static const int kPoiLocationFieldNumber = 9;
  const ::dji::waypointv2::LocationCoordinate& poi_location() const;
  ::dji::waypointv2::LocationCoordinate* release_poi_location();
  ::dji::waypointv2::LocationCoordinate* mutable_poi_location();
  void set_allocated_poi_location(::dji::waypointv2::LocationCoordinate* poi_location);

  // .dji.waypointv2.WaypointType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dji::waypointv2::WaypointType type() const;
  void set_type(::dji::waypointv2::WaypointType value);

  // .dji.waypointv2.WaypointYawMode yaw_mode = 3;
  void clear_yaw_mode();
  static const int kYawModeFieldNumber = 3;
  ::dji::waypointv2::WaypointYawMode yaw_mode() const;
  void set_yaw_mode(::dji::waypointv2::WaypointYawMode value);

  // bool use_local_cruise_velocity = 4;
  void clear_use_local_cruise_velocity();
  static const int kUseLocalCruiseVelocityFieldNumber = 4;
  bool use_local_cruise_velocity() const;
  void set_use_local_cruise_velocity(bool value);

  // bool use_local_max_velocity = 5;
  void clear_use_local_max_velocity();
  static const int kUseLocalMaxVelocityFieldNumber = 5;
  bool use_local_max_velocity() const;
  void set_use_local_max_velocity(bool value);

  // bool yaw_turn_direction = 8;
  void clear_yaw_turn_direction();
  static const int kYawTurnDirectionFieldNumber = 8;
  bool yaw_turn_direction() const;
  void set_yaw_turn_direction(bool value);

  // float damping_distance = 6;
  void clear_damping_distance();
  static const int kDampingDistanceFieldNumber = 6;
  float damping_distance() const;
  void set_damping_distance(float value);

  // float yaw_turn_angle = 7;
  void clear_yaw_turn_angle();
  static const int kYawTurnAngleFieldNumber = 7;
  float yaw_turn_angle() const;
  void set_yaw_turn_angle(float value);

  // float local_cruise_velocity = 10;
  void clear_local_cruise_velocity();
  static const int kLocalCruiseVelocityFieldNumber = 10;
  float local_cruise_velocity() const;
  void set_local_cruise_velocity(float value);

  // float local_max_velocity = 11;
  void clear_local_max_velocity();
  static const int kLocalMaxVelocityFieldNumber = 11;
  float local_max_velocity() const;
  void set_local_max_velocity(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointItem)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::LocationCoordinate* location_;
  ::dji::waypointv2::LocationCoordinate* poi_location_;
  int type_;
  int yaw_mode_;
  bool use_local_cruise_velocity_;
  bool use_local_max_velocity_;
  bool yaw_turn_direction_;
  float damping_distance_;
  float yaw_turn_angle_;
  float local_cruise_velocity_;
  float local_max_velocity_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointItemImpl();
};
// -------------------------------------------------------------------

class WaypointActionReachPointsTriggerParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionReachPointsTriggerParam) */ {
 public:
  WaypointActionReachPointsTriggerParam();
  virtual ~WaypointActionReachPointsTriggerParam();

  WaypointActionReachPointsTriggerParam(const WaypointActionReachPointsTriggerParam& from);

  inline WaypointActionReachPointsTriggerParam& operator=(const WaypointActionReachPointsTriggerParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionReachPointsTriggerParam(WaypointActionReachPointsTriggerParam&& from) noexcept
    : WaypointActionReachPointsTriggerParam() {
    *this = ::std::move(from);
  }

  inline WaypointActionReachPointsTriggerParam& operator=(WaypointActionReachPointsTriggerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionReachPointsTriggerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionReachPointsTriggerParam* internal_default_instance() {
    return reinterpret_cast<const WaypointActionReachPointsTriggerParam*>(
               &_WaypointActionReachPointsTriggerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WaypointActionReachPointsTriggerParam* other);
  friend void swap(WaypointActionReachPointsTriggerParam& a, WaypointActionReachPointsTriggerParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionReachPointsTriggerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionReachPointsTriggerParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionReachPointsTriggerParam& from);
  void MergeFrom(const WaypointActionReachPointsTriggerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionReachPointsTriggerParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_index = 1;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 1;
  ::dji::protobuf::uint32 start_index() const;
  void set_start_index(::dji::protobuf::uint32 value);

  // uint32 end_index = 2;
  void clear_end_index();
  static const int kEndIndexFieldNumber = 2;
  ::dji::protobuf::uint32 end_index() const;
  void set_end_index(::dji::protobuf::uint32 value);

  // uint32 interval_count = 3;
  void clear_interval_count();
  static const int kIntervalCountFieldNumber = 3;
  ::dji::protobuf::uint32 interval_count() const;
  void set_interval_count(::dji::protobuf::uint32 value);

  // uint32 auto_exit_count = 4;
  void clear_auto_exit_count();
  static const int kAutoExitCountFieldNumber = 4;
  ::dji::protobuf::uint32 auto_exit_count() const;
  void set_auto_exit_count(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionReachPointsTriggerParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 start_index_;
  ::dji::protobuf::uint32 end_index_;
  ::dji::protobuf::uint32 interval_count_;
  ::dji::protobuf::uint32 auto_exit_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionReachPointsTriggerParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionTrajectoryTriggerParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionTrajectoryTriggerParam) */ {
 public:
  WaypointActionTrajectoryTriggerParam();
  virtual ~WaypointActionTrajectoryTriggerParam();

  WaypointActionTrajectoryTriggerParam(const WaypointActionTrajectoryTriggerParam& from);

  inline WaypointActionTrajectoryTriggerParam& operator=(const WaypointActionTrajectoryTriggerParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionTrajectoryTriggerParam(WaypointActionTrajectoryTriggerParam&& from) noexcept
    : WaypointActionTrajectoryTriggerParam() {
    *this = ::std::move(from);
  }

  inline WaypointActionTrajectoryTriggerParam& operator=(WaypointActionTrajectoryTriggerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionTrajectoryTriggerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionTrajectoryTriggerParam* internal_default_instance() {
    return reinterpret_cast<const WaypointActionTrajectoryTriggerParam*>(
               &_WaypointActionTrajectoryTriggerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WaypointActionTrajectoryTriggerParam* other);
  friend void swap(WaypointActionTrajectoryTriggerParam& a, WaypointActionTrajectoryTriggerParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionTrajectoryTriggerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionTrajectoryTriggerParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionTrajectoryTriggerParam& from);
  void MergeFrom(const WaypointActionTrajectoryTriggerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionTrajectoryTriggerParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_index = 1;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 1;
  ::dji::protobuf::uint32 start_index() const;
  void set_start_index(::dji::protobuf::uint32 value);

  // uint32 end_index = 2;
  void clear_end_index();
  static const int kEndIndexFieldNumber = 2;
  ::dji::protobuf::uint32 end_index() const;
  void set_end_index(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionTrajectoryTriggerParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 start_index_;
  ::dji::protobuf::uint32 end_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionTrajectoryTriggerParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionAssociateTriggerParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionAssociateTriggerParam) */ {
 public:
  WaypointActionAssociateTriggerParam();
  virtual ~WaypointActionAssociateTriggerParam();

  WaypointActionAssociateTriggerParam(const WaypointActionAssociateTriggerParam& from);

  inline WaypointActionAssociateTriggerParam& operator=(const WaypointActionAssociateTriggerParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionAssociateTriggerParam(WaypointActionAssociateTriggerParam&& from) noexcept
    : WaypointActionAssociateTriggerParam() {
    *this = ::std::move(from);
  }

  inline WaypointActionAssociateTriggerParam& operator=(WaypointActionAssociateTriggerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionAssociateTriggerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionAssociateTriggerParam* internal_default_instance() {
    return reinterpret_cast<const WaypointActionAssociateTriggerParam*>(
               &_WaypointActionAssociateTriggerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WaypointActionAssociateTriggerParam* other);
  friend void swap(WaypointActionAssociateTriggerParam& a, WaypointActionAssociateTriggerParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionAssociateTriggerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionAssociateTriggerParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionAssociateTriggerParam& from);
  void MergeFrom(const WaypointActionAssociateTriggerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionAssociateTriggerParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.AssociateType associate_type = 1;
  void clear_associate_type();
  static const int kAssociateTypeFieldNumber = 1;
  ::dji::waypointv2::AssociateType associate_type() const;
  void set_associate_type(::dji::waypointv2::AssociateType value);

  // float waiting_time = 2;
  void clear_waiting_time();
  static const int kWaitingTimeFieldNumber = 2;
  float waiting_time() const;
  void set_waiting_time(float value);

  // uint32 associate_action_id = 3;
  void clear_associate_action_id();
  static const int kAssociateActionIdFieldNumber = 3;
  ::dji::protobuf::uint32 associate_action_id() const;
  void set_associate_action_id(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionAssociateTriggerParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int associate_type_;
  float waiting_time_;
  ::dji::protobuf::uint32 associate_action_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionAssociateTriggerParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionSimpleIntervalParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionSimpleIntervalParam) */ {
 public:
  WaypointActionSimpleIntervalParam();
  virtual ~WaypointActionSimpleIntervalParam();

  WaypointActionSimpleIntervalParam(const WaypointActionSimpleIntervalParam& from);

  inline WaypointActionSimpleIntervalParam& operator=(const WaypointActionSimpleIntervalParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionSimpleIntervalParam(WaypointActionSimpleIntervalParam&& from) noexcept
    : WaypointActionSimpleIntervalParam() {
    *this = ::std::move(from);
  }

  inline WaypointActionSimpleIntervalParam& operator=(WaypointActionSimpleIntervalParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionSimpleIntervalParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionSimpleIntervalParam* internal_default_instance() {
    return reinterpret_cast<const WaypointActionSimpleIntervalParam*>(
               &_WaypointActionSimpleIntervalParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WaypointActionSimpleIntervalParam* other);
  friend void swap(WaypointActionSimpleIntervalParam& a, WaypointActionSimpleIntervalParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionSimpleIntervalParam* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionSimpleIntervalParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionSimpleIntervalParam& from);
  void MergeFrom(const WaypointActionSimpleIntervalParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionSimpleIntervalParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_index = 1;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 1;
  ::dji::protobuf::uint32 start_index() const;
  void set_start_index(::dji::protobuf::uint32 value);

  // float interval_value = 2;
  void clear_interval_value();
  static const int kIntervalValueFieldNumber = 2;
  float interval_value() const;
  void set_interval_value(float value);

  // .dji.waypointv2.IntervalType interval_type = 3;
  void clear_interval_type();
  static const int kIntervalTypeFieldNumber = 3;
  ::dji::waypointv2::IntervalType interval_type() const;
  void set_interval_type(::dji::waypointv2::IntervalType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionSimpleIntervalParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 start_index_;
  float interval_value_;
  int interval_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionSimpleIntervalParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionSimpleReachPointParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionSimpleReachPointParam) */ {
 public:
  WaypointActionSimpleReachPointParam();
  virtual ~WaypointActionSimpleReachPointParam();

  WaypointActionSimpleReachPointParam(const WaypointActionSimpleReachPointParam& from);

  inline WaypointActionSimpleReachPointParam& operator=(const WaypointActionSimpleReachPointParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionSimpleReachPointParam(WaypointActionSimpleReachPointParam&& from) noexcept
    : WaypointActionSimpleReachPointParam() {
    *this = ::std::move(from);
  }

  inline WaypointActionSimpleReachPointParam& operator=(WaypointActionSimpleReachPointParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionSimpleReachPointParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionSimpleReachPointParam* internal_default_instance() {
    return reinterpret_cast<const WaypointActionSimpleReachPointParam*>(
               &_WaypointActionSimpleReachPointParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(WaypointActionSimpleReachPointParam* other);
  friend void swap(WaypointActionSimpleReachPointParam& a, WaypointActionSimpleReachPointParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionSimpleReachPointParam* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionSimpleReachPointParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionSimpleReachPointParam& from);
  void MergeFrom(const WaypointActionSimpleReachPointParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionSimpleReachPointParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_index = 1;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 1;
  ::dji::protobuf::uint32 start_index() const;
  void set_start_index(::dji::protobuf::uint32 value);

  // uint32 auto_exit_count = 2;
  void clear_auto_exit_count();
  static const int kAutoExitCountFieldNumber = 2;
  ::dji::protobuf::uint32 auto_exit_count() const;
  void set_auto_exit_count(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionSimpleReachPointParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 start_index_;
  ::dji::protobuf::uint32 auto_exit_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionSimpleReachPointParamImpl();
};
// -------------------------------------------------------------------

class ActuatorCameraShootPhotoParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorCameraShootPhotoParam) */ {
 public:
  ActuatorCameraShootPhotoParam();
  virtual ~ActuatorCameraShootPhotoParam();

  ActuatorCameraShootPhotoParam(const ActuatorCameraShootPhotoParam& from);

  inline ActuatorCameraShootPhotoParam& operator=(const ActuatorCameraShootPhotoParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCameraShootPhotoParam(ActuatorCameraShootPhotoParam&& from) noexcept
    : ActuatorCameraShootPhotoParam() {
    *this = ::std::move(from);
  }

  inline ActuatorCameraShootPhotoParam& operator=(ActuatorCameraShootPhotoParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorCameraShootPhotoParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCameraShootPhotoParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorCameraShootPhotoParam*>(
               &_ActuatorCameraShootPhotoParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ActuatorCameraShootPhotoParam* other);
  friend void swap(ActuatorCameraShootPhotoParam& a, ActuatorCameraShootPhotoParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCameraShootPhotoParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCameraShootPhotoParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCameraShootPhotoParam& from);
  void MergeFrom(const ActuatorCameraShootPhotoParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCameraShootPhotoParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 retry_times = 1;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 1;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorCameraShootPhotoParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 retry_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorCameraShootPhotoParamImpl();
};
// -------------------------------------------------------------------

class ActuatorCameraStartRecordVideoParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorCameraStartRecordVideoParam) */ {
 public:
  ActuatorCameraStartRecordVideoParam();
  virtual ~ActuatorCameraStartRecordVideoParam();

  ActuatorCameraStartRecordVideoParam(const ActuatorCameraStartRecordVideoParam& from);

  inline ActuatorCameraStartRecordVideoParam& operator=(const ActuatorCameraStartRecordVideoParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCameraStartRecordVideoParam(ActuatorCameraStartRecordVideoParam&& from) noexcept
    : ActuatorCameraStartRecordVideoParam() {
    *this = ::std::move(from);
  }

  inline ActuatorCameraStartRecordVideoParam& operator=(ActuatorCameraStartRecordVideoParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorCameraStartRecordVideoParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCameraStartRecordVideoParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorCameraStartRecordVideoParam*>(
               &_ActuatorCameraStartRecordVideoParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ActuatorCameraStartRecordVideoParam* other);
  friend void swap(ActuatorCameraStartRecordVideoParam& a, ActuatorCameraStartRecordVideoParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCameraStartRecordVideoParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCameraStartRecordVideoParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCameraStartRecordVideoParam& from);
  void MergeFrom(const ActuatorCameraStartRecordVideoParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCameraStartRecordVideoParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 retry_times = 1;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 1;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorCameraStartRecordVideoParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 retry_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorCameraStartRecordVideoParamImpl();
};
// -------------------------------------------------------------------

class ActuatorCameraStopRecordVideoParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorCameraStopRecordVideoParam) */ {
 public:
  ActuatorCameraStopRecordVideoParam();
  virtual ~ActuatorCameraStopRecordVideoParam();

  ActuatorCameraStopRecordVideoParam(const ActuatorCameraStopRecordVideoParam& from);

  inline ActuatorCameraStopRecordVideoParam& operator=(const ActuatorCameraStopRecordVideoParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCameraStopRecordVideoParam(ActuatorCameraStopRecordVideoParam&& from) noexcept
    : ActuatorCameraStopRecordVideoParam() {
    *this = ::std::move(from);
  }

  inline ActuatorCameraStopRecordVideoParam& operator=(ActuatorCameraStopRecordVideoParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorCameraStopRecordVideoParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCameraStopRecordVideoParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorCameraStopRecordVideoParam*>(
               &_ActuatorCameraStopRecordVideoParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ActuatorCameraStopRecordVideoParam* other);
  friend void swap(ActuatorCameraStopRecordVideoParam& a, ActuatorCameraStopRecordVideoParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCameraStopRecordVideoParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCameraStopRecordVideoParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCameraStopRecordVideoParam& from);
  void MergeFrom(const ActuatorCameraStopRecordVideoParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCameraStopRecordVideoParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 retry_times = 1;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 1;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorCameraStopRecordVideoParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 retry_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorCameraStopRecordVideoParamImpl();
};
// -------------------------------------------------------------------

class ActuatorCameraFocusParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorCameraFocusParam) */ {
 public:
  ActuatorCameraFocusParam();
  virtual ~ActuatorCameraFocusParam();

  ActuatorCameraFocusParam(const ActuatorCameraFocusParam& from);

  inline ActuatorCameraFocusParam& operator=(const ActuatorCameraFocusParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCameraFocusParam(ActuatorCameraFocusParam&& from) noexcept
    : ActuatorCameraFocusParam() {
    *this = ::std::move(from);
  }

  inline ActuatorCameraFocusParam& operator=(ActuatorCameraFocusParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorCameraFocusParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCameraFocusParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorCameraFocusParam*>(
               &_ActuatorCameraFocusParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ActuatorCameraFocusParam* other);
  friend void swap(ActuatorCameraFocusParam& a, ActuatorCameraFocusParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCameraFocusParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCameraFocusParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCameraFocusParam& from);
  void MergeFrom(const ActuatorCameraFocusParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCameraFocusParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_position = 1;
  void clear_x_position();
  static const int kXPositionFieldNumber = 1;
  float x_position() const;
  void set_x_position(float value);

  // float y_position = 2;
  void clear_y_position();
  static const int kYPositionFieldNumber = 2;
  float y_position() const;
  void set_y_position(float value);

  // uint32 retry_times = 3;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 3;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // uint32 focus_dealy_time = 4;
  void clear_focus_dealy_time();
  static const int kFocusDealyTimeFieldNumber = 4;
  ::dji::protobuf::uint32 focus_dealy_time() const;
  void set_focus_dealy_time(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorCameraFocusParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_position_;
  float y_position_;
  ::dji::protobuf::uint32 retry_times_;
  ::dji::protobuf::uint32 focus_dealy_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorCameraFocusParamImpl();
};
// -------------------------------------------------------------------

class ActuatorCameraZoomLengthParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorCameraZoomLengthParam) */ {
 public:
  ActuatorCameraZoomLengthParam();
  virtual ~ActuatorCameraZoomLengthParam();

  ActuatorCameraZoomLengthParam(const ActuatorCameraZoomLengthParam& from);

  inline ActuatorCameraZoomLengthParam& operator=(const ActuatorCameraZoomLengthParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCameraZoomLengthParam(ActuatorCameraZoomLengthParam&& from) noexcept
    : ActuatorCameraZoomLengthParam() {
    *this = ::std::move(from);
  }

  inline ActuatorCameraZoomLengthParam& operator=(ActuatorCameraZoomLengthParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorCameraZoomLengthParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCameraZoomLengthParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorCameraZoomLengthParam*>(
               &_ActuatorCameraZoomLengthParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ActuatorCameraZoomLengthParam* other);
  friend void swap(ActuatorCameraZoomLengthParam& a, ActuatorCameraZoomLengthParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCameraZoomLengthParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCameraZoomLengthParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCameraZoomLengthParam& from);
  void MergeFrom(const ActuatorCameraZoomLengthParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCameraZoomLengthParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 focal_distance = 1;
  void clear_focal_distance();
  static const int kFocalDistanceFieldNumber = 1;
  ::dji::protobuf::uint32 focal_distance() const;
  void set_focal_distance(::dji::protobuf::uint32 value);

  // uint32 retry_times = 2;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 2;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorCameraZoomLengthParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 focal_distance_;
  ::dji::protobuf::uint32 retry_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorCameraZoomLengthParamImpl();
};
// -------------------------------------------------------------------

class ActuatorGimbalRotateParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorGimbalRotateParam) */ {
 public:
  ActuatorGimbalRotateParam();
  virtual ~ActuatorGimbalRotateParam();

  ActuatorGimbalRotateParam(const ActuatorGimbalRotateParam& from);

  inline ActuatorGimbalRotateParam& operator=(const ActuatorGimbalRotateParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorGimbalRotateParam(ActuatorGimbalRotateParam&& from) noexcept
    : ActuatorGimbalRotateParam() {
    *this = ::std::move(from);
  }

  inline ActuatorGimbalRotateParam& operator=(ActuatorGimbalRotateParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorGimbalRotateParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorGimbalRotateParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorGimbalRotateParam*>(
               &_ActuatorGimbalRotateParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ActuatorGimbalRotateParam* other);
  friend void swap(ActuatorGimbalRotateParam& a, ActuatorGimbalRotateParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorGimbalRotateParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorGimbalRotateParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorGimbalRotateParam& from);
  void MergeFrom(const ActuatorGimbalRotateParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorGimbalRotateParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float gimbal_roll = 1;
  void clear_gimbal_roll();
  static const int kGimbalRollFieldNumber = 1;
  float gimbal_roll() const;
  void set_gimbal_roll(float value);

  // float gimbal_pitch = 2;
  void clear_gimbal_pitch();
  static const int kGimbalPitchFieldNumber = 2;
  float gimbal_pitch() const;
  void set_gimbal_pitch(float value);

  // float gimbal_yaw = 3;
  void clear_gimbal_yaw();
  static const int kGimbalYawFieldNumber = 3;
  float gimbal_yaw() const;
  void set_gimbal_yaw(float value);

  // bool is_absolute = 4;
  void clear_is_absolute();
  static const int kIsAbsoluteFieldNumber = 4;
  bool is_absolute() const;
  void set_is_absolute(bool value);

  // bool roll_ignore = 5;
  void clear_roll_ignore();
  static const int kRollIgnoreFieldNumber = 5;
  bool roll_ignore() const;
  void set_roll_ignore(bool value);

  // bool pitch_ignore = 6;
  void clear_pitch_ignore();
  static const int kPitchIgnoreFieldNumber = 6;
  bool pitch_ignore() const;
  void set_pitch_ignore(bool value);

  // bool yaw_ignore = 7;
  void clear_yaw_ignore();
  static const int kYawIgnoreFieldNumber = 7;
  bool yaw_ignore() const;
  void set_yaw_ignore(bool value);

  // bool is_aircraft_heading_coordinate_system = 8;
  void clear_is_aircraft_heading_coordinate_system();
  static const int kIsAircraftHeadingCoordinateSystemFieldNumber = 8;
  bool is_aircraft_heading_coordinate_system() const;
  void set_is_aircraft_heading_coordinate_system(bool value);

  // uint32 duration_time = 9;
  void clear_duration_time();
  static const int kDurationTimeFieldNumber = 9;
  ::dji::protobuf::uint32 duration_time() const;
  void set_duration_time(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorGimbalRotateParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float gimbal_roll_;
  float gimbal_pitch_;
  float gimbal_yaw_;
  bool is_absolute_;
  bool roll_ignore_;
  bool pitch_ignore_;
  bool yaw_ignore_;
  bool is_aircraft_heading_coordinate_system_;
  ::dji::protobuf::uint32 duration_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorGimbalRotateParamImpl();
};
// -------------------------------------------------------------------

class ActuatorAircraftControlGimbalParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorAircraftControlGimbalParam) */ {
 public:
  ActuatorAircraftControlGimbalParam();
  virtual ~ActuatorAircraftControlGimbalParam();

  ActuatorAircraftControlGimbalParam(const ActuatorAircraftControlGimbalParam& from);

  inline ActuatorAircraftControlGimbalParam& operator=(const ActuatorAircraftControlGimbalParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorAircraftControlGimbalParam(ActuatorAircraftControlGimbalParam&& from) noexcept
    : ActuatorAircraftControlGimbalParam() {
    *this = ::std::move(from);
  }

  inline ActuatorAircraftControlGimbalParam& operator=(ActuatorAircraftControlGimbalParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorAircraftControlGimbalParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorAircraftControlGimbalParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorAircraftControlGimbalParam*>(
               &_ActuatorAircraftControlGimbalParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ActuatorAircraftControlGimbalParam* other);
  friend void swap(ActuatorAircraftControlGimbalParam& a, ActuatorAircraftControlGimbalParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorAircraftControlGimbalParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorAircraftControlGimbalParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorAircraftControlGimbalParam& from);
  void MergeFrom(const ActuatorAircraftControlGimbalParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorAircraftControlGimbalParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float gimbal_pitch = 1;
  void clear_gimbal_pitch();
  static const int kGimbalPitchFieldNumber = 1;
  float gimbal_pitch() const;
  void set_gimbal_pitch(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorAircraftControlGimbalParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float gimbal_pitch_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorAircraftControlGimbalParamImpl();
};
// -------------------------------------------------------------------

class ActuatorAircraftControlRotateYawParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorAircraftControlRotateYawParam) */ {
 public:
  ActuatorAircraftControlRotateYawParam();
  virtual ~ActuatorAircraftControlRotateYawParam();

  ActuatorAircraftControlRotateYawParam(const ActuatorAircraftControlRotateYawParam& from);

  inline ActuatorAircraftControlRotateYawParam& operator=(const ActuatorAircraftControlRotateYawParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorAircraftControlRotateYawParam(ActuatorAircraftControlRotateYawParam&& from) noexcept
    : ActuatorAircraftControlRotateYawParam() {
    *this = ::std::move(from);
  }

  inline ActuatorAircraftControlRotateYawParam& operator=(ActuatorAircraftControlRotateYawParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorAircraftControlRotateYawParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorAircraftControlRotateYawParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorAircraftControlRotateYawParam*>(
               &_ActuatorAircraftControlRotateYawParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ActuatorAircraftControlRotateYawParam* other);
  friend void swap(ActuatorAircraftControlRotateYawParam& a, ActuatorAircraftControlRotateYawParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorAircraftControlRotateYawParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorAircraftControlRotateYawParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorAircraftControlRotateYawParam& from);
  void MergeFrom(const ActuatorAircraftControlRotateYawParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorAircraftControlRotateYawParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_relative = 1;
  void clear_is_relative();
  static const int kIsRelativeFieldNumber = 1;
  bool is_relative() const;
  void set_is_relative(bool value);

  // bool is_clockwise = 2;
  void clear_is_clockwise();
  static const int kIsClockwiseFieldNumber = 2;
  bool is_clockwise() const;
  void set_is_clockwise(bool value);

  // float yaw_angle = 3;
  void clear_yaw_angle();
  static const int kYawAngleFieldNumber = 3;
  float yaw_angle() const;
  void set_yaw_angle(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorAircraftControlRotateYawParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_relative_;
  bool is_clockwise_;
  float yaw_angle_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorAircraftControlRotateYawParamImpl();
};
// -------------------------------------------------------------------

class ActuatorAircraftControlStartStopFlyParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorAircraftControlStartStopFlyParam) */ {
 public:
  ActuatorAircraftControlStartStopFlyParam();
  virtual ~ActuatorAircraftControlStartStopFlyParam();

  ActuatorAircraftControlStartStopFlyParam(const ActuatorAircraftControlStartStopFlyParam& from);

  inline ActuatorAircraftControlStartStopFlyParam& operator=(const ActuatorAircraftControlStartStopFlyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorAircraftControlStartStopFlyParam(ActuatorAircraftControlStartStopFlyParam&& from) noexcept
    : ActuatorAircraftControlStartStopFlyParam() {
    *this = ::std::move(from);
  }

  inline ActuatorAircraftControlStartStopFlyParam& operator=(ActuatorAircraftControlStartStopFlyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorAircraftControlStartStopFlyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorAircraftControlStartStopFlyParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorAircraftControlStartStopFlyParam*>(
               &_ActuatorAircraftControlStartStopFlyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ActuatorAircraftControlStartStopFlyParam* other);
  friend void swap(ActuatorAircraftControlStartStopFlyParam& a, ActuatorAircraftControlStartStopFlyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorAircraftControlStartStopFlyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorAircraftControlStartStopFlyParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorAircraftControlStartStopFlyParam& from);
  void MergeFrom(const ActuatorAircraftControlStartStopFlyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorAircraftControlStartStopFlyParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_start = 1;
  void clear_is_start();
  static const int kIsStartFieldNumber = 1;
  bool is_start() const;
  void set_is_start(bool value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorAircraftControlStartStopFlyParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_start_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorAircraftControlStartStopFlyParamImpl();
};
// -------------------------------------------------------------------

class ActuatorPayloadControlOperatingParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorPayloadControlOperatingParam) */ {
 public:
  ActuatorPayloadControlOperatingParam();
  virtual ~ActuatorPayloadControlOperatingParam();

  ActuatorPayloadControlOperatingParam(const ActuatorPayloadControlOperatingParam& from);

  inline ActuatorPayloadControlOperatingParam& operator=(const ActuatorPayloadControlOperatingParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorPayloadControlOperatingParam(ActuatorPayloadControlOperatingParam&& from) noexcept
    : ActuatorPayloadControlOperatingParam() {
    *this = ::std::move(from);
  }

  inline ActuatorPayloadControlOperatingParam& operator=(ActuatorPayloadControlOperatingParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorPayloadControlOperatingParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorPayloadControlOperatingParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorPayloadControlOperatingParam*>(
               &_ActuatorPayloadControlOperatingParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ActuatorPayloadControlOperatingParam* other);
  friend void swap(ActuatorPayloadControlOperatingParam& a, ActuatorPayloadControlOperatingParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorPayloadControlOperatingParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorPayloadControlOperatingParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorPayloadControlOperatingParam& from);
  void MergeFrom(const ActuatorPayloadControlOperatingParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorPayloadControlOperatingParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_type = 1;
  void clear_controller_type();
  static const int kControllerTypeFieldNumber = 1;
  ::dji::protobuf::uint32 controller_type() const;
  void set_controller_type(::dji::protobuf::uint32 value);

  // uint32 controller_index = 2;
  void clear_controller_index();
  static const int kControllerIndexFieldNumber = 2;
  ::dji::protobuf::uint32 controller_index() const;
  void set_controller_index(::dji::protobuf::uint32 value);

  // uint32 controller_value = 3;
  void clear_controller_value();
  static const int kControllerValueFieldNumber = 3;
  ::dji::protobuf::uint32 controller_value() const;
  void set_controller_value(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorPayloadControlOperatingParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 controller_type_;
  ::dji::protobuf::uint32 controller_index_;
  ::dji::protobuf::uint32 controller_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorPayloadControlOperatingParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorSpray : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorSpray) */ {
 public:
  WaypointActionOperatorSpray();
  virtual ~WaypointActionOperatorSpray();

  WaypointActionOperatorSpray(const WaypointActionOperatorSpray& from);

  inline WaypointActionOperatorSpray& operator=(const WaypointActionOperatorSpray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorSpray(WaypointActionOperatorSpray&& from) noexcept
    : WaypointActionOperatorSpray() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorSpray& operator=(WaypointActionOperatorSpray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorSpray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorSpray* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorSpray*>(
               &_WaypointActionOperatorSpray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(WaypointActionOperatorSpray* other);
  friend void swap(WaypointActionOperatorSpray& a, WaypointActionOperatorSpray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorSpray* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorSpray* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorSpray& from);
  void MergeFrom(const WaypointActionOperatorSpray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorSpray* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.SprayActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::SprayActionType action_type() const;
  void set_action_type(::dji::waypointv2::SprayActionType value);

  // uint32 spray_mode = 2;
  void clear_spray_mode();
  static const int kSprayModeFieldNumber = 2;
  ::dji::protobuf::uint32 spray_mode() const;
  void set_spray_mode(::dji::protobuf::uint32 value);

  // uint32 flow_speed_valid_float = 3;
  void clear_flow_speed_valid_float();
  static const int kFlowSpeedValidFloatFieldNumber = 3;
  ::dji::protobuf::uint32 flow_speed_valid_float() const;
  void set_flow_speed_valid_float(::dji::protobuf::uint32 value);

  // float flow_speed = 4;
  void clear_flow_speed();
  static const int kFlowSpeedFieldNumber = 4;
  float flow_speed() const;
  void set_flow_speed(float value);

  // float flow_speed_per_mu = 5;
  void clear_flow_speed_per_mu();
  static const int kFlowSpeedPerMuFieldNumber = 5;
  float flow_speed_per_mu() const;
  void set_flow_speed_per_mu(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorSpray)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int action_type_;
  ::dji::protobuf::uint32 spray_mode_;
  ::dji::protobuf::uint32 flow_speed_valid_float_;
  float flow_speed_;
  float flow_speed_per_mu_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorSprayImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorCamera : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorCamera) */ {
 public:
  WaypointActionOperatorCamera();
  virtual ~WaypointActionOperatorCamera();

  WaypointActionOperatorCamera(const WaypointActionOperatorCamera& from);

  inline WaypointActionOperatorCamera& operator=(const WaypointActionOperatorCamera& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorCamera(WaypointActionOperatorCamera&& from) noexcept
    : WaypointActionOperatorCamera() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorCamera& operator=(WaypointActionOperatorCamera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorCamera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorCamera* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorCamera*>(
               &_WaypointActionOperatorCamera_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(WaypointActionOperatorCamera* other);
  friend void swap(WaypointActionOperatorCamera& a, WaypointActionOperatorCamera& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorCamera* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorCamera* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorCamera& from);
  void MergeFrom(const WaypointActionOperatorCamera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorCamera* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.ActuatorCameraShootPhotoParam shootphoto_param = 2;
  bool has_shootphoto_param() const;
  void clear_shootphoto_param();
  static const int kShootphotoParamFieldNumber = 2;
  const ::dji::waypointv2::ActuatorCameraShootPhotoParam& shootphoto_param() const;
  ::dji::waypointv2::ActuatorCameraShootPhotoParam* release_shootphoto_param();
  ::dji::waypointv2::ActuatorCameraShootPhotoParam* mutable_shootphoto_param();
  void set_allocated_shootphoto_param(::dji::waypointv2::ActuatorCameraShootPhotoParam* shootphoto_param);

  // .dji.waypointv2.ActuatorCameraStartRecordVideoParam start_record_video_param = 3;
  bool has_start_record_video_param() const;
  void clear_start_record_video_param();
  static const int kStartRecordVideoParamFieldNumber = 3;
  const ::dji::waypointv2::ActuatorCameraStartRecordVideoParam& start_record_video_param() const;
  ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* release_start_record_video_param();
  ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* mutable_start_record_video_param();
  void set_allocated_start_record_video_param(::dji::waypointv2::ActuatorCameraStartRecordVideoParam* start_record_video_param);

  // .dji.waypointv2.ActuatorCameraStopRecordVideoParam stop_record_video_param = 4;
  bool has_stop_record_video_param() const;
  void clear_stop_record_video_param();
  static const int kStopRecordVideoParamFieldNumber = 4;
  const ::dji::waypointv2::ActuatorCameraStopRecordVideoParam& stop_record_video_param() const;
  ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* release_stop_record_video_param();
  ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* mutable_stop_record_video_param();
  void set_allocated_stop_record_video_param(::dji::waypointv2::ActuatorCameraStopRecordVideoParam* stop_record_video_param);

  // .dji.waypointv2.ActuatorCameraFocusParam focus_param = 5;
  bool has_focus_param() const;
  void clear_focus_param();
  static const int kFocusParamFieldNumber = 5;
  const ::dji::waypointv2::ActuatorCameraFocusParam& focus_param() const;
  ::dji::waypointv2::ActuatorCameraFocusParam* release_focus_param();
  ::dji::waypointv2::ActuatorCameraFocusParam* mutable_focus_param();
  void set_allocated_focus_param(::dji::waypointv2::ActuatorCameraFocusParam* focus_param);

  // .dji.waypointv2.ActuatorCameraZoomLengthParam zoom_length_param = 6;
  bool has_zoom_length_param() const;
  void clear_zoom_length_param();
  static const int kZoomLengthParamFieldNumber = 6;
  const ::dji::waypointv2::ActuatorCameraZoomLengthParam& zoom_length_param() const;
  ::dji::waypointv2::ActuatorCameraZoomLengthParam* release_zoom_length_param();
  ::dji::waypointv2::ActuatorCameraZoomLengthParam* mutable_zoom_length_param();
  void set_allocated_zoom_length_param(::dji::waypointv2::ActuatorCameraZoomLengthParam* zoom_length_param);

  // .dji.waypointv2.CameraActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::CameraActionType action_type() const;
  void set_action_type(::dji::waypointv2::CameraActionType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorCamera)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::ActuatorCameraShootPhotoParam* shootphoto_param_;
  ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* start_record_video_param_;
  ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* stop_record_video_param_;
  ::dji::waypointv2::ActuatorCameraFocusParam* focus_param_;
  ::dji::waypointv2::ActuatorCameraZoomLengthParam* zoom_length_param_;
  int action_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorCameraImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorGimbal : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorGimbal) */ {
 public:
  WaypointActionOperatorGimbal();
  virtual ~WaypointActionOperatorGimbal();

  WaypointActionOperatorGimbal(const WaypointActionOperatorGimbal& from);

  inline WaypointActionOperatorGimbal& operator=(const WaypointActionOperatorGimbal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorGimbal(WaypointActionOperatorGimbal&& from) noexcept
    : WaypointActionOperatorGimbal() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorGimbal& operator=(WaypointActionOperatorGimbal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorGimbal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorGimbal* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorGimbal*>(
               &_WaypointActionOperatorGimbal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(WaypointActionOperatorGimbal* other);
  friend void swap(WaypointActionOperatorGimbal& a, WaypointActionOperatorGimbal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorGimbal* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorGimbal* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorGimbal& from);
  void MergeFrom(const WaypointActionOperatorGimbal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorGimbal* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.ActuatorGimbalRotateParam rotate_param = 2;
  bool has_rotate_param() const;
  void clear_rotate_param();
  static const int kRotateParamFieldNumber = 2;
  const ::dji::waypointv2::ActuatorGimbalRotateParam& rotate_param() const;
  ::dji::waypointv2::ActuatorGimbalRotateParam* release_rotate_param();
  ::dji::waypointv2::ActuatorGimbalRotateParam* mutable_rotate_param();
  void set_allocated_rotate_param(::dji::waypointv2::ActuatorGimbalRotateParam* rotate_param);

  // .dji.waypointv2.ActuatorAircraftControlGimbalParam aircraft_control_gimbal_param = 3;
  bool has_aircraft_control_gimbal_param() const;
  void clear_aircraft_control_gimbal_param();
  static const int kAircraftControlGimbalParamFieldNumber = 3;
  const ::dji::waypointv2::ActuatorAircraftControlGimbalParam& aircraft_control_gimbal_param() const;
  ::dji::waypointv2::ActuatorAircraftControlGimbalParam* release_aircraft_control_gimbal_param();
  ::dji::waypointv2::ActuatorAircraftControlGimbalParam* mutable_aircraft_control_gimbal_param();
  void set_allocated_aircraft_control_gimbal_param(::dji::waypointv2::ActuatorAircraftControlGimbalParam* aircraft_control_gimbal_param);

  // .dji.waypointv2.GimbalActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::GimbalActionType action_type() const;
  void set_action_type(::dji::waypointv2::GimbalActionType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorGimbal)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::ActuatorGimbalRotateParam* rotate_param_;
  ::dji::waypointv2::ActuatorAircraftControlGimbalParam* aircraft_control_gimbal_param_;
  int action_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorGimbalImpl();
};
// -------------------------------------------------------------------

class WaypointActionTrigger : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionTrigger) */ {
 public:
  WaypointActionTrigger();
  virtual ~WaypointActionTrigger();

  WaypointActionTrigger(const WaypointActionTrigger& from);

  inline WaypointActionTrigger& operator=(const WaypointActionTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionTrigger(WaypointActionTrigger&& from) noexcept
    : WaypointActionTrigger() {
    *this = ::std::move(from);
  }

  inline WaypointActionTrigger& operator=(WaypointActionTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionTrigger* internal_default_instance() {
    return reinterpret_cast<const WaypointActionTrigger*>(
               &_WaypointActionTrigger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(WaypointActionTrigger* other);
  friend void swap(WaypointActionTrigger& a, WaypointActionTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionTrigger* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionTrigger* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionTrigger& from);
  void MergeFrom(const WaypointActionTrigger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionTrigger* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.WaypointActionReachPointsTriggerParam reach_point_param = 2;
  bool has_reach_point_param() const;
  void clear_reach_point_param();
  static const int kReachPointParamFieldNumber = 2;
  const ::dji::waypointv2::WaypointActionReachPointsTriggerParam& reach_point_param() const;
  ::dji::waypointv2::WaypointActionReachPointsTriggerParam* release_reach_point_param();
  ::dji::waypointv2::WaypointActionReachPointsTriggerParam* mutable_reach_point_param();
  void set_allocated_reach_point_param(::dji::waypointv2::WaypointActionReachPointsTriggerParam* reach_point_param);

  // .dji.waypointv2.WaypointActionAssociateTriggerParam associate_param = 3;
  bool has_associate_param() const;
  void clear_associate_param();
  static const int kAssociateParamFieldNumber = 3;
  const ::dji::waypointv2::WaypointActionAssociateTriggerParam& associate_param() const;
  ::dji::waypointv2::WaypointActionAssociateTriggerParam* release_associate_param();
  ::dji::waypointv2::WaypointActionAssociateTriggerParam* mutable_associate_param();
  void set_allocated_associate_param(::dji::waypointv2::WaypointActionAssociateTriggerParam* associate_param);

  // .dji.waypointv2.WaypointActionTrajectoryTriggerParam trajectory_param = 4;
  bool has_trajectory_param() const;
  void clear_trajectory_param();
  static const int kTrajectoryParamFieldNumber = 4;
  const ::dji::waypointv2::WaypointActionTrajectoryTriggerParam& trajectory_param() const;
  ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* release_trajectory_param();
  ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* mutable_trajectory_param();
  void set_allocated_trajectory_param(::dji::waypointv2::WaypointActionTrajectoryTriggerParam* trajectory_param);

  // .dji.waypointv2.WaypointActionSimpleIntervalParam simple_interval_param = 5;
  bool has_simple_interval_param() const;
  void clear_simple_interval_param();
  static const int kSimpleIntervalParamFieldNumber = 5;
  const ::dji::waypointv2::WaypointActionSimpleIntervalParam& simple_interval_param() const;
  ::dji::waypointv2::WaypointActionSimpleIntervalParam* release_simple_interval_param();
  ::dji::waypointv2::WaypointActionSimpleIntervalParam* mutable_simple_interval_param();
  void set_allocated_simple_interval_param(::dji::waypointv2::WaypointActionSimpleIntervalParam* simple_interval_param);

  // .dji.waypointv2.WaypointActionSimpleReachPointParam simple_reach_point_param = 6;
  bool has_simple_reach_point_param() const;
  void clear_simple_reach_point_param();
  static const int kSimpleReachPointParamFieldNumber = 6;
  const ::dji::waypointv2::WaypointActionSimpleReachPointParam& simple_reach_point_param() const;
  ::dji::waypointv2::WaypointActionSimpleReachPointParam* release_simple_reach_point_param();
  ::dji::waypointv2::WaypointActionSimpleReachPointParam* mutable_simple_reach_point_param();
  void set_allocated_simple_reach_point_param(::dji::waypointv2::WaypointActionSimpleReachPointParam* simple_reach_point_param);

  // .dji.waypointv2.WaypointActionTriggerType trigger_type = 1;
  void clear_trigger_type();
  static const int kTriggerTypeFieldNumber = 1;
  ::dji::waypointv2::WaypointActionTriggerType trigger_type() const;
  void set_trigger_type(::dji::waypointv2::WaypointActionTriggerType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionTrigger)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::WaypointActionReachPointsTriggerParam* reach_point_param_;
  ::dji::waypointv2::WaypointActionAssociateTriggerParam* associate_param_;
  ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* trajectory_param_;
  ::dji::waypointv2::WaypointActionSimpleIntervalParam* simple_interval_param_;
  ::dji::waypointv2::WaypointActionSimpleReachPointParam* simple_reach_point_param_;
  int trigger_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionTriggerImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorAircraftControl : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorAircraftControl) */ {
 public:
  WaypointActionOperatorAircraftControl();
  virtual ~WaypointActionOperatorAircraftControl();

  WaypointActionOperatorAircraftControl(const WaypointActionOperatorAircraftControl& from);

  inline WaypointActionOperatorAircraftControl& operator=(const WaypointActionOperatorAircraftControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorAircraftControl(WaypointActionOperatorAircraftControl&& from) noexcept
    : WaypointActionOperatorAircraftControl() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorAircraftControl& operator=(WaypointActionOperatorAircraftControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorAircraftControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorAircraftControl* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorAircraftControl*>(
               &_WaypointActionOperatorAircraftControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(WaypointActionOperatorAircraftControl* other);
  friend void swap(WaypointActionOperatorAircraftControl& a, WaypointActionOperatorAircraftControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorAircraftControl* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorAircraftControl* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorAircraftControl& from);
  void MergeFrom(const WaypointActionOperatorAircraftControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorAircraftControl* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.ActuatorAircraftControlRotateYawParam rotate_yaw_param = 2;
  bool has_rotate_yaw_param() const;
  void clear_rotate_yaw_param();
  static const int kRotateYawParamFieldNumber = 2;
  const ::dji::waypointv2::ActuatorAircraftControlRotateYawParam& rotate_yaw_param() const;
  ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* release_rotate_yaw_param();
  ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* mutable_rotate_yaw_param();
  void set_allocated_rotate_yaw_param(::dji::waypointv2::ActuatorAircraftControlRotateYawParam* rotate_yaw_param);

  // .dji.waypointv2.ActuatorAircraftControlStartStopFlyParam start_stop_fly_param = 3;
  bool has_start_stop_fly_param() const;
  void clear_start_stop_fly_param();
  static const int kStartStopFlyParamFieldNumber = 3;
  const ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam& start_stop_fly_param() const;
  ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* release_start_stop_fly_param();
  ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* mutable_start_stop_fly_param();
  void set_allocated_start_stop_fly_param(::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* start_stop_fly_param);

  // .dji.waypointv2.AircraftControlActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::AircraftControlActionType action_type() const;
  void set_action_type(::dji::waypointv2::AircraftControlActionType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorAircraftControl)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* rotate_yaw_param_;
  ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* start_stop_fly_param_;
  int action_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorAircraftControlImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorPayload : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorPayload) */ {
 public:
  WaypointActionOperatorPayload();
  virtual ~WaypointActionOperatorPayload();

  WaypointActionOperatorPayload(const WaypointActionOperatorPayload& from);

  inline WaypointActionOperatorPayload& operator=(const WaypointActionOperatorPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorPayload(WaypointActionOperatorPayload&& from) noexcept
    : WaypointActionOperatorPayload() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorPayload& operator=(WaypointActionOperatorPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorPayload* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorPayload*>(
               &_WaypointActionOperatorPayload_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(WaypointActionOperatorPayload* other);
  friend void swap(WaypointActionOperatorPayload& a, WaypointActionOperatorPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorPayload* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorPayload* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorPayload& from);
  void MergeFrom(const WaypointActionOperatorPayload& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorPayload* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.ActuatorPayloadControlOperatingParam operating_param = 2;
  bool has_operating_param() const;
  void clear_operating_param();
  static const int kOperatingParamFieldNumber = 2;
  const ::dji::waypointv2::ActuatorPayloadControlOperatingParam& operating_param() const;
  ::dji::waypointv2::ActuatorPayloadControlOperatingParam* release_operating_param();
  ::dji::waypointv2::ActuatorPayloadControlOperatingParam* mutable_operating_param();
  void set_allocated_operating_param(::dji::waypointv2::ActuatorPayloadControlOperatingParam* operating_param);

  // .dji.waypointv2.PayloadControlActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::PayloadControlActionType action_type() const;
  void set_action_type(::dji::waypointv2::PayloadControlActionType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorPayload)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::ActuatorPayloadControlOperatingParam* operating_param_;
  int action_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorPayloadImpl();
};
// -------------------------------------------------------------------

class WaypointActionActuator : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionActuator) */ {
 public:
  WaypointActionActuator();
  virtual ~WaypointActionActuator();

  WaypointActionActuator(const WaypointActionActuator& from);

  inline WaypointActionActuator& operator=(const WaypointActionActuator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionActuator(WaypointActionActuator&& from) noexcept
    : WaypointActionActuator() {
    *this = ::std::move(from);
  }

  inline WaypointActionActuator& operator=(WaypointActionActuator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionActuator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionActuator* internal_default_instance() {
    return reinterpret_cast<const WaypointActionActuator*>(
               &_WaypointActionActuator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(WaypointActionActuator* other);
  friend void swap(WaypointActionActuator& a, WaypointActionActuator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionActuator* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionActuator* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionActuator& from);
  void MergeFrom(const WaypointActionActuator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionActuator* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.WaypointActionOperatorSpray spray_operator = 4;
  bool has_spray_operator() const;
  void clear_spray_operator();
  static const int kSprayOperatorFieldNumber = 4;
  const ::dji::waypointv2::WaypointActionOperatorSpray& spray_operator() const;
  ::dji::waypointv2::WaypointActionOperatorSpray* release_spray_operator();
  ::dji::waypointv2::WaypointActionOperatorSpray* mutable_spray_operator();
  void set_allocated_spray_operator(::dji::waypointv2::WaypointActionOperatorSpray* spray_operator);

  // .dji.waypointv2.WaypointActionOperatorCamera camera_operator = 5;
  bool has_camera_operator() const;
  void clear_camera_operator();
  static const int kCameraOperatorFieldNumber = 5;
  const ::dji::waypointv2::WaypointActionOperatorCamera& camera_operator() const;
  ::dji::waypointv2::WaypointActionOperatorCamera* release_camera_operator();
  ::dji::waypointv2::WaypointActionOperatorCamera* mutable_camera_operator();
  void set_allocated_camera_operator(::dji::waypointv2::WaypointActionOperatorCamera* camera_operator);

  // .dji.waypointv2.WaypointActionOperatorGimbal gimbal_operator = 6;
  bool has_gimbal_operator() const;
  void clear_gimbal_operator();
  static const int kGimbalOperatorFieldNumber = 6;
  const ::dji::waypointv2::WaypointActionOperatorGimbal& gimbal_operator() const;
  ::dji::waypointv2::WaypointActionOperatorGimbal* release_gimbal_operator();
  ::dji::waypointv2::WaypointActionOperatorGimbal* mutable_gimbal_operator();
  void set_allocated_gimbal_operator(::dji::waypointv2::WaypointActionOperatorGimbal* gimbal_operator);

  // .dji.waypointv2.WaypointActionOperatorAircraftControl aircraft_control_operator = 7;
  bool has_aircraft_control_operator() const;
  void clear_aircraft_control_operator();
  static const int kAircraftControlOperatorFieldNumber = 7;
  const ::dji::waypointv2::WaypointActionOperatorAircraftControl& aircraft_control_operator() const;
  ::dji::waypointv2::WaypointActionOperatorAircraftControl* release_aircraft_control_operator();
  ::dji::waypointv2::WaypointActionOperatorAircraftControl* mutable_aircraft_control_operator();
  void set_allocated_aircraft_control_operator(::dji::waypointv2::WaypointActionOperatorAircraftControl* aircraft_control_operator);

  // .dji.waypointv2.WaypointActionOperatorPayload payload_control_operator = 8;
  bool has_payload_control_operator() const;
  void clear_payload_control_operator();
  static const int kPayloadControlOperatorFieldNumber = 8;
  const ::dji::waypointv2::WaypointActionOperatorPayload& payload_control_operator() const;
  ::dji::waypointv2::WaypointActionOperatorPayload* release_payload_control_operator();
  ::dji::waypointv2::WaypointActionOperatorPayload* mutable_payload_control_operator();
  void set_allocated_payload_control_operator(::dji::waypointv2::WaypointActionOperatorPayload* payload_control_operator);

  // .dji.waypointv2.WaypointActionOperatorNavigation navigation_operator = 9;
  bool has_navigation_operator() const;
  void clear_navigation_operator();
  static const int kNavigationOperatorFieldNumber = 9;
  const ::dji::waypointv2::WaypointActionOperatorNavigation& navigation_operator() const;
  ::dji::waypointv2::WaypointActionOperatorNavigation* release_navigation_operator();
  ::dji::waypointv2::WaypointActionOperatorNavigation* mutable_navigation_operator();
  void set_allocated_navigation_operator(::dji::waypointv2::WaypointActionOperatorNavigation* navigation_operator);

  // .dji.waypointv2.WaypointActionActuatorType actuator_type = 1;
  void clear_actuator_type();
  static const int kActuatorTypeFieldNumber = 1;
  ::dji::waypointv2::WaypointActionActuatorType actuator_type() const;
  void set_actuator_type(::dji::waypointv2::WaypointActionActuatorType value);

  // uint32 actuator_index = 2;
  void clear_actuator_index();
  static const int kActuatorIndexFieldNumber = 2;
  ::dji::protobuf::uint32 actuator_index() const;
  void set_actuator_index(::dji::protobuf::uint32 value);

  // uint32 sub_actuator_index = 3;
  void clear_sub_actuator_index();
  static const int kSubActuatorIndexFieldNumber = 3;
  ::dji::protobuf::uint32 sub_actuator_index() const;
  void set_sub_actuator_index(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionActuator)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::WaypointActionOperatorSpray* spray_operator_;
  ::dji::waypointv2::WaypointActionOperatorCamera* camera_operator_;
  ::dji::waypointv2::WaypointActionOperatorGimbal* gimbal_operator_;
  ::dji::waypointv2::WaypointActionOperatorAircraftControl* aircraft_control_operator_;
  ::dji::waypointv2::WaypointActionOperatorPayload* payload_control_operator_;
  ::dji::waypointv2::WaypointActionOperatorNavigation* navigation_operator_;
  int actuator_type_;
  ::dji::protobuf::uint32 actuator_index_;
  ::dji::protobuf::uint32 sub_actuator_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionActuatorImpl();
};
// -------------------------------------------------------------------

class WaypointActionConfig : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionConfig) */ {
 public:
  WaypointActionConfig();
  virtual ~WaypointActionConfig();

  WaypointActionConfig(const WaypointActionConfig& from);

  inline WaypointActionConfig& operator=(const WaypointActionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionConfig(WaypointActionConfig&& from) noexcept
    : WaypointActionConfig() {
    *this = ::std::move(from);
  }

  inline WaypointActionConfig& operator=(WaypointActionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionConfig* internal_default_instance() {
    return reinterpret_cast<const WaypointActionConfig*>(
               &_WaypointActionConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(WaypointActionConfig* other);
  friend void swap(WaypointActionConfig& a, WaypointActionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionConfig* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionConfig& from);
  void MergeFrom(const WaypointActionConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionConfig* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.WaypointActionTrigger trigger = 2;
  bool has_trigger() const;
  void clear_trigger();
  static const int kTriggerFieldNumber = 2;
  const ::dji::waypointv2::WaypointActionTrigger& trigger() const;
  ::dji::waypointv2::WaypointActionTrigger* release_trigger();
  ::dji::waypointv2::WaypointActionTrigger* mutable_trigger();
  void set_allocated_trigger(::dji::waypointv2::WaypointActionTrigger* trigger);

  // .dji.waypointv2.WaypointActionActuator actuator = 3;
  bool has_actuator() const;
  void clear_actuator();
  static const int kActuatorFieldNumber = 3;
  const ::dji::waypointv2::WaypointActionActuator& actuator() const;
  ::dji::waypointv2::WaypointActionActuator* release_actuator();
  ::dji::waypointv2::WaypointActionActuator* mutable_actuator();
  void set_allocated_actuator(::dji::waypointv2::WaypointActionActuator* actuator);

  // uint32 action_id = 1;
  void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  ::dji::protobuf::uint32 action_id() const;
  void set_action_id(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionConfig)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::WaypointActionTrigger* trigger_;
  ::dji::waypointv2::WaypointActionActuator* actuator_;
  ::dji::protobuf::uint32 action_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionConfigImpl();
};
// -------------------------------------------------------------------

class TrajectoryReplayOperationData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.TrajectoryReplayOperationData) */ {
 public:
  TrajectoryReplayOperationData();
  virtual ~TrajectoryReplayOperationData();

  TrajectoryReplayOperationData(const TrajectoryReplayOperationData& from);

  inline TrajectoryReplayOperationData& operator=(const TrajectoryReplayOperationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryReplayOperationData(TrajectoryReplayOperationData&& from) noexcept
    : TrajectoryReplayOperationData() {
    *this = ::std::move(from);
  }

  inline TrajectoryReplayOperationData& operator=(TrajectoryReplayOperationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const TrajectoryReplayOperationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryReplayOperationData* internal_default_instance() {
    return reinterpret_cast<const TrajectoryReplayOperationData*>(
               &_TrajectoryReplayOperationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(TrajectoryReplayOperationData* other);
  friend void swap(TrajectoryReplayOperationData& a, TrajectoryReplayOperationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryReplayOperationData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrajectoryReplayOperationData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrajectoryReplayOperationData& from);
  void MergeFrom(const TrajectoryReplayOperationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrajectoryReplayOperationData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dji.waypointv2.WaypointActionConfig waypoint_list = 5;
  int waypoint_list_size() const;
  void clear_waypoint_list();
  static const int kWaypointListFieldNumber = 5;
  const ::dji::waypointv2::WaypointActionConfig& waypoint_list(int index) const;
  ::dji::waypointv2::WaypointActionConfig* mutable_waypoint_list(int index);
  ::dji::waypointv2::WaypointActionConfig* add_waypoint_list();
  ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointActionConfig >*
      mutable_waypoint_list();
  const ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointActionConfig >&
      waypoint_list() const;

  // .dji.waypointv2.WaypointItem new_waypoint = 4;
  bool has_new_waypoint() const;
  void clear_new_waypoint();
  static const int kNewWaypointFieldNumber = 4;
  const ::dji::waypointv2::WaypointItem& new_waypoint() const;
  ::dji::waypointv2::WaypointItem* release_new_waypoint();
  ::dji::waypointv2::WaypointItem* mutable_new_waypoint();
  void set_allocated_new_waypoint(::dji::waypointv2::WaypointItem* new_waypoint);

  // uint32 newest_waypoint_count = 1;
  void clear_newest_waypoint_count();
  static const int kNewestWaypointCountFieldNumber = 1;
  ::dji::protobuf::uint32 newest_waypoint_count() const;
  void set_newest_waypoint_count(::dji::protobuf::uint32 value);

  // uint32 newest_action_count = 2;
  void clear_newest_action_count();
  static const int kNewestActionCountFieldNumber = 2;
  ::dji::protobuf::uint32 newest_action_count() const;
  void set_newest_action_count(::dji::protobuf::uint32 value);

  // int32 error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.TrajectoryReplayOperationData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointActionConfig > waypoint_list_;
  ::dji::waypointv2::WaypointItem* new_waypoint_;
  ::dji::protobuf::uint32 newest_waypoint_count_;
  ::dji::protobuf::uint32 newest_action_count_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsTrajectoryReplayOperationDataImpl();
};
// -------------------------------------------------------------------

class ErrorData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ErrorData) */ {
 public:
  ErrorData();
  virtual ~ErrorData();

  ErrorData(const ErrorData& from);

  inline ErrorData& operator=(const ErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorData(ErrorData&& from) noexcept
    : ErrorData() {
    *this = ::std::move(from);
  }

  inline ErrorData& operator=(ErrorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ErrorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorData* internal_default_instance() {
    return reinterpret_cast<const ErrorData*>(
               &_ErrorData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ErrorData* other);
  friend void swap(ErrorData& a, ErrorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorData* New() const PROTOBUF_FINAL { return New(NULL); }

  ErrorData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ErrorData& from);
  void MergeFrom(const ErrorData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ErrorData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ErrorData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsErrorDataImpl();
};
// -------------------------------------------------------------------

class WaypointUploadData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointUploadData) */ {
 public:
  WaypointUploadData();
  virtual ~WaypointUploadData();

  WaypointUploadData(const WaypointUploadData& from);

  inline WaypointUploadData& operator=(const WaypointUploadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointUploadData(WaypointUploadData&& from) noexcept
    : WaypointUploadData() {
    *this = ::std::move(from);
  }

  inline WaypointUploadData& operator=(WaypointUploadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointUploadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointUploadData* internal_default_instance() {
    return reinterpret_cast<const WaypointUploadData*>(
               &_WaypointUploadData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(WaypointUploadData* other);
  friend void swap(WaypointUploadData& a, WaypointUploadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointUploadData* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointUploadData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointUploadData& from);
  void MergeFrom(const WaypointUploadData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointUploadData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_waypoint_summary_uploaded = 1;
  void clear_is_waypoint_summary_uploaded();
  static const int kIsWaypointSummaryUploadedFieldNumber = 1;
  bool is_waypoint_summary_uploaded() const;
  void set_is_waypoint_summary_uploaded(bool value);

  // int32 uploaded_waypoint_index = 2;
  void clear_uploaded_waypoint_index();
  static const int kUploadedWaypointIndexFieldNumber = 2;
  ::dji::protobuf::int32 uploaded_waypoint_index() const;
  void set_uploaded_waypoint_index(::dji::protobuf::int32 value);

  // uint32 total_waypoint_count = 3;
  void clear_total_waypoint_count();
  static const int kTotalWaypointCountFieldNumber = 3;
  ::dji::protobuf::uint32 total_waypoint_count() const;
  void set_total_waypoint_count(::dji::protobuf::uint32 value);

  // int32 error_code = 4;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointUploadData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_waypoint_summary_uploaded_;
  ::dji::protobuf::int32 uploaded_waypoint_index_;
  ::dji::protobuf::uint32 total_waypoint_count_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointUploadDataImpl();
};
// -------------------------------------------------------------------

class ActionUploadData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActionUploadData) */ {
 public:
  ActionUploadData();
  virtual ~ActionUploadData();

  ActionUploadData(const ActionUploadData& from);

  inline ActionUploadData& operator=(const ActionUploadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionUploadData(ActionUploadData&& from) noexcept
    : ActionUploadData() {
    *this = ::std::move(from);
  }

  inline ActionUploadData& operator=(ActionUploadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActionUploadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionUploadData* internal_default_instance() {
    return reinterpret_cast<const ActionUploadData*>(
               &_ActionUploadData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(ActionUploadData* other);
  friend void swap(ActionUploadData& a, ActionUploadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionUploadData* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionUploadData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionUploadData& from);
  void MergeFrom(const ActionUploadData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionUploadData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uploaded_action_index = 1;
  void clear_uploaded_action_index();
  static const int kUploadedActionIndexFieldNumber = 1;
  ::dji::protobuf::uint32 uploaded_action_index() const;
  void set_uploaded_action_index(::dji::protobuf::uint32 value);

  // int32 total_action_count = 2;
  void clear_total_action_count();
  static const int kTotalActionCountFieldNumber = 2;
  ::dji::protobuf::int32 total_action_count() const;
  void set_total_action_count(::dji::protobuf::int32 value);

  // int32 error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActionUploadData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 uploaded_action_index_;
  ::dji::protobuf::int32 total_action_count_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActionUploadDataImpl();
};
// -------------------------------------------------------------------

class WaypointDownloadData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointDownloadData) */ {
 public:
  WaypointDownloadData();
  virtual ~WaypointDownloadData();

  WaypointDownloadData(const WaypointDownloadData& from);

  inline WaypointDownloadData& operator=(const WaypointDownloadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointDownloadData(WaypointDownloadData&& from) noexcept
    : WaypointDownloadData() {
    *this = ::std::move(from);
  }

  inline WaypointDownloadData& operator=(WaypointDownloadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointDownloadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointDownloadData* internal_default_instance() {
    return reinterpret_cast<const WaypointDownloadData*>(
               &_WaypointDownloadData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(WaypointDownloadData* other);
  friend void swap(WaypointDownloadData& a, WaypointDownloadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointDownloadData* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointDownloadData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointDownloadData& from);
  void MergeFrom(const WaypointDownloadData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointDownloadData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_summary_downloaded = 1;
  void clear_is_summary_downloaded();
  static const int kIsSummaryDownloadedFieldNumber = 1;
  bool is_summary_downloaded() const;
  void set_is_summary_downloaded(bool value);

  // uint32 downloaded_waypoint_index = 2;
  void clear_downloaded_waypoint_index();
  static const int kDownloadedWaypointIndexFieldNumber = 2;
  ::dji::protobuf::uint32 downloaded_waypoint_index() const;
  void set_downloaded_waypoint_index(::dji::protobuf::uint32 value);

  // uint32 total_waypoint_count = 3;
  void clear_total_waypoint_count();
  static const int kTotalWaypointCountFieldNumber = 3;
  ::dji::protobuf::uint32 total_waypoint_count() const;
  void set_total_waypoint_count(::dji::protobuf::uint32 value);

  // int32 error_code = 4;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointDownloadData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_summary_downloaded_;
  ::dji::protobuf::uint32 downloaded_waypoint_index_;
  ::dji::protobuf::uint32 total_waypoint_count_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointDownloadDataImpl();
};
// -------------------------------------------------------------------

class ActionDownloadData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActionDownloadData) */ {
 public:
  ActionDownloadData();
  virtual ~ActionDownloadData();

  ActionDownloadData(const ActionDownloadData& from);

  inline ActionDownloadData& operator=(const ActionDownloadData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionDownloadData(ActionDownloadData&& from) noexcept
    : ActionDownloadData() {
    *this = ::std::move(from);
  }

  inline ActionDownloadData& operator=(ActionDownloadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActionDownloadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionDownloadData* internal_default_instance() {
    return reinterpret_cast<const ActionDownloadData*>(
               &_ActionDownloadData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ActionDownloadData* other);
  friend void swap(ActionDownloadData& a, ActionDownloadData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionDownloadData* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionDownloadData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionDownloadData& from);
  void MergeFrom(const ActionDownloadData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionDownloadData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 downloaded_action_index = 1;
  void clear_downloaded_action_index();
  static const int kDownloadedActionIndexFieldNumber = 1;
  ::dji::protobuf::uint32 downloaded_action_index() const;
  void set_downloaded_action_index(::dji::protobuf::uint32 value);

  // uint32 total_action_count = 2;
  void clear_total_action_count();
  static const int kTotalActionCountFieldNumber = 2;
  ::dji::protobuf::uint32 total_action_count() const;
  void set_total_action_count(::dji::protobuf::uint32 value);

  // int32 error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActionDownloadData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 downloaded_action_index_;
  ::dji::protobuf::uint32 total_action_count_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActionDownloadDataImpl();
};
// -------------------------------------------------------------------

class WaypointExecuteData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointExecuteData) */ {
 public:
  WaypointExecuteData();
  virtual ~WaypointExecuteData();

  WaypointExecuteData(const WaypointExecuteData& from);

  inline WaypointExecuteData& operator=(const WaypointExecuteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointExecuteData(WaypointExecuteData&& from) noexcept
    : WaypointExecuteData() {
    *this = ::std::move(from);
  }

  inline WaypointExecuteData& operator=(WaypointExecuteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointExecuteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointExecuteData* internal_default_instance() {
    return reinterpret_cast<const WaypointExecuteData*>(
               &_WaypointExecuteData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(WaypointExecuteData* other);
  friend void swap(WaypointExecuteData& a, WaypointExecuteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointExecuteData* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointExecuteData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointExecuteData& from);
  void MergeFrom(const WaypointExecuteData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointExecuteData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 target_waypoint_index = 1;
  void clear_target_waypoint_index();
  static const int kTargetWaypointIndexFieldNumber = 1;
  ::dji::protobuf::uint32 target_waypoint_index() const;
  void set_target_waypoint_index(::dji::protobuf::uint32 value);

  // bool is_waypoint_reached = 2;
  void clear_is_waypoint_reached();
  static const int kIsWaypointReachedFieldNumber = 2;
  bool is_waypoint_reached() const;
  void set_is_waypoint_reached(bool value);

  // .dji.waypointv2.ExecuteState exec_state = 3;
  void clear_exec_state();
  static const int kExecStateFieldNumber = 3;
  ::dji::waypointv2::ExecuteState exec_state() const;
  void set_exec_state(::dji::waypointv2::ExecuteState value);

  // int32 error_code = 4;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointExecuteData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 target_waypoint_index_;
  bool is_waypoint_reached_;
  int exec_state_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointExecuteDataImpl();
};
// -------------------------------------------------------------------

class ActionExecuteData : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActionExecuteData) */ {
 public:
  ActionExecuteData();
  virtual ~ActionExecuteData();

  ActionExecuteData(const ActionExecuteData& from);

  inline ActionExecuteData& operator=(const ActionExecuteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionExecuteData(ActionExecuteData&& from) noexcept
    : ActionExecuteData() {
    *this = ::std::move(from);
  }

  inline ActionExecuteData& operator=(ActionExecuteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActionExecuteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionExecuteData* internal_default_instance() {
    return reinterpret_cast<const ActionExecuteData*>(
               &_ActionExecuteData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ActionExecuteData* other);
  friend void swap(ActionExecuteData& a, ActionExecuteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionExecuteData* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionExecuteData* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionExecuteData& from);
  void MergeFrom(const ActionExecuteData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionExecuteData* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 action_id = 1;
  void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  ::dji::protobuf::uint32 action_id() const;
  void set_action_id(::dji::protobuf::uint32 value);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // int32 error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::dji::protobuf::int32 error_code() const;
  void set_error_code(::dji::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActionExecuteData)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 action_id_;
  bool result_;
  ::dji::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActionExecuteDataImpl();
};
// -------------------------------------------------------------------

class WaypointStateChangeInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointStateChangeInformation) */ {
 public:
  WaypointStateChangeInformation();
  virtual ~WaypointStateChangeInformation();

  WaypointStateChangeInformation(const WaypointStateChangeInformation& from);

  inline WaypointStateChangeInformation& operator=(const WaypointStateChangeInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointStateChangeInformation(WaypointStateChangeInformation&& from) noexcept
    : WaypointStateChangeInformation() {
    *this = ::std::move(from);
  }

  inline WaypointStateChangeInformation& operator=(WaypointStateChangeInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointStateChangeInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointStateChangeInformation* internal_default_instance() {
    return reinterpret_cast<const WaypointStateChangeInformation*>(
               &_WaypointStateChangeInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(WaypointStateChangeInformation* other);
  friend void swap(WaypointStateChangeInformation& a, WaypointStateChangeInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointStateChangeInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointStateChangeInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointStateChangeInformation& from);
  void MergeFrom(const WaypointStateChangeInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointStateChangeInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .dji.waypointv2.AbstractionState pre_state = 1;
  void clear_pre_state();
  static const int kPreStateFieldNumber = 1;
  ::dji::waypointv2::AbstractionState pre_state() const;
  void set_pre_state(::dji::waypointv2::AbstractionState value);

  // .dji.waypointv2.AbstractionState cur_state = 2;
  void clear_cur_state();
  static const int kCurStateFieldNumber = 2;
  ::dji::waypointv2::AbstractionState cur_state() const;
  void set_cur_state(::dji::waypointv2::AbstractionState value);

  // .dji.waypointv2.AbstractionEvent event = 3;
  void clear_event();
  static const int kEventFieldNumber = 3;
  ::dji::waypointv2::AbstractionEvent event() const;
  void set_event(::dji::waypointv2::AbstractionEvent value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointStateChangeInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::internal::ArenaStringPtr data_;
  int pre_state_;
  int cur_state_;
  int event_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointStateChangeInformationImpl();
};
// -------------------------------------------------------------------

class ActionStateChangeInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActionStateChangeInformation) */ {
 public:
  ActionStateChangeInformation();
  virtual ~ActionStateChangeInformation();

  ActionStateChangeInformation(const ActionStateChangeInformation& from);

  inline ActionStateChangeInformation& operator=(const ActionStateChangeInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionStateChangeInformation(ActionStateChangeInformation&& from) noexcept
    : ActionStateChangeInformation() {
    *this = ::std::move(from);
  }

  inline ActionStateChangeInformation& operator=(ActionStateChangeInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActionStateChangeInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionStateChangeInformation* internal_default_instance() {
    return reinterpret_cast<const ActionStateChangeInformation*>(
               &_ActionStateChangeInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(ActionStateChangeInformation* other);
  friend void swap(ActionStateChangeInformation& a, ActionStateChangeInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionStateChangeInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionStateChangeInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionStateChangeInformation& from);
  void MergeFrom(const ActionStateChangeInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionStateChangeInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .dji.waypointv2.ActionState pre_state = 1;
  void clear_pre_state();
  static const int kPreStateFieldNumber = 1;
  ::dji::waypointv2::ActionState pre_state() const;
  void set_pre_state(::dji::waypointv2::ActionState value);

  // .dji.waypointv2.ActionState cur_state = 2;
  void clear_cur_state();
  static const int kCurStateFieldNumber = 2;
  ::dji::waypointv2::ActionState cur_state() const;
  void set_cur_state(::dji::waypointv2::ActionState value);

  // .dji.waypointv2.ActionEvent event = 3;
  void clear_event();
  static const int kEventFieldNumber = 3;
  ::dji::waypointv2::ActionEvent event() const;
  void set_event(::dji::waypointv2::ActionEvent value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActionStateChangeInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::internal::ArenaStringPtr data_;
  int pre_state_;
  int cur_state_;
  int event_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActionStateChangeInformationImpl();
};
// -------------------------------------------------------------------

class TrajectoryReplayStateChangeInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.TrajectoryReplayStateChangeInformation) */ {
 public:
  TrajectoryReplayStateChangeInformation();
  virtual ~TrajectoryReplayStateChangeInformation();

  TrajectoryReplayStateChangeInformation(const TrajectoryReplayStateChangeInformation& from);

  inline TrajectoryReplayStateChangeInformation& operator=(const TrajectoryReplayStateChangeInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryReplayStateChangeInformation(TrajectoryReplayStateChangeInformation&& from) noexcept
    : TrajectoryReplayStateChangeInformation() {
    *this = ::std::move(from);
  }

  inline TrajectoryReplayStateChangeInformation& operator=(TrajectoryReplayStateChangeInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const TrajectoryReplayStateChangeInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryReplayStateChangeInformation* internal_default_instance() {
    return reinterpret_cast<const TrajectoryReplayStateChangeInformation*>(
               &_TrajectoryReplayStateChangeInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(TrajectoryReplayStateChangeInformation* other);
  friend void swap(TrajectoryReplayStateChangeInformation& a, TrajectoryReplayStateChangeInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryReplayStateChangeInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  TrajectoryReplayStateChangeInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrajectoryReplayStateChangeInformation& from);
  void MergeFrom(const TrajectoryReplayStateChangeInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrajectoryReplayStateChangeInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .dji.waypointv2.TrajectoryReplayState pre_state = 1;
  void clear_pre_state();
  static const int kPreStateFieldNumber = 1;
  ::dji::waypointv2::TrajectoryReplayState pre_state() const;
  void set_pre_state(::dji::waypointv2::TrajectoryReplayState value);

  // .dji.waypointv2.TrajectoryReplayState cur_state = 2;
  void clear_cur_state();
  static const int kCurStateFieldNumber = 2;
  ::dji::waypointv2::TrajectoryReplayState cur_state() const;
  void set_cur_state(::dji::waypointv2::TrajectoryReplayState value);

  // .dji.waypointv2.TrajectoryReplayEvent event = 3;
  void clear_event();
  static const int kEventFieldNumber = 3;
  ::dji::waypointv2::TrajectoryReplayEvent event() const;
  void set_event(::dji::waypointv2::TrajectoryReplayEvent value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.TrajectoryReplayStateChangeInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::internal::ArenaStringPtr data_;
  int pre_state_;
  int cur_state_;
  int event_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsTrajectoryReplayStateChangeInformationImpl();
};
// -------------------------------------------------------------------

class Size : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.Size) */ {
 public:
  Size();
  virtual ~Size();

  Size(const Size& from);

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(Size&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const Size& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Size* other);
  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Size* New() const PROTOBUF_FINAL { return New(NULL); }

  Size* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Size* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  float width() const;
  void set_width(float value);

  // float height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.Size)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float width_;
  float height_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsSizeImpl();
};
// -------------------------------------------------------------------

class Point : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.Point)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class AccurateShootPhotoTargetRect : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.AccurateShootPhotoTargetRect) */ {
 public:
  AccurateShootPhotoTargetRect();
  virtual ~AccurateShootPhotoTargetRect();

  AccurateShootPhotoTargetRect(const AccurateShootPhotoTargetRect& from);

  inline AccurateShootPhotoTargetRect& operator=(const AccurateShootPhotoTargetRect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccurateShootPhotoTargetRect(AccurateShootPhotoTargetRect&& from) noexcept
    : AccurateShootPhotoTargetRect() {
    *this = ::std::move(from);
  }

  inline AccurateShootPhotoTargetRect& operator=(AccurateShootPhotoTargetRect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const AccurateShootPhotoTargetRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccurateShootPhotoTargetRect* internal_default_instance() {
    return reinterpret_cast<const AccurateShootPhotoTargetRect*>(
               &_AccurateShootPhotoTargetRect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(AccurateShootPhotoTargetRect* other);
  friend void swap(AccurateShootPhotoTargetRect& a, AccurateShootPhotoTargetRect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccurateShootPhotoTargetRect* New() const PROTOBUF_FINAL { return New(NULL); }

  AccurateShootPhotoTargetRect* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccurateShootPhotoTargetRect& from);
  void MergeFrom(const AccurateShootPhotoTargetRect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccurateShootPhotoTargetRect* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.Point position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::dji::waypointv2::Point& position() const;
  ::dji::waypointv2::Point* release_position();
  ::dji::waypointv2::Point* mutable_position();
  void set_allocated_position(::dji::waypointv2::Point* position);

  // .dji.waypointv2.Size size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  const ::dji::waypointv2::Size& size() const;
  ::dji::waypointv2::Size* release_size();
  ::dji::waypointv2::Size* mutable_size();
  void set_allocated_size(::dji::waypointv2::Size* size);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.AccurateShootPhotoTargetRect)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::Point* position_;
  ::dji::waypointv2::Size* size_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsAccurateShootPhotoTargetRectImpl();
};
// -------------------------------------------------------------------

class AccurateShootPhotoCameraStateInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.AccurateShootPhotoCameraStateInformation) */ {
 public:
  AccurateShootPhotoCameraStateInformation();
  virtual ~AccurateShootPhotoCameraStateInformation();

  AccurateShootPhotoCameraStateInformation(const AccurateShootPhotoCameraStateInformation& from);

  inline AccurateShootPhotoCameraStateInformation& operator=(const AccurateShootPhotoCameraStateInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccurateShootPhotoCameraStateInformation(AccurateShootPhotoCameraStateInformation&& from) noexcept
    : AccurateShootPhotoCameraStateInformation() {
    *this = ::std::move(from);
  }

  inline AccurateShootPhotoCameraStateInformation& operator=(AccurateShootPhotoCameraStateInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const AccurateShootPhotoCameraStateInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccurateShootPhotoCameraStateInformation* internal_default_instance() {
    return reinterpret_cast<const AccurateShootPhotoCameraStateInformation*>(
               &_AccurateShootPhotoCameraStateInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(AccurateShootPhotoCameraStateInformation* other);
  friend void swap(AccurateShootPhotoCameraStateInformation& a, AccurateShootPhotoCameraStateInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccurateShootPhotoCameraStateInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  AccurateShootPhotoCameraStateInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccurateShootPhotoCameraStateInformation& from);
  void MergeFrom(const AccurateShootPhotoCameraStateInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccurateShootPhotoCameraStateInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 focal_distance = 1;
  void clear_focal_distance();
  static const int kFocalDistanceFieldNumber = 1;
  ::dji::protobuf::uint32 focal_distance() const;
  void set_focal_distance(::dji::protobuf::uint32 value);

  // uint32 AF_position = 2;
  void clear_af_position();
  static const int kAFPositionFieldNumber = 2;
  ::dji::protobuf::uint32 af_position() const;
  void set_af_position(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.AccurateShootPhotoCameraStateInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 focal_distance_;
  ::dji::protobuf::uint32 af_position_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsAccurateShootPhotoCameraStateInformationImpl();
};
// -------------------------------------------------------------------

class AccurateShootPhotoGimbalStateInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.AccurateShootPhotoGimbalStateInformation) */ {
 public:
  AccurateShootPhotoGimbalStateInformation();
  virtual ~AccurateShootPhotoGimbalStateInformation();

  AccurateShootPhotoGimbalStateInformation(const AccurateShootPhotoGimbalStateInformation& from);

  inline AccurateShootPhotoGimbalStateInformation& operator=(const AccurateShootPhotoGimbalStateInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccurateShootPhotoGimbalStateInformation(AccurateShootPhotoGimbalStateInformation&& from) noexcept
    : AccurateShootPhotoGimbalStateInformation() {
    *this = ::std::move(from);
  }

  inline AccurateShootPhotoGimbalStateInformation& operator=(AccurateShootPhotoGimbalStateInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const AccurateShootPhotoGimbalStateInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccurateShootPhotoGimbalStateInformation* internal_default_instance() {
    return reinterpret_cast<const AccurateShootPhotoGimbalStateInformation*>(
               &_AccurateShootPhotoGimbalStateInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(AccurateShootPhotoGimbalStateInformation* other);
  friend void swap(AccurateShootPhotoGimbalStateInformation& a, AccurateShootPhotoGimbalStateInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccurateShootPhotoGimbalStateInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  AccurateShootPhotoGimbalStateInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccurateShootPhotoGimbalStateInformation& from);
  void MergeFrom(const AccurateShootPhotoGimbalStateInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccurateShootPhotoGimbalStateInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  float pitch() const;
  void set_pitch(float value);

  // float roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  float roll() const;
  void set_roll(float value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.AccurateShootPhotoGimbalStateInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pitch_;
  float roll_;
  float yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsAccurateShootPhotoGimbalStateInformationImpl();
};
// -------------------------------------------------------------------

class AccurateShootPhotoDeviceInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.AccurateShootPhotoDeviceInformation) */ {
 public:
  AccurateShootPhotoDeviceInformation();
  virtual ~AccurateShootPhotoDeviceInformation();

  AccurateShootPhotoDeviceInformation(const AccurateShootPhotoDeviceInformation& from);

  inline AccurateShootPhotoDeviceInformation& operator=(const AccurateShootPhotoDeviceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccurateShootPhotoDeviceInformation(AccurateShootPhotoDeviceInformation&& from) noexcept
    : AccurateShootPhotoDeviceInformation() {
    *this = ::std::move(from);
  }

  inline AccurateShootPhotoDeviceInformation& operator=(AccurateShootPhotoDeviceInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const AccurateShootPhotoDeviceInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccurateShootPhotoDeviceInformation* internal_default_instance() {
    return reinterpret_cast<const AccurateShootPhotoDeviceInformation*>(
               &_AccurateShootPhotoDeviceInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(AccurateShootPhotoDeviceInformation* other);
  friend void swap(AccurateShootPhotoDeviceInformation& a, AccurateShootPhotoDeviceInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccurateShootPhotoDeviceInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  AccurateShootPhotoDeviceInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccurateShootPhotoDeviceInformation& from);
  void MergeFrom(const AccurateShootPhotoDeviceInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccurateShootPhotoDeviceInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 camera_type = 1;
  void clear_camera_type();
  static const int kCameraTypeFieldNumber = 1;
  ::dji::protobuf::uint32 camera_type() const;
  void set_camera_type(::dji::protobuf::uint32 value);

  // uint32 gimbal_port = 2;
  void clear_gimbal_port();
  static const int kGimbalPortFieldNumber = 2;
  ::dji::protobuf::uint32 gimbal_port() const;
  void set_gimbal_port(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.AccurateShootPhotoDeviceInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::uint32 camera_type_;
  ::dji::protobuf::uint32 gimbal_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsAccurateShootPhotoDeviceInformationImpl();
};
// -------------------------------------------------------------------

class AccurateShootPhotoFileInformation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.AccurateShootPhotoFileInformation) */ {
 public:
  AccurateShootPhotoFileInformation();
  virtual ~AccurateShootPhotoFileInformation();

  AccurateShootPhotoFileInformation(const AccurateShootPhotoFileInformation& from);

  inline AccurateShootPhotoFileInformation& operator=(const AccurateShootPhotoFileInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccurateShootPhotoFileInformation(AccurateShootPhotoFileInformation&& from) noexcept
    : AccurateShootPhotoFileInformation() {
    *this = ::std::move(from);
  }

  inline AccurateShootPhotoFileInformation& operator=(AccurateShootPhotoFileInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const AccurateShootPhotoFileInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccurateShootPhotoFileInformation* internal_default_instance() {
    return reinterpret_cast<const AccurateShootPhotoFileInformation*>(
               &_AccurateShootPhotoFileInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(AccurateShootPhotoFileInformation* other);
  friend void swap(AccurateShootPhotoFileInformation& a, AccurateShootPhotoFileInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccurateShootPhotoFileInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  AccurateShootPhotoFileInformation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccurateShootPhotoFileInformation& from);
  void MergeFrom(const AccurateShootPhotoFileInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccurateShootPhotoFileInformation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // uint32 file_name_length = 1;
  void clear_file_name_length();
  static const int kFileNameLengthFieldNumber = 1;
  ::dji::protobuf::uint32 file_name_length() const;
  void set_file_name_length(::dji::protobuf::uint32 value);

  // uint32 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::dji::protobuf::uint32 file_size() const;
  void set_file_size(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.AccurateShootPhotoFileInformation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::protobuf::internal::ArenaStringPtr file_name_;
  ::dji::protobuf::uint32 file_name_length_;
  ::dji::protobuf::uint32 file_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsAccurateShootPhotoFileInformationImpl();
};
// -------------------------------------------------------------------

class ActuatorNavigationAccurateShootPhotoOperatingParam : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam) */ {
 public:
  ActuatorNavigationAccurateShootPhotoOperatingParam();
  virtual ~ActuatorNavigationAccurateShootPhotoOperatingParam();

  ActuatorNavigationAccurateShootPhotoOperatingParam(const ActuatorNavigationAccurateShootPhotoOperatingParam& from);

  inline ActuatorNavigationAccurateShootPhotoOperatingParam& operator=(const ActuatorNavigationAccurateShootPhotoOperatingParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorNavigationAccurateShootPhotoOperatingParam(ActuatorNavigationAccurateShootPhotoOperatingParam&& from) noexcept
    : ActuatorNavigationAccurateShootPhotoOperatingParam() {
    *this = ::std::move(from);
  }

  inline ActuatorNavigationAccurateShootPhotoOperatingParam& operator=(ActuatorNavigationAccurateShootPhotoOperatingParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const ActuatorNavigationAccurateShootPhotoOperatingParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorNavigationAccurateShootPhotoOperatingParam* internal_default_instance() {
    return reinterpret_cast<const ActuatorNavigationAccurateShootPhotoOperatingParam*>(
               &_ActuatorNavigationAccurateShootPhotoOperatingParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(ActuatorNavigationAccurateShootPhotoOperatingParam* other);
  friend void swap(ActuatorNavigationAccurateShootPhotoOperatingParam& a, ActuatorNavigationAccurateShootPhotoOperatingParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorNavigationAccurateShootPhotoOperatingParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorNavigationAccurateShootPhotoOperatingParam* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorNavigationAccurateShootPhotoOperatingParam& from);
  void MergeFrom(const ActuatorNavigationAccurateShootPhotoOperatingParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorNavigationAccurateShootPhotoOperatingParam* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.AccurateShootPhotoTargetRect target_rect = 3;
  bool has_target_rect() const;
  void clear_target_rect();
  static const int kTargetRectFieldNumber = 3;
  const ::dji::waypointv2::AccurateShootPhotoTargetRect& target_rect() const;
  ::dji::waypointv2::AccurateShootPhotoTargetRect* release_target_rect();
  ::dji::waypointv2::AccurateShootPhotoTargetRect* mutable_target_rect();
  void set_allocated_target_rect(::dji::waypointv2::AccurateShootPhotoTargetRect* target_rect);

  // .dji.waypointv2.Size image_size = 4;
  bool has_image_size() const;
  void clear_image_size();
  static const int kImageSizeFieldNumber = 4;
  const ::dji::waypointv2::Size& image_size() const;
  ::dji::waypointv2::Size* release_image_size();
  ::dji::waypointv2::Size* mutable_image_size();
  void set_allocated_image_size(::dji::waypointv2::Size* image_size);

  // .dji.waypointv2.AccurateShootPhotoCameraStateInformation camera_infos = 5;
  bool has_camera_infos() const;
  void clear_camera_infos();
  static const int kCameraInfosFieldNumber = 5;
  const ::dji::waypointv2::AccurateShootPhotoCameraStateInformation& camera_infos() const;
  ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* release_camera_infos();
  ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* mutable_camera_infos();
  void set_allocated_camera_infos(::dji::waypointv2::AccurateShootPhotoCameraStateInformation* camera_infos);

  // .dji.waypointv2.AccurateShootPhotoGimbalStateInformation gimbal_infos = 6;
  bool has_gimbal_infos() const;
  void clear_gimbal_infos();
  static const int kGimbalInfosFieldNumber = 6;
  const ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation& gimbal_infos() const;
  ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* release_gimbal_infos();
  ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* mutable_gimbal_infos();
  void set_allocated_gimbal_infos(::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* gimbal_infos);

  // .dji.waypointv2.AccurateShootPhotoDeviceInformation device_infos = 7;
  bool has_device_infos() const;
  void clear_device_infos();
  static const int kDeviceInfosFieldNumber = 7;
  const ::dji::waypointv2::AccurateShootPhotoDeviceInformation& device_infos() const;
  ::dji::waypointv2::AccurateShootPhotoDeviceInformation* release_device_infos();
  ::dji::waypointv2::AccurateShootPhotoDeviceInformation* mutable_device_infos();
  void set_allocated_device_infos(::dji::waypointv2::AccurateShootPhotoDeviceInformation* device_infos);

  // .dji.waypointv2.AccurateShootPhotoFileInformation file_infos = 8;
  bool has_file_infos() const;
  void clear_file_infos();
  static const int kFileInfosFieldNumber = 8;
  const ::dji::waypointv2::AccurateShootPhotoFileInformation& file_infos() const;
  ::dji::waypointv2::AccurateShootPhotoFileInformation* release_file_infos();
  ::dji::waypointv2::AccurateShootPhotoFileInformation* mutable_file_infos();
  void set_allocated_file_infos(::dji::waypointv2::AccurateShootPhotoFileInformation* file_infos);

  // uint32 action_id = 1;
  void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  ::dji::protobuf::uint32 action_id() const;
  void set_action_id(::dji::protobuf::uint32 value);

  // uint32 retry_times = 2;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 2;
  ::dji::protobuf::uint32 retry_times() const;
  void set_retry_times(::dji::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::AccurateShootPhotoTargetRect* target_rect_;
  ::dji::waypointv2::Size* image_size_;
  ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* camera_infos_;
  ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* gimbal_infos_;
  ::dji::waypointv2::AccurateShootPhotoDeviceInformation* device_infos_;
  ::dji::waypointv2::AccurateShootPhotoFileInformation* file_infos_;
  ::dji::protobuf::uint32 action_id_;
  ::dji::protobuf::uint32 retry_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsActuatorNavigationAccurateShootPhotoOperatingParamImpl();
};
// -------------------------------------------------------------------

class WaypointActionOperatorNavigation : public ::dji::protobuf::Message /* @@protoc_insertion_point(class_definition:dji.waypointv2.WaypointActionOperatorNavigation) */ {
 public:
  WaypointActionOperatorNavigation();
  virtual ~WaypointActionOperatorNavigation();

  WaypointActionOperatorNavigation(const WaypointActionOperatorNavigation& from);

  inline WaypointActionOperatorNavigation& operator=(const WaypointActionOperatorNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaypointActionOperatorNavigation(WaypointActionOperatorNavigation&& from) noexcept
    : WaypointActionOperatorNavigation() {
    *this = ::std::move(from);
  }

  inline WaypointActionOperatorNavigation& operator=(WaypointActionOperatorNavigation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::dji::protobuf::Descriptor* descriptor();
  static const WaypointActionOperatorNavigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointActionOperatorNavigation* internal_default_instance() {
    return reinterpret_cast<const WaypointActionOperatorNavigation*>(
               &_WaypointActionOperatorNavigation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(WaypointActionOperatorNavigation* other);
  friend void swap(WaypointActionOperatorNavigation& a, WaypointActionOperatorNavigation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaypointActionOperatorNavigation* New() const PROTOBUF_FINAL { return New(NULL); }

  WaypointActionOperatorNavigation* New(::dji::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::dji::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WaypointActionOperatorNavigation& from);
  void MergeFrom(const WaypointActionOperatorNavigation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::dji::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::dji::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::dji::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::dji::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WaypointActionOperatorNavigation* other);
  private:
  inline ::dji::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::dji::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam accurate_shootphoto_param = 2;
  bool has_accurate_shootphoto_param() const;
  void clear_accurate_shootphoto_param();
  static const int kAccurateShootphotoParamFieldNumber = 2;
  const ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam& accurate_shootphoto_param() const;
  ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* release_accurate_shootphoto_param();
  ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* mutable_accurate_shootphoto_param();
  void set_allocated_accurate_shootphoto_param(::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* accurate_shootphoto_param);

  // .dji.waypointv2.NavigationActionType action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::dji::waypointv2::NavigationActionType action_type() const;
  void set_action_type(::dji::waypointv2::NavigationActionType value);

  // @@protoc_insertion_point(class_scope:dji.waypointv2.WaypointActionOperatorNavigation)
 private:

  ::dji::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* accurate_shootphoto_param_;
  int action_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_WaypointV2_2eproto::TableStruct;
  friend void ::protobuf_WaypointV2_2eproto::InitDefaultsWaypointActionOperatorNavigationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationCoordinate

// double latitude = 1;
inline void LocationCoordinate::clear_latitude() {
  latitude_ = 0;
}
inline double LocationCoordinate::latitude() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.LocationCoordinate.latitude)
  return latitude_;
}
inline void LocationCoordinate::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.LocationCoordinate.latitude)
}

// double longitude = 2;
inline void LocationCoordinate::clear_longitude() {
  longitude_ = 0;
}
inline double LocationCoordinate::longitude() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.LocationCoordinate.longitude)
  return longitude_;
}
inline void LocationCoordinate::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.LocationCoordinate.longitude)
}

// double altitude = 3;
inline void LocationCoordinate::clear_altitude() {
  altitude_ = 0;
}
inline double LocationCoordinate::altitude() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.LocationCoordinate.altitude)
  return altitude_;
}
inline void LocationCoordinate::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.LocationCoordinate.altitude)
}

// -------------------------------------------------------------------

// WaypointMission

// uint32 version = 1;
inline void WaypointMission::clear_version() {
  version_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::version() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.version)
  return version_;
}
inline void WaypointMission::set_version(::dji::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.version)
}

// uint32 misssion_id = 2;
inline void WaypointMission::clear_misssion_id() {
  misssion_id_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::misssion_id() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.misssion_id)
  return misssion_id_;
}
inline void WaypointMission::set_misssion_id(::dji::protobuf::uint32 value) {
  
  misssion_id_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.misssion_id)
}

// uint32 total_len = 3;
inline void WaypointMission::clear_total_len() {
  total_len_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::total_len() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.total_len)
  return total_len_;
}
inline void WaypointMission::set_total_len(::dji::protobuf::uint32 value) {
  
  total_len_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.total_len)
}

// uint32 current_total_len = 4;
inline void WaypointMission::clear_current_total_len() {
  current_total_len_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::current_total_len() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.current_total_len)
  return current_total_len_;
}
inline void WaypointMission::set_current_total_len(::dji::protobuf::uint32 value) {
  
  current_total_len_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.current_total_len)
}

// uint32 repeat_times = 5;
inline void WaypointMission::clear_repeat_times() {
  repeat_times_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::repeat_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.repeat_times)
  return repeat_times_;
}
inline void WaypointMission::set_repeat_times(::dji::protobuf::uint32 value) {
  
  repeat_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.repeat_times)
}

// .dji.waypointv2.WaypointMissionFinishedAction finished_action = 6;
inline void WaypointMission::clear_finished_action() {
  finished_action_ = 0;
}
inline ::dji::waypointv2::WaypointMissionFinishedAction WaypointMission::finished_action() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.finished_action)
  return static_cast< ::dji::waypointv2::WaypointMissionFinishedAction >(finished_action_);
}
inline void WaypointMission::set_finished_action(::dji::waypointv2::WaypointMissionFinishedAction value) {
  
  finished_action_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.finished_action)
}

// float global_max_velocity = 7;
inline void WaypointMission::clear_global_max_velocity() {
  global_max_velocity_ = 0;
}
inline float WaypointMission::global_max_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.global_max_velocity)
  return global_max_velocity_;
}
inline void WaypointMission::set_global_max_velocity(float value) {
  
  global_max_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.global_max_velocity)
}

// float global_cruise_velocity = 8;
inline void WaypointMission::clear_global_cruise_velocity() {
  global_cruise_velocity_ = 0;
}
inline float WaypointMission::global_cruise_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.global_cruise_velocity)
  return global_cruise_velocity_;
}
inline void WaypointMission::set_global_cruise_velocity(float value) {
  
  global_cruise_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.global_cruise_velocity)
}

// uint32 start_index = 9;
inline void WaypointMission::clear_start_index() {
  start_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointMission::start_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.start_index)
  return start_index_;
}
inline void WaypointMission::set_start_index(::dji::protobuf::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.start_index)
}

// .dji.waypointv2.WaypointMissionRCLostConnection rc_lost_action = 10;
inline void WaypointMission::clear_rc_lost_action() {
  rc_lost_action_ = 0;
}
inline ::dji::waypointv2::WaypointMissionRCLostConnection WaypointMission::rc_lost_action() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.rc_lost_action)
  return static_cast< ::dji::waypointv2::WaypointMissionRCLostConnection >(rc_lost_action_);
}
inline void WaypointMission::set_rc_lost_action(::dji::waypointv2::WaypointMissionRCLostConnection value) {
  
  rc_lost_action_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.rc_lost_action)
}

// .dji.waypointv2.WaypointMissionGotoWaypointMode goto_first_action = 12;
inline void WaypointMission::clear_goto_first_action() {
  goto_first_action_ = 0;
}
inline ::dji::waypointv2::WaypointMissionGotoWaypointMode WaypointMission::goto_first_action() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.goto_first_action)
  return static_cast< ::dji::waypointv2::WaypointMissionGotoWaypointMode >(goto_first_action_);
}
inline void WaypointMission::set_goto_first_action(::dji::waypointv2::WaypointMissionGotoWaypointMode value) {
  
  goto_first_action_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointMission.goto_first_action)
}

// .dji.waypointv2.LocationCoordinate reference_location = 13;
inline bool WaypointMission::has_reference_location() const {
  return this != internal_default_instance() && reference_location_ != NULL;
}
inline void WaypointMission::clear_reference_location() {
  if (GetArenaNoVirtual() == NULL && reference_location_ != NULL) {
    delete reference_location_;
  }
  reference_location_ = NULL;
}
inline const ::dji::waypointv2::LocationCoordinate& WaypointMission::reference_location() const {
  const ::dji::waypointv2::LocationCoordinate* p = reference_location_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.reference_location)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::LocationCoordinate*>(
      &::dji::waypointv2::_LocationCoordinate_default_instance_);
}
inline ::dji::waypointv2::LocationCoordinate* WaypointMission::release_reference_location() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointMission.reference_location)
  
  ::dji::waypointv2::LocationCoordinate* temp = reference_location_;
  reference_location_ = NULL;
  return temp;
}
inline ::dji::waypointv2::LocationCoordinate* WaypointMission::mutable_reference_location() {
  
  if (reference_location_ == NULL) {
    reference_location_ = new ::dji::waypointv2::LocationCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointMission.reference_location)
  return reference_location_;
}
inline void WaypointMission::set_allocated_reference_location(::dji::waypointv2::LocationCoordinate* reference_location) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reference_location_;
  }
  if (reference_location) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference_location = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, reference_location, submessage_arena);
    }
    
  } else {
    
  }
  reference_location_ = reference_location;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointMission.reference_location)
}

// repeated .dji.waypointv2.WaypointItem waypoint_list = 11;
inline int WaypointMission::waypoint_list_size() const {
  return waypoint_list_.size();
}
inline void WaypointMission::clear_waypoint_list() {
  waypoint_list_.Clear();
}
inline const ::dji::waypointv2::WaypointItem& WaypointMission::waypoint_list(int index) const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointMission.waypoint_list)
  return waypoint_list_.Get(index);
}
inline ::dji::waypointv2::WaypointItem* WaypointMission::mutable_waypoint_list(int index) {
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointMission.waypoint_list)
  return waypoint_list_.Mutable(index);
}
inline ::dji::waypointv2::WaypointItem* WaypointMission::add_waypoint_list() {
  // @@protoc_insertion_point(field_add:dji.waypointv2.WaypointMission.waypoint_list)
  return waypoint_list_.Add();
}
inline ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointItem >*
WaypointMission::mutable_waypoint_list() {
  // @@protoc_insertion_point(field_mutable_list:dji.waypointv2.WaypointMission.waypoint_list)
  return &waypoint_list_;
}
inline const ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointItem >&
WaypointMission::waypoint_list() const {
  // @@protoc_insertion_point(field_list:dji.waypointv2.WaypointMission.waypoint_list)
  return waypoint_list_;
}

// -------------------------------------------------------------------

// WaypointItem

// .dji.waypointv2.LocationCoordinate location = 1;
inline bool WaypointItem::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void WaypointItem::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::dji::waypointv2::LocationCoordinate& WaypointItem::location() const {
  const ::dji::waypointv2::LocationCoordinate* p = location_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.location)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::LocationCoordinate*>(
      &::dji::waypointv2::_LocationCoordinate_default_instance_);
}
inline ::dji::waypointv2::LocationCoordinate* WaypointItem::release_location() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointItem.location)
  
  ::dji::waypointv2::LocationCoordinate* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::dji::waypointv2::LocationCoordinate* WaypointItem::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::dji::waypointv2::LocationCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointItem.location)
  return location_;
}
inline void WaypointItem::set_allocated_location(::dji::waypointv2::LocationCoordinate* location) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointItem.location)
}

// .dji.waypointv2.WaypointType type = 2;
inline void WaypointItem::clear_type() {
  type_ = 0;
}
inline ::dji::waypointv2::WaypointType WaypointItem::type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.type)
  return static_cast< ::dji::waypointv2::WaypointType >(type_);
}
inline void WaypointItem::set_type(::dji::waypointv2::WaypointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.type)
}

// .dji.waypointv2.WaypointYawMode yaw_mode = 3;
inline void WaypointItem::clear_yaw_mode() {
  yaw_mode_ = 0;
}
inline ::dji::waypointv2::WaypointYawMode WaypointItem::yaw_mode() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.yaw_mode)
  return static_cast< ::dji::waypointv2::WaypointYawMode >(yaw_mode_);
}
inline void WaypointItem::set_yaw_mode(::dji::waypointv2::WaypointYawMode value) {
  
  yaw_mode_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.yaw_mode)
}

// bool use_local_cruise_velocity = 4;
inline void WaypointItem::clear_use_local_cruise_velocity() {
  use_local_cruise_velocity_ = false;
}
inline bool WaypointItem::use_local_cruise_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.use_local_cruise_velocity)
  return use_local_cruise_velocity_;
}
inline void WaypointItem::set_use_local_cruise_velocity(bool value) {
  
  use_local_cruise_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.use_local_cruise_velocity)
}

// bool use_local_max_velocity = 5;
inline void WaypointItem::clear_use_local_max_velocity() {
  use_local_max_velocity_ = false;
}
inline bool WaypointItem::use_local_max_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.use_local_max_velocity)
  return use_local_max_velocity_;
}
inline void WaypointItem::set_use_local_max_velocity(bool value) {
  
  use_local_max_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.use_local_max_velocity)
}

// float damping_distance = 6;
inline void WaypointItem::clear_damping_distance() {
  damping_distance_ = 0;
}
inline float WaypointItem::damping_distance() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.damping_distance)
  return damping_distance_;
}
inline void WaypointItem::set_damping_distance(float value) {
  
  damping_distance_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.damping_distance)
}

// float yaw_turn_angle = 7;
inline void WaypointItem::clear_yaw_turn_angle() {
  yaw_turn_angle_ = 0;
}
inline float WaypointItem::yaw_turn_angle() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.yaw_turn_angle)
  return yaw_turn_angle_;
}
inline void WaypointItem::set_yaw_turn_angle(float value) {
  
  yaw_turn_angle_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.yaw_turn_angle)
}

// bool yaw_turn_direction = 8;
inline void WaypointItem::clear_yaw_turn_direction() {
  yaw_turn_direction_ = false;
}
inline bool WaypointItem::yaw_turn_direction() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.yaw_turn_direction)
  return yaw_turn_direction_;
}
inline void WaypointItem::set_yaw_turn_direction(bool value) {
  
  yaw_turn_direction_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.yaw_turn_direction)
}

// .dji.waypointv2.LocationCoordinate poi_location = 9;
inline bool WaypointItem::has_poi_location() const {
  return this != internal_default_instance() && poi_location_ != NULL;
}
inline void WaypointItem::clear_poi_location() {
  if (GetArenaNoVirtual() == NULL && poi_location_ != NULL) {
    delete poi_location_;
  }
  poi_location_ = NULL;
}
inline const ::dji::waypointv2::LocationCoordinate& WaypointItem::poi_location() const {
  const ::dji::waypointv2::LocationCoordinate* p = poi_location_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.poi_location)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::LocationCoordinate*>(
      &::dji::waypointv2::_LocationCoordinate_default_instance_);
}
inline ::dji::waypointv2::LocationCoordinate* WaypointItem::release_poi_location() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointItem.poi_location)
  
  ::dji::waypointv2::LocationCoordinate* temp = poi_location_;
  poi_location_ = NULL;
  return temp;
}
inline ::dji::waypointv2::LocationCoordinate* WaypointItem::mutable_poi_location() {
  
  if (poi_location_ == NULL) {
    poi_location_ = new ::dji::waypointv2::LocationCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointItem.poi_location)
  return poi_location_;
}
inline void WaypointItem::set_allocated_poi_location(::dji::waypointv2::LocationCoordinate* poi_location) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete poi_location_;
  }
  if (poi_location) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      poi_location = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, poi_location, submessage_arena);
    }
    
  } else {
    
  }
  poi_location_ = poi_location;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointItem.poi_location)
}

// float local_cruise_velocity = 10;
inline void WaypointItem::clear_local_cruise_velocity() {
  local_cruise_velocity_ = 0;
}
inline float WaypointItem::local_cruise_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.local_cruise_velocity)
  return local_cruise_velocity_;
}
inline void WaypointItem::set_local_cruise_velocity(float value) {
  
  local_cruise_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.local_cruise_velocity)
}

// float local_max_velocity = 11;
inline void WaypointItem::clear_local_max_velocity() {
  local_max_velocity_ = 0;
}
inline float WaypointItem::local_max_velocity() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointItem.local_max_velocity)
  return local_max_velocity_;
}
inline void WaypointItem::set_local_max_velocity(float value) {
  
  local_max_velocity_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointItem.local_max_velocity)
}

// -------------------------------------------------------------------

// WaypointActionReachPointsTriggerParam

// uint32 start_index = 1;
inline void WaypointActionReachPointsTriggerParam::clear_start_index() {
  start_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionReachPointsTriggerParam::start_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionReachPointsTriggerParam.start_index)
  return start_index_;
}
inline void WaypointActionReachPointsTriggerParam::set_start_index(::dji::protobuf::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionReachPointsTriggerParam.start_index)
}

// uint32 end_index = 2;
inline void WaypointActionReachPointsTriggerParam::clear_end_index() {
  end_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionReachPointsTriggerParam::end_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionReachPointsTriggerParam.end_index)
  return end_index_;
}
inline void WaypointActionReachPointsTriggerParam::set_end_index(::dji::protobuf::uint32 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionReachPointsTriggerParam.end_index)
}

// uint32 interval_count = 3;
inline void WaypointActionReachPointsTriggerParam::clear_interval_count() {
  interval_count_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionReachPointsTriggerParam::interval_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionReachPointsTriggerParam.interval_count)
  return interval_count_;
}
inline void WaypointActionReachPointsTriggerParam::set_interval_count(::dji::protobuf::uint32 value) {
  
  interval_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionReachPointsTriggerParam.interval_count)
}

// uint32 auto_exit_count = 4;
inline void WaypointActionReachPointsTriggerParam::clear_auto_exit_count() {
  auto_exit_count_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionReachPointsTriggerParam::auto_exit_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionReachPointsTriggerParam.auto_exit_count)
  return auto_exit_count_;
}
inline void WaypointActionReachPointsTriggerParam::set_auto_exit_count(::dji::protobuf::uint32 value) {
  
  auto_exit_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionReachPointsTriggerParam.auto_exit_count)
}

// -------------------------------------------------------------------

// WaypointActionTrajectoryTriggerParam

// uint32 start_index = 1;
inline void WaypointActionTrajectoryTriggerParam::clear_start_index() {
  start_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionTrajectoryTriggerParam::start_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrajectoryTriggerParam.start_index)
  return start_index_;
}
inline void WaypointActionTrajectoryTriggerParam::set_start_index(::dji::protobuf::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionTrajectoryTriggerParam.start_index)
}

// uint32 end_index = 2;
inline void WaypointActionTrajectoryTriggerParam::clear_end_index() {
  end_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionTrajectoryTriggerParam::end_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrajectoryTriggerParam.end_index)
  return end_index_;
}
inline void WaypointActionTrajectoryTriggerParam::set_end_index(::dji::protobuf::uint32 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionTrajectoryTriggerParam.end_index)
}

// -------------------------------------------------------------------

// WaypointActionAssociateTriggerParam

// .dji.waypointv2.AssociateType associate_type = 1;
inline void WaypointActionAssociateTriggerParam::clear_associate_type() {
  associate_type_ = 0;
}
inline ::dji::waypointv2::AssociateType WaypointActionAssociateTriggerParam::associate_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionAssociateTriggerParam.associate_type)
  return static_cast< ::dji::waypointv2::AssociateType >(associate_type_);
}
inline void WaypointActionAssociateTriggerParam::set_associate_type(::dji::waypointv2::AssociateType value) {
  
  associate_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionAssociateTriggerParam.associate_type)
}

// float waiting_time = 2;
inline void WaypointActionAssociateTriggerParam::clear_waiting_time() {
  waiting_time_ = 0;
}
inline float WaypointActionAssociateTriggerParam::waiting_time() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionAssociateTriggerParam.waiting_time)
  return waiting_time_;
}
inline void WaypointActionAssociateTriggerParam::set_waiting_time(float value) {
  
  waiting_time_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionAssociateTriggerParam.waiting_time)
}

// uint32 associate_action_id = 3;
inline void WaypointActionAssociateTriggerParam::clear_associate_action_id() {
  associate_action_id_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionAssociateTriggerParam::associate_action_id() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionAssociateTriggerParam.associate_action_id)
  return associate_action_id_;
}
inline void WaypointActionAssociateTriggerParam::set_associate_action_id(::dji::protobuf::uint32 value) {
  
  associate_action_id_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionAssociateTriggerParam.associate_action_id)
}

// -------------------------------------------------------------------

// WaypointActionSimpleIntervalParam

// uint32 start_index = 1;
inline void WaypointActionSimpleIntervalParam::clear_start_index() {
  start_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionSimpleIntervalParam::start_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionSimpleIntervalParam.start_index)
  return start_index_;
}
inline void WaypointActionSimpleIntervalParam::set_start_index(::dji::protobuf::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionSimpleIntervalParam.start_index)
}

// float interval_value = 2;
inline void WaypointActionSimpleIntervalParam::clear_interval_value() {
  interval_value_ = 0;
}
inline float WaypointActionSimpleIntervalParam::interval_value() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionSimpleIntervalParam.interval_value)
  return interval_value_;
}
inline void WaypointActionSimpleIntervalParam::set_interval_value(float value) {
  
  interval_value_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionSimpleIntervalParam.interval_value)
}

// .dji.waypointv2.IntervalType interval_type = 3;
inline void WaypointActionSimpleIntervalParam::clear_interval_type() {
  interval_type_ = 0;
}
inline ::dji::waypointv2::IntervalType WaypointActionSimpleIntervalParam::interval_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionSimpleIntervalParam.interval_type)
  return static_cast< ::dji::waypointv2::IntervalType >(interval_type_);
}
inline void WaypointActionSimpleIntervalParam::set_interval_type(::dji::waypointv2::IntervalType value) {
  
  interval_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionSimpleIntervalParam.interval_type)
}

// -------------------------------------------------------------------

// WaypointActionSimpleReachPointParam

// uint32 start_index = 1;
inline void WaypointActionSimpleReachPointParam::clear_start_index() {
  start_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionSimpleReachPointParam::start_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionSimpleReachPointParam.start_index)
  return start_index_;
}
inline void WaypointActionSimpleReachPointParam::set_start_index(::dji::protobuf::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionSimpleReachPointParam.start_index)
}

// uint32 auto_exit_count = 2;
inline void WaypointActionSimpleReachPointParam::clear_auto_exit_count() {
  auto_exit_count_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionSimpleReachPointParam::auto_exit_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionSimpleReachPointParam.auto_exit_count)
  return auto_exit_count_;
}
inline void WaypointActionSimpleReachPointParam::set_auto_exit_count(::dji::protobuf::uint32 value) {
  
  auto_exit_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionSimpleReachPointParam.auto_exit_count)
}

// -------------------------------------------------------------------

// ActuatorCameraShootPhotoParam

// uint32 retry_times = 1;
inline void ActuatorCameraShootPhotoParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraShootPhotoParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraShootPhotoParam.retry_times)
  return retry_times_;
}
inline void ActuatorCameraShootPhotoParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraShootPhotoParam.retry_times)
}

// -------------------------------------------------------------------

// ActuatorCameraStartRecordVideoParam

// uint32 retry_times = 1;
inline void ActuatorCameraStartRecordVideoParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraStartRecordVideoParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraStartRecordVideoParam.retry_times)
  return retry_times_;
}
inline void ActuatorCameraStartRecordVideoParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraStartRecordVideoParam.retry_times)
}

// -------------------------------------------------------------------

// ActuatorCameraStopRecordVideoParam

// uint32 retry_times = 1;
inline void ActuatorCameraStopRecordVideoParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraStopRecordVideoParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraStopRecordVideoParam.retry_times)
  return retry_times_;
}
inline void ActuatorCameraStopRecordVideoParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraStopRecordVideoParam.retry_times)
}

// -------------------------------------------------------------------

// ActuatorCameraFocusParam

// float x_position = 1;
inline void ActuatorCameraFocusParam::clear_x_position() {
  x_position_ = 0;
}
inline float ActuatorCameraFocusParam::x_position() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraFocusParam.x_position)
  return x_position_;
}
inline void ActuatorCameraFocusParam::set_x_position(float value) {
  
  x_position_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraFocusParam.x_position)
}

// float y_position = 2;
inline void ActuatorCameraFocusParam::clear_y_position() {
  y_position_ = 0;
}
inline float ActuatorCameraFocusParam::y_position() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraFocusParam.y_position)
  return y_position_;
}
inline void ActuatorCameraFocusParam::set_y_position(float value) {
  
  y_position_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraFocusParam.y_position)
}

// uint32 retry_times = 3;
inline void ActuatorCameraFocusParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraFocusParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraFocusParam.retry_times)
  return retry_times_;
}
inline void ActuatorCameraFocusParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraFocusParam.retry_times)
}

// uint32 focus_dealy_time = 4;
inline void ActuatorCameraFocusParam::clear_focus_dealy_time() {
  focus_dealy_time_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraFocusParam::focus_dealy_time() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraFocusParam.focus_dealy_time)
  return focus_dealy_time_;
}
inline void ActuatorCameraFocusParam::set_focus_dealy_time(::dji::protobuf::uint32 value) {
  
  focus_dealy_time_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraFocusParam.focus_dealy_time)
}

// -------------------------------------------------------------------

// ActuatorCameraZoomLengthParam

// uint32 focal_distance = 1;
inline void ActuatorCameraZoomLengthParam::clear_focal_distance() {
  focal_distance_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraZoomLengthParam::focal_distance() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraZoomLengthParam.focal_distance)
  return focal_distance_;
}
inline void ActuatorCameraZoomLengthParam::set_focal_distance(::dji::protobuf::uint32 value) {
  
  focal_distance_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraZoomLengthParam.focal_distance)
}

// uint32 retry_times = 2;
inline void ActuatorCameraZoomLengthParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorCameraZoomLengthParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorCameraZoomLengthParam.retry_times)
  return retry_times_;
}
inline void ActuatorCameraZoomLengthParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorCameraZoomLengthParam.retry_times)
}

// -------------------------------------------------------------------

// ActuatorGimbalRotateParam

// float gimbal_roll = 1;
inline void ActuatorGimbalRotateParam::clear_gimbal_roll() {
  gimbal_roll_ = 0;
}
inline float ActuatorGimbalRotateParam::gimbal_roll() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_roll)
  return gimbal_roll_;
}
inline void ActuatorGimbalRotateParam::set_gimbal_roll(float value) {
  
  gimbal_roll_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_roll)
}

// float gimbal_pitch = 2;
inline void ActuatorGimbalRotateParam::clear_gimbal_pitch() {
  gimbal_pitch_ = 0;
}
inline float ActuatorGimbalRotateParam::gimbal_pitch() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_pitch)
  return gimbal_pitch_;
}
inline void ActuatorGimbalRotateParam::set_gimbal_pitch(float value) {
  
  gimbal_pitch_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_pitch)
}

// float gimbal_yaw = 3;
inline void ActuatorGimbalRotateParam::clear_gimbal_yaw() {
  gimbal_yaw_ = 0;
}
inline float ActuatorGimbalRotateParam::gimbal_yaw() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_yaw)
  return gimbal_yaw_;
}
inline void ActuatorGimbalRotateParam::set_gimbal_yaw(float value) {
  
  gimbal_yaw_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.gimbal_yaw)
}

// bool is_absolute = 4;
inline void ActuatorGimbalRotateParam::clear_is_absolute() {
  is_absolute_ = false;
}
inline bool ActuatorGimbalRotateParam::is_absolute() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.is_absolute)
  return is_absolute_;
}
inline void ActuatorGimbalRotateParam::set_is_absolute(bool value) {
  
  is_absolute_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.is_absolute)
}

// bool roll_ignore = 5;
inline void ActuatorGimbalRotateParam::clear_roll_ignore() {
  roll_ignore_ = false;
}
inline bool ActuatorGimbalRotateParam::roll_ignore() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.roll_ignore)
  return roll_ignore_;
}
inline void ActuatorGimbalRotateParam::set_roll_ignore(bool value) {
  
  roll_ignore_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.roll_ignore)
}

// bool pitch_ignore = 6;
inline void ActuatorGimbalRotateParam::clear_pitch_ignore() {
  pitch_ignore_ = false;
}
inline bool ActuatorGimbalRotateParam::pitch_ignore() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.pitch_ignore)
  return pitch_ignore_;
}
inline void ActuatorGimbalRotateParam::set_pitch_ignore(bool value) {
  
  pitch_ignore_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.pitch_ignore)
}

// bool yaw_ignore = 7;
inline void ActuatorGimbalRotateParam::clear_yaw_ignore() {
  yaw_ignore_ = false;
}
inline bool ActuatorGimbalRotateParam::yaw_ignore() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.yaw_ignore)
  return yaw_ignore_;
}
inline void ActuatorGimbalRotateParam::set_yaw_ignore(bool value) {
  
  yaw_ignore_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.yaw_ignore)
}

// bool is_aircraft_heading_coordinate_system = 8;
inline void ActuatorGimbalRotateParam::clear_is_aircraft_heading_coordinate_system() {
  is_aircraft_heading_coordinate_system_ = false;
}
inline bool ActuatorGimbalRotateParam::is_aircraft_heading_coordinate_system() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.is_aircraft_heading_coordinate_system)
  return is_aircraft_heading_coordinate_system_;
}
inline void ActuatorGimbalRotateParam::set_is_aircraft_heading_coordinate_system(bool value) {
  
  is_aircraft_heading_coordinate_system_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.is_aircraft_heading_coordinate_system)
}

// uint32 duration_time = 9;
inline void ActuatorGimbalRotateParam::clear_duration_time() {
  duration_time_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorGimbalRotateParam::duration_time() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorGimbalRotateParam.duration_time)
  return duration_time_;
}
inline void ActuatorGimbalRotateParam::set_duration_time(::dji::protobuf::uint32 value) {
  
  duration_time_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorGimbalRotateParam.duration_time)
}

// -------------------------------------------------------------------

// ActuatorAircraftControlGimbalParam

// float gimbal_pitch = 1;
inline void ActuatorAircraftControlGimbalParam::clear_gimbal_pitch() {
  gimbal_pitch_ = 0;
}
inline float ActuatorAircraftControlGimbalParam::gimbal_pitch() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorAircraftControlGimbalParam.gimbal_pitch)
  return gimbal_pitch_;
}
inline void ActuatorAircraftControlGimbalParam::set_gimbal_pitch(float value) {
  
  gimbal_pitch_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorAircraftControlGimbalParam.gimbal_pitch)
}

// -------------------------------------------------------------------

// ActuatorAircraftControlRotateYawParam

// bool is_relative = 1;
inline void ActuatorAircraftControlRotateYawParam::clear_is_relative() {
  is_relative_ = false;
}
inline bool ActuatorAircraftControlRotateYawParam::is_relative() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorAircraftControlRotateYawParam.is_relative)
  return is_relative_;
}
inline void ActuatorAircraftControlRotateYawParam::set_is_relative(bool value) {
  
  is_relative_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorAircraftControlRotateYawParam.is_relative)
}

// bool is_clockwise = 2;
inline void ActuatorAircraftControlRotateYawParam::clear_is_clockwise() {
  is_clockwise_ = false;
}
inline bool ActuatorAircraftControlRotateYawParam::is_clockwise() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorAircraftControlRotateYawParam.is_clockwise)
  return is_clockwise_;
}
inline void ActuatorAircraftControlRotateYawParam::set_is_clockwise(bool value) {
  
  is_clockwise_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorAircraftControlRotateYawParam.is_clockwise)
}

// float yaw_angle = 3;
inline void ActuatorAircraftControlRotateYawParam::clear_yaw_angle() {
  yaw_angle_ = 0;
}
inline float ActuatorAircraftControlRotateYawParam::yaw_angle() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorAircraftControlRotateYawParam.yaw_angle)
  return yaw_angle_;
}
inline void ActuatorAircraftControlRotateYawParam::set_yaw_angle(float value) {
  
  yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorAircraftControlRotateYawParam.yaw_angle)
}

// -------------------------------------------------------------------

// ActuatorAircraftControlStartStopFlyParam

// bool is_start = 1;
inline void ActuatorAircraftControlStartStopFlyParam::clear_is_start() {
  is_start_ = false;
}
inline bool ActuatorAircraftControlStartStopFlyParam::is_start() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorAircraftControlStartStopFlyParam.is_start)
  return is_start_;
}
inline void ActuatorAircraftControlStartStopFlyParam::set_is_start(bool value) {
  
  is_start_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorAircraftControlStartStopFlyParam.is_start)
}

// -------------------------------------------------------------------

// ActuatorPayloadControlOperatingParam

// uint32 controller_type = 1;
inline void ActuatorPayloadControlOperatingParam::clear_controller_type() {
  controller_type_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorPayloadControlOperatingParam::controller_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_type)
  return controller_type_;
}
inline void ActuatorPayloadControlOperatingParam::set_controller_type(::dji::protobuf::uint32 value) {
  
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_type)
}

// uint32 controller_index = 2;
inline void ActuatorPayloadControlOperatingParam::clear_controller_index() {
  controller_index_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorPayloadControlOperatingParam::controller_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_index)
  return controller_index_;
}
inline void ActuatorPayloadControlOperatingParam::set_controller_index(::dji::protobuf::uint32 value) {
  
  controller_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_index)
}

// uint32 controller_value = 3;
inline void ActuatorPayloadControlOperatingParam::clear_controller_value() {
  controller_value_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorPayloadControlOperatingParam::controller_value() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_value)
  return controller_value_;
}
inline void ActuatorPayloadControlOperatingParam::set_controller_value(::dji::protobuf::uint32 value) {
  
  controller_value_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorPayloadControlOperatingParam.controller_value)
}

// -------------------------------------------------------------------

// WaypointActionOperatorSpray

// .dji.waypointv2.SprayActionType action_type = 1;
inline void WaypointActionOperatorSpray::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::SprayActionType WaypointActionOperatorSpray::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorSpray.action_type)
  return static_cast< ::dji::waypointv2::SprayActionType >(action_type_);
}
inline void WaypointActionOperatorSpray::set_action_type(::dji::waypointv2::SprayActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorSpray.action_type)
}

// uint32 spray_mode = 2;
inline void WaypointActionOperatorSpray::clear_spray_mode() {
  spray_mode_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionOperatorSpray::spray_mode() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorSpray.spray_mode)
  return spray_mode_;
}
inline void WaypointActionOperatorSpray::set_spray_mode(::dji::protobuf::uint32 value) {
  
  spray_mode_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorSpray.spray_mode)
}

// uint32 flow_speed_valid_float = 3;
inline void WaypointActionOperatorSpray::clear_flow_speed_valid_float() {
  flow_speed_valid_float_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionOperatorSpray::flow_speed_valid_float() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorSpray.flow_speed_valid_float)
  return flow_speed_valid_float_;
}
inline void WaypointActionOperatorSpray::set_flow_speed_valid_float(::dji::protobuf::uint32 value) {
  
  flow_speed_valid_float_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorSpray.flow_speed_valid_float)
}

// float flow_speed = 4;
inline void WaypointActionOperatorSpray::clear_flow_speed() {
  flow_speed_ = 0;
}
inline float WaypointActionOperatorSpray::flow_speed() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorSpray.flow_speed)
  return flow_speed_;
}
inline void WaypointActionOperatorSpray::set_flow_speed(float value) {
  
  flow_speed_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorSpray.flow_speed)
}

// float flow_speed_per_mu = 5;
inline void WaypointActionOperatorSpray::clear_flow_speed_per_mu() {
  flow_speed_per_mu_ = 0;
}
inline float WaypointActionOperatorSpray::flow_speed_per_mu() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorSpray.flow_speed_per_mu)
  return flow_speed_per_mu_;
}
inline void WaypointActionOperatorSpray::set_flow_speed_per_mu(float value) {
  
  flow_speed_per_mu_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorSpray.flow_speed_per_mu)
}

// -------------------------------------------------------------------

// WaypointActionOperatorCamera

// .dji.waypointv2.CameraActionType action_type = 1;
inline void WaypointActionOperatorCamera::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::CameraActionType WaypointActionOperatorCamera::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.action_type)
  return static_cast< ::dji::waypointv2::CameraActionType >(action_type_);
}
inline void WaypointActionOperatorCamera::set_action_type(::dji::waypointv2::CameraActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorCamera.action_type)
}

// .dji.waypointv2.ActuatorCameraShootPhotoParam shootphoto_param = 2;
inline bool WaypointActionOperatorCamera::has_shootphoto_param() const {
  return this != internal_default_instance() && shootphoto_param_ != NULL;
}
inline void WaypointActionOperatorCamera::clear_shootphoto_param() {
  if (GetArenaNoVirtual() == NULL && shootphoto_param_ != NULL) {
    delete shootphoto_param_;
  }
  shootphoto_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorCameraShootPhotoParam& WaypointActionOperatorCamera::shootphoto_param() const {
  const ::dji::waypointv2::ActuatorCameraShootPhotoParam* p = shootphoto_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.shootphoto_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorCameraShootPhotoParam*>(
      &::dji::waypointv2::_ActuatorCameraShootPhotoParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorCameraShootPhotoParam* WaypointActionOperatorCamera::release_shootphoto_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorCamera.shootphoto_param)
  
  ::dji::waypointv2::ActuatorCameraShootPhotoParam* temp = shootphoto_param_;
  shootphoto_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorCameraShootPhotoParam* WaypointActionOperatorCamera::mutable_shootphoto_param() {
  
  if (shootphoto_param_ == NULL) {
    shootphoto_param_ = new ::dji::waypointv2::ActuatorCameraShootPhotoParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorCamera.shootphoto_param)
  return shootphoto_param_;
}
inline void WaypointActionOperatorCamera::set_allocated_shootphoto_param(::dji::waypointv2::ActuatorCameraShootPhotoParam* shootphoto_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shootphoto_param_;
  }
  if (shootphoto_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shootphoto_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, shootphoto_param, submessage_arena);
    }
    
  } else {
    
  }
  shootphoto_param_ = shootphoto_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorCamera.shootphoto_param)
}

// .dji.waypointv2.ActuatorCameraStartRecordVideoParam start_record_video_param = 3;
inline bool WaypointActionOperatorCamera::has_start_record_video_param() const {
  return this != internal_default_instance() && start_record_video_param_ != NULL;
}
inline void WaypointActionOperatorCamera::clear_start_record_video_param() {
  if (GetArenaNoVirtual() == NULL && start_record_video_param_ != NULL) {
    delete start_record_video_param_;
  }
  start_record_video_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorCameraStartRecordVideoParam& WaypointActionOperatorCamera::start_record_video_param() const {
  const ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* p = start_record_video_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.start_record_video_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorCameraStartRecordVideoParam*>(
      &::dji::waypointv2::_ActuatorCameraStartRecordVideoParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* WaypointActionOperatorCamera::release_start_record_video_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorCamera.start_record_video_param)
  
  ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* temp = start_record_video_param_;
  start_record_video_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorCameraStartRecordVideoParam* WaypointActionOperatorCamera::mutable_start_record_video_param() {
  
  if (start_record_video_param_ == NULL) {
    start_record_video_param_ = new ::dji::waypointv2::ActuatorCameraStartRecordVideoParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorCamera.start_record_video_param)
  return start_record_video_param_;
}
inline void WaypointActionOperatorCamera::set_allocated_start_record_video_param(::dji::waypointv2::ActuatorCameraStartRecordVideoParam* start_record_video_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_record_video_param_;
  }
  if (start_record_video_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_record_video_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, start_record_video_param, submessage_arena);
    }
    
  } else {
    
  }
  start_record_video_param_ = start_record_video_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorCamera.start_record_video_param)
}

// .dji.waypointv2.ActuatorCameraStopRecordVideoParam stop_record_video_param = 4;
inline bool WaypointActionOperatorCamera::has_stop_record_video_param() const {
  return this != internal_default_instance() && stop_record_video_param_ != NULL;
}
inline void WaypointActionOperatorCamera::clear_stop_record_video_param() {
  if (GetArenaNoVirtual() == NULL && stop_record_video_param_ != NULL) {
    delete stop_record_video_param_;
  }
  stop_record_video_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorCameraStopRecordVideoParam& WaypointActionOperatorCamera::stop_record_video_param() const {
  const ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* p = stop_record_video_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.stop_record_video_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorCameraStopRecordVideoParam*>(
      &::dji::waypointv2::_ActuatorCameraStopRecordVideoParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* WaypointActionOperatorCamera::release_stop_record_video_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorCamera.stop_record_video_param)
  
  ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* temp = stop_record_video_param_;
  stop_record_video_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorCameraStopRecordVideoParam* WaypointActionOperatorCamera::mutable_stop_record_video_param() {
  
  if (stop_record_video_param_ == NULL) {
    stop_record_video_param_ = new ::dji::waypointv2::ActuatorCameraStopRecordVideoParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorCamera.stop_record_video_param)
  return stop_record_video_param_;
}
inline void WaypointActionOperatorCamera::set_allocated_stop_record_video_param(::dji::waypointv2::ActuatorCameraStopRecordVideoParam* stop_record_video_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stop_record_video_param_;
  }
  if (stop_record_video_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_record_video_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, stop_record_video_param, submessage_arena);
    }
    
  } else {
    
  }
  stop_record_video_param_ = stop_record_video_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorCamera.stop_record_video_param)
}

// .dji.waypointv2.ActuatorCameraFocusParam focus_param = 5;
inline bool WaypointActionOperatorCamera::has_focus_param() const {
  return this != internal_default_instance() && focus_param_ != NULL;
}
inline void WaypointActionOperatorCamera::clear_focus_param() {
  if (GetArenaNoVirtual() == NULL && focus_param_ != NULL) {
    delete focus_param_;
  }
  focus_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorCameraFocusParam& WaypointActionOperatorCamera::focus_param() const {
  const ::dji::waypointv2::ActuatorCameraFocusParam* p = focus_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.focus_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorCameraFocusParam*>(
      &::dji::waypointv2::_ActuatorCameraFocusParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorCameraFocusParam* WaypointActionOperatorCamera::release_focus_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorCamera.focus_param)
  
  ::dji::waypointv2::ActuatorCameraFocusParam* temp = focus_param_;
  focus_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorCameraFocusParam* WaypointActionOperatorCamera::mutable_focus_param() {
  
  if (focus_param_ == NULL) {
    focus_param_ = new ::dji::waypointv2::ActuatorCameraFocusParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorCamera.focus_param)
  return focus_param_;
}
inline void WaypointActionOperatorCamera::set_allocated_focus_param(::dji::waypointv2::ActuatorCameraFocusParam* focus_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focus_param_;
  }
  if (focus_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focus_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, focus_param, submessage_arena);
    }
    
  } else {
    
  }
  focus_param_ = focus_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorCamera.focus_param)
}

// .dji.waypointv2.ActuatorCameraZoomLengthParam zoom_length_param = 6;
inline bool WaypointActionOperatorCamera::has_zoom_length_param() const {
  return this != internal_default_instance() && zoom_length_param_ != NULL;
}
inline void WaypointActionOperatorCamera::clear_zoom_length_param() {
  if (GetArenaNoVirtual() == NULL && zoom_length_param_ != NULL) {
    delete zoom_length_param_;
  }
  zoom_length_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorCameraZoomLengthParam& WaypointActionOperatorCamera::zoom_length_param() const {
  const ::dji::waypointv2::ActuatorCameraZoomLengthParam* p = zoom_length_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorCamera.zoom_length_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorCameraZoomLengthParam*>(
      &::dji::waypointv2::_ActuatorCameraZoomLengthParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorCameraZoomLengthParam* WaypointActionOperatorCamera::release_zoom_length_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorCamera.zoom_length_param)
  
  ::dji::waypointv2::ActuatorCameraZoomLengthParam* temp = zoom_length_param_;
  zoom_length_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorCameraZoomLengthParam* WaypointActionOperatorCamera::mutable_zoom_length_param() {
  
  if (zoom_length_param_ == NULL) {
    zoom_length_param_ = new ::dji::waypointv2::ActuatorCameraZoomLengthParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorCamera.zoom_length_param)
  return zoom_length_param_;
}
inline void WaypointActionOperatorCamera::set_allocated_zoom_length_param(::dji::waypointv2::ActuatorCameraZoomLengthParam* zoom_length_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zoom_length_param_;
  }
  if (zoom_length_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zoom_length_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, zoom_length_param, submessage_arena);
    }
    
  } else {
    
  }
  zoom_length_param_ = zoom_length_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorCamera.zoom_length_param)
}

// -------------------------------------------------------------------

// WaypointActionOperatorGimbal

// .dji.waypointv2.GimbalActionType action_type = 1;
inline void WaypointActionOperatorGimbal::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::GimbalActionType WaypointActionOperatorGimbal::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorGimbal.action_type)
  return static_cast< ::dji::waypointv2::GimbalActionType >(action_type_);
}
inline void WaypointActionOperatorGimbal::set_action_type(::dji::waypointv2::GimbalActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorGimbal.action_type)
}

// .dji.waypointv2.ActuatorGimbalRotateParam rotate_param = 2;
inline bool WaypointActionOperatorGimbal::has_rotate_param() const {
  return this != internal_default_instance() && rotate_param_ != NULL;
}
inline void WaypointActionOperatorGimbal::clear_rotate_param() {
  if (GetArenaNoVirtual() == NULL && rotate_param_ != NULL) {
    delete rotate_param_;
  }
  rotate_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorGimbalRotateParam& WaypointActionOperatorGimbal::rotate_param() const {
  const ::dji::waypointv2::ActuatorGimbalRotateParam* p = rotate_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorGimbal.rotate_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorGimbalRotateParam*>(
      &::dji::waypointv2::_ActuatorGimbalRotateParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorGimbalRotateParam* WaypointActionOperatorGimbal::release_rotate_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorGimbal.rotate_param)
  
  ::dji::waypointv2::ActuatorGimbalRotateParam* temp = rotate_param_;
  rotate_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorGimbalRotateParam* WaypointActionOperatorGimbal::mutable_rotate_param() {
  
  if (rotate_param_ == NULL) {
    rotate_param_ = new ::dji::waypointv2::ActuatorGimbalRotateParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorGimbal.rotate_param)
  return rotate_param_;
}
inline void WaypointActionOperatorGimbal::set_allocated_rotate_param(::dji::waypointv2::ActuatorGimbalRotateParam* rotate_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotate_param_;
  }
  if (rotate_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotate_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, rotate_param, submessage_arena);
    }
    
  } else {
    
  }
  rotate_param_ = rotate_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorGimbal.rotate_param)
}

// .dji.waypointv2.ActuatorAircraftControlGimbalParam aircraft_control_gimbal_param = 3;
inline bool WaypointActionOperatorGimbal::has_aircraft_control_gimbal_param() const {
  return this != internal_default_instance() && aircraft_control_gimbal_param_ != NULL;
}
inline void WaypointActionOperatorGimbal::clear_aircraft_control_gimbal_param() {
  if (GetArenaNoVirtual() == NULL && aircraft_control_gimbal_param_ != NULL) {
    delete aircraft_control_gimbal_param_;
  }
  aircraft_control_gimbal_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorAircraftControlGimbalParam& WaypointActionOperatorGimbal::aircraft_control_gimbal_param() const {
  const ::dji::waypointv2::ActuatorAircraftControlGimbalParam* p = aircraft_control_gimbal_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorGimbal.aircraft_control_gimbal_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorAircraftControlGimbalParam*>(
      &::dji::waypointv2::_ActuatorAircraftControlGimbalParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorAircraftControlGimbalParam* WaypointActionOperatorGimbal::release_aircraft_control_gimbal_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorGimbal.aircraft_control_gimbal_param)
  
  ::dji::waypointv2::ActuatorAircraftControlGimbalParam* temp = aircraft_control_gimbal_param_;
  aircraft_control_gimbal_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorAircraftControlGimbalParam* WaypointActionOperatorGimbal::mutable_aircraft_control_gimbal_param() {
  
  if (aircraft_control_gimbal_param_ == NULL) {
    aircraft_control_gimbal_param_ = new ::dji::waypointv2::ActuatorAircraftControlGimbalParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorGimbal.aircraft_control_gimbal_param)
  return aircraft_control_gimbal_param_;
}
inline void WaypointActionOperatorGimbal::set_allocated_aircraft_control_gimbal_param(::dji::waypointv2::ActuatorAircraftControlGimbalParam* aircraft_control_gimbal_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete aircraft_control_gimbal_param_;
  }
  if (aircraft_control_gimbal_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aircraft_control_gimbal_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, aircraft_control_gimbal_param, submessage_arena);
    }
    
  } else {
    
  }
  aircraft_control_gimbal_param_ = aircraft_control_gimbal_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorGimbal.aircraft_control_gimbal_param)
}

// -------------------------------------------------------------------

// WaypointActionTrigger

// .dji.waypointv2.WaypointActionTriggerType trigger_type = 1;
inline void WaypointActionTrigger::clear_trigger_type() {
  trigger_type_ = 0;
}
inline ::dji::waypointv2::WaypointActionTriggerType WaypointActionTrigger::trigger_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.trigger_type)
  return static_cast< ::dji::waypointv2::WaypointActionTriggerType >(trigger_type_);
}
inline void WaypointActionTrigger::set_trigger_type(::dji::waypointv2::WaypointActionTriggerType value) {
  
  trigger_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionTrigger.trigger_type)
}

// .dji.waypointv2.WaypointActionReachPointsTriggerParam reach_point_param = 2;
inline bool WaypointActionTrigger::has_reach_point_param() const {
  return this != internal_default_instance() && reach_point_param_ != NULL;
}
inline void WaypointActionTrigger::clear_reach_point_param() {
  if (GetArenaNoVirtual() == NULL && reach_point_param_ != NULL) {
    delete reach_point_param_;
  }
  reach_point_param_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionReachPointsTriggerParam& WaypointActionTrigger::reach_point_param() const {
  const ::dji::waypointv2::WaypointActionReachPointsTriggerParam* p = reach_point_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.reach_point_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionReachPointsTriggerParam*>(
      &::dji::waypointv2::_WaypointActionReachPointsTriggerParam_default_instance_);
}
inline ::dji::waypointv2::WaypointActionReachPointsTriggerParam* WaypointActionTrigger::release_reach_point_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionTrigger.reach_point_param)
  
  ::dji::waypointv2::WaypointActionReachPointsTriggerParam* temp = reach_point_param_;
  reach_point_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionReachPointsTriggerParam* WaypointActionTrigger::mutable_reach_point_param() {
  
  if (reach_point_param_ == NULL) {
    reach_point_param_ = new ::dji::waypointv2::WaypointActionReachPointsTriggerParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionTrigger.reach_point_param)
  return reach_point_param_;
}
inline void WaypointActionTrigger::set_allocated_reach_point_param(::dji::waypointv2::WaypointActionReachPointsTriggerParam* reach_point_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reach_point_param_;
  }
  if (reach_point_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reach_point_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, reach_point_param, submessage_arena);
    }
    
  } else {
    
  }
  reach_point_param_ = reach_point_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionTrigger.reach_point_param)
}

// .dji.waypointv2.WaypointActionAssociateTriggerParam associate_param = 3;
inline bool WaypointActionTrigger::has_associate_param() const {
  return this != internal_default_instance() && associate_param_ != NULL;
}
inline void WaypointActionTrigger::clear_associate_param() {
  if (GetArenaNoVirtual() == NULL && associate_param_ != NULL) {
    delete associate_param_;
  }
  associate_param_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionAssociateTriggerParam& WaypointActionTrigger::associate_param() const {
  const ::dji::waypointv2::WaypointActionAssociateTriggerParam* p = associate_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.associate_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionAssociateTriggerParam*>(
      &::dji::waypointv2::_WaypointActionAssociateTriggerParam_default_instance_);
}
inline ::dji::waypointv2::WaypointActionAssociateTriggerParam* WaypointActionTrigger::release_associate_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionTrigger.associate_param)
  
  ::dji::waypointv2::WaypointActionAssociateTriggerParam* temp = associate_param_;
  associate_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionAssociateTriggerParam* WaypointActionTrigger::mutable_associate_param() {
  
  if (associate_param_ == NULL) {
    associate_param_ = new ::dji::waypointv2::WaypointActionAssociateTriggerParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionTrigger.associate_param)
  return associate_param_;
}
inline void WaypointActionTrigger::set_allocated_associate_param(::dji::waypointv2::WaypointActionAssociateTriggerParam* associate_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete associate_param_;
  }
  if (associate_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      associate_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, associate_param, submessage_arena);
    }
    
  } else {
    
  }
  associate_param_ = associate_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionTrigger.associate_param)
}

// .dji.waypointv2.WaypointActionTrajectoryTriggerParam trajectory_param = 4;
inline bool WaypointActionTrigger::has_trajectory_param() const {
  return this != internal_default_instance() && trajectory_param_ != NULL;
}
inline void WaypointActionTrigger::clear_trajectory_param() {
  if (GetArenaNoVirtual() == NULL && trajectory_param_ != NULL) {
    delete trajectory_param_;
  }
  trajectory_param_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionTrajectoryTriggerParam& WaypointActionTrigger::trajectory_param() const {
  const ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* p = trajectory_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.trajectory_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionTrajectoryTriggerParam*>(
      &::dji::waypointv2::_WaypointActionTrajectoryTriggerParam_default_instance_);
}
inline ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* WaypointActionTrigger::release_trajectory_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionTrigger.trajectory_param)
  
  ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* temp = trajectory_param_;
  trajectory_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionTrajectoryTriggerParam* WaypointActionTrigger::mutable_trajectory_param() {
  
  if (trajectory_param_ == NULL) {
    trajectory_param_ = new ::dji::waypointv2::WaypointActionTrajectoryTriggerParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionTrigger.trajectory_param)
  return trajectory_param_;
}
inline void WaypointActionTrigger::set_allocated_trajectory_param(::dji::waypointv2::WaypointActionTrajectoryTriggerParam* trajectory_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trajectory_param_;
  }
  if (trajectory_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_param, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_param_ = trajectory_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionTrigger.trajectory_param)
}

// .dji.waypointv2.WaypointActionSimpleIntervalParam simple_interval_param = 5;
inline bool WaypointActionTrigger::has_simple_interval_param() const {
  return this != internal_default_instance() && simple_interval_param_ != NULL;
}
inline void WaypointActionTrigger::clear_simple_interval_param() {
  if (GetArenaNoVirtual() == NULL && simple_interval_param_ != NULL) {
    delete simple_interval_param_;
  }
  simple_interval_param_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionSimpleIntervalParam& WaypointActionTrigger::simple_interval_param() const {
  const ::dji::waypointv2::WaypointActionSimpleIntervalParam* p = simple_interval_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.simple_interval_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionSimpleIntervalParam*>(
      &::dji::waypointv2::_WaypointActionSimpleIntervalParam_default_instance_);
}
inline ::dji::waypointv2::WaypointActionSimpleIntervalParam* WaypointActionTrigger::release_simple_interval_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionTrigger.simple_interval_param)
  
  ::dji::waypointv2::WaypointActionSimpleIntervalParam* temp = simple_interval_param_;
  simple_interval_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionSimpleIntervalParam* WaypointActionTrigger::mutable_simple_interval_param() {
  
  if (simple_interval_param_ == NULL) {
    simple_interval_param_ = new ::dji::waypointv2::WaypointActionSimpleIntervalParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionTrigger.simple_interval_param)
  return simple_interval_param_;
}
inline void WaypointActionTrigger::set_allocated_simple_interval_param(::dji::waypointv2::WaypointActionSimpleIntervalParam* simple_interval_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete simple_interval_param_;
  }
  if (simple_interval_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      simple_interval_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, simple_interval_param, submessage_arena);
    }
    
  } else {
    
  }
  simple_interval_param_ = simple_interval_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionTrigger.simple_interval_param)
}

// .dji.waypointv2.WaypointActionSimpleReachPointParam simple_reach_point_param = 6;
inline bool WaypointActionTrigger::has_simple_reach_point_param() const {
  return this != internal_default_instance() && simple_reach_point_param_ != NULL;
}
inline void WaypointActionTrigger::clear_simple_reach_point_param() {
  if (GetArenaNoVirtual() == NULL && simple_reach_point_param_ != NULL) {
    delete simple_reach_point_param_;
  }
  simple_reach_point_param_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionSimpleReachPointParam& WaypointActionTrigger::simple_reach_point_param() const {
  const ::dji::waypointv2::WaypointActionSimpleReachPointParam* p = simple_reach_point_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionTrigger.simple_reach_point_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionSimpleReachPointParam*>(
      &::dji::waypointv2::_WaypointActionSimpleReachPointParam_default_instance_);
}
inline ::dji::waypointv2::WaypointActionSimpleReachPointParam* WaypointActionTrigger::release_simple_reach_point_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionTrigger.simple_reach_point_param)
  
  ::dji::waypointv2::WaypointActionSimpleReachPointParam* temp = simple_reach_point_param_;
  simple_reach_point_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionSimpleReachPointParam* WaypointActionTrigger::mutable_simple_reach_point_param() {
  
  if (simple_reach_point_param_ == NULL) {
    simple_reach_point_param_ = new ::dji::waypointv2::WaypointActionSimpleReachPointParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionTrigger.simple_reach_point_param)
  return simple_reach_point_param_;
}
inline void WaypointActionTrigger::set_allocated_simple_reach_point_param(::dji::waypointv2::WaypointActionSimpleReachPointParam* simple_reach_point_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete simple_reach_point_param_;
  }
  if (simple_reach_point_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      simple_reach_point_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, simple_reach_point_param, submessage_arena);
    }
    
  } else {
    
  }
  simple_reach_point_param_ = simple_reach_point_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionTrigger.simple_reach_point_param)
}

// -------------------------------------------------------------------

// WaypointActionOperatorAircraftControl

// .dji.waypointv2.AircraftControlActionType action_type = 1;
inline void WaypointActionOperatorAircraftControl::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::AircraftControlActionType WaypointActionOperatorAircraftControl::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorAircraftControl.action_type)
  return static_cast< ::dji::waypointv2::AircraftControlActionType >(action_type_);
}
inline void WaypointActionOperatorAircraftControl::set_action_type(::dji::waypointv2::AircraftControlActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorAircraftControl.action_type)
}

// .dji.waypointv2.ActuatorAircraftControlRotateYawParam rotate_yaw_param = 2;
inline bool WaypointActionOperatorAircraftControl::has_rotate_yaw_param() const {
  return this != internal_default_instance() && rotate_yaw_param_ != NULL;
}
inline void WaypointActionOperatorAircraftControl::clear_rotate_yaw_param() {
  if (GetArenaNoVirtual() == NULL && rotate_yaw_param_ != NULL) {
    delete rotate_yaw_param_;
  }
  rotate_yaw_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorAircraftControlRotateYawParam& WaypointActionOperatorAircraftControl::rotate_yaw_param() const {
  const ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* p = rotate_yaw_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorAircraftControl.rotate_yaw_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorAircraftControlRotateYawParam*>(
      &::dji::waypointv2::_ActuatorAircraftControlRotateYawParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* WaypointActionOperatorAircraftControl::release_rotate_yaw_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorAircraftControl.rotate_yaw_param)
  
  ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* temp = rotate_yaw_param_;
  rotate_yaw_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorAircraftControlRotateYawParam* WaypointActionOperatorAircraftControl::mutable_rotate_yaw_param() {
  
  if (rotate_yaw_param_ == NULL) {
    rotate_yaw_param_ = new ::dji::waypointv2::ActuatorAircraftControlRotateYawParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorAircraftControl.rotate_yaw_param)
  return rotate_yaw_param_;
}
inline void WaypointActionOperatorAircraftControl::set_allocated_rotate_yaw_param(::dji::waypointv2::ActuatorAircraftControlRotateYawParam* rotate_yaw_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotate_yaw_param_;
  }
  if (rotate_yaw_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotate_yaw_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, rotate_yaw_param, submessage_arena);
    }
    
  } else {
    
  }
  rotate_yaw_param_ = rotate_yaw_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorAircraftControl.rotate_yaw_param)
}

// .dji.waypointv2.ActuatorAircraftControlStartStopFlyParam start_stop_fly_param = 3;
inline bool WaypointActionOperatorAircraftControl::has_start_stop_fly_param() const {
  return this != internal_default_instance() && start_stop_fly_param_ != NULL;
}
inline void WaypointActionOperatorAircraftControl::clear_start_stop_fly_param() {
  if (GetArenaNoVirtual() == NULL && start_stop_fly_param_ != NULL) {
    delete start_stop_fly_param_;
  }
  start_stop_fly_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam& WaypointActionOperatorAircraftControl::start_stop_fly_param() const {
  const ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* p = start_stop_fly_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorAircraftControl.start_stop_fly_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam*>(
      &::dji::waypointv2::_ActuatorAircraftControlStartStopFlyParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* WaypointActionOperatorAircraftControl::release_start_stop_fly_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorAircraftControl.start_stop_fly_param)
  
  ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* temp = start_stop_fly_param_;
  start_stop_fly_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* WaypointActionOperatorAircraftControl::mutable_start_stop_fly_param() {
  
  if (start_stop_fly_param_ == NULL) {
    start_stop_fly_param_ = new ::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorAircraftControl.start_stop_fly_param)
  return start_stop_fly_param_;
}
inline void WaypointActionOperatorAircraftControl::set_allocated_start_stop_fly_param(::dji::waypointv2::ActuatorAircraftControlStartStopFlyParam* start_stop_fly_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_stop_fly_param_;
  }
  if (start_stop_fly_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_stop_fly_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, start_stop_fly_param, submessage_arena);
    }
    
  } else {
    
  }
  start_stop_fly_param_ = start_stop_fly_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorAircraftControl.start_stop_fly_param)
}

// -------------------------------------------------------------------

// WaypointActionOperatorPayload

// .dji.waypointv2.PayloadControlActionType action_type = 1;
inline void WaypointActionOperatorPayload::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::PayloadControlActionType WaypointActionOperatorPayload::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorPayload.action_type)
  return static_cast< ::dji::waypointv2::PayloadControlActionType >(action_type_);
}
inline void WaypointActionOperatorPayload::set_action_type(::dji::waypointv2::PayloadControlActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorPayload.action_type)
}

// .dji.waypointv2.ActuatorPayloadControlOperatingParam operating_param = 2;
inline bool WaypointActionOperatorPayload::has_operating_param() const {
  return this != internal_default_instance() && operating_param_ != NULL;
}
inline void WaypointActionOperatorPayload::clear_operating_param() {
  if (GetArenaNoVirtual() == NULL && operating_param_ != NULL) {
    delete operating_param_;
  }
  operating_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorPayloadControlOperatingParam& WaypointActionOperatorPayload::operating_param() const {
  const ::dji::waypointv2::ActuatorPayloadControlOperatingParam* p = operating_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorPayload.operating_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorPayloadControlOperatingParam*>(
      &::dji::waypointv2::_ActuatorPayloadControlOperatingParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorPayloadControlOperatingParam* WaypointActionOperatorPayload::release_operating_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorPayload.operating_param)
  
  ::dji::waypointv2::ActuatorPayloadControlOperatingParam* temp = operating_param_;
  operating_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorPayloadControlOperatingParam* WaypointActionOperatorPayload::mutable_operating_param() {
  
  if (operating_param_ == NULL) {
    operating_param_ = new ::dji::waypointv2::ActuatorPayloadControlOperatingParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorPayload.operating_param)
  return operating_param_;
}
inline void WaypointActionOperatorPayload::set_allocated_operating_param(::dji::waypointv2::ActuatorPayloadControlOperatingParam* operating_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operating_param_;
  }
  if (operating_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operating_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, operating_param, submessage_arena);
    }
    
  } else {
    
  }
  operating_param_ = operating_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorPayload.operating_param)
}

// -------------------------------------------------------------------

// WaypointActionActuator

// .dji.waypointv2.WaypointActionActuatorType actuator_type = 1;
inline void WaypointActionActuator::clear_actuator_type() {
  actuator_type_ = 0;
}
inline ::dji::waypointv2::WaypointActionActuatorType WaypointActionActuator::actuator_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.actuator_type)
  return static_cast< ::dji::waypointv2::WaypointActionActuatorType >(actuator_type_);
}
inline void WaypointActionActuator::set_actuator_type(::dji::waypointv2::WaypointActionActuatorType value) {
  
  actuator_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionActuator.actuator_type)
}

// uint32 actuator_index = 2;
inline void WaypointActionActuator::clear_actuator_index() {
  actuator_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionActuator::actuator_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.actuator_index)
  return actuator_index_;
}
inline void WaypointActionActuator::set_actuator_index(::dji::protobuf::uint32 value) {
  
  actuator_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionActuator.actuator_index)
}

// uint32 sub_actuator_index = 3;
inline void WaypointActionActuator::clear_sub_actuator_index() {
  sub_actuator_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionActuator::sub_actuator_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.sub_actuator_index)
  return sub_actuator_index_;
}
inline void WaypointActionActuator::set_sub_actuator_index(::dji::protobuf::uint32 value) {
  
  sub_actuator_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionActuator.sub_actuator_index)
}

// .dji.waypointv2.WaypointActionOperatorSpray spray_operator = 4;
inline bool WaypointActionActuator::has_spray_operator() const {
  return this != internal_default_instance() && spray_operator_ != NULL;
}
inline void WaypointActionActuator::clear_spray_operator() {
  if (GetArenaNoVirtual() == NULL && spray_operator_ != NULL) {
    delete spray_operator_;
  }
  spray_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorSpray& WaypointActionActuator::spray_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorSpray* p = spray_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.spray_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorSpray*>(
      &::dji::waypointv2::_WaypointActionOperatorSpray_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorSpray* WaypointActionActuator::release_spray_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.spray_operator)
  
  ::dji::waypointv2::WaypointActionOperatorSpray* temp = spray_operator_;
  spray_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorSpray* WaypointActionActuator::mutable_spray_operator() {
  
  if (spray_operator_ == NULL) {
    spray_operator_ = new ::dji::waypointv2::WaypointActionOperatorSpray;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.spray_operator)
  return spray_operator_;
}
inline void WaypointActionActuator::set_allocated_spray_operator(::dji::waypointv2::WaypointActionOperatorSpray* spray_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spray_operator_;
  }
  if (spray_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spray_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, spray_operator, submessage_arena);
    }
    
  } else {
    
  }
  spray_operator_ = spray_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.spray_operator)
}

// .dji.waypointv2.WaypointActionOperatorCamera camera_operator = 5;
inline bool WaypointActionActuator::has_camera_operator() const {
  return this != internal_default_instance() && camera_operator_ != NULL;
}
inline void WaypointActionActuator::clear_camera_operator() {
  if (GetArenaNoVirtual() == NULL && camera_operator_ != NULL) {
    delete camera_operator_;
  }
  camera_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorCamera& WaypointActionActuator::camera_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorCamera* p = camera_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.camera_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorCamera*>(
      &::dji::waypointv2::_WaypointActionOperatorCamera_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorCamera* WaypointActionActuator::release_camera_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.camera_operator)
  
  ::dji::waypointv2::WaypointActionOperatorCamera* temp = camera_operator_;
  camera_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorCamera* WaypointActionActuator::mutable_camera_operator() {
  
  if (camera_operator_ == NULL) {
    camera_operator_ = new ::dji::waypointv2::WaypointActionOperatorCamera;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.camera_operator)
  return camera_operator_;
}
inline void WaypointActionActuator::set_allocated_camera_operator(::dji::waypointv2::WaypointActionOperatorCamera* camera_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_operator_;
  }
  if (camera_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, camera_operator, submessage_arena);
    }
    
  } else {
    
  }
  camera_operator_ = camera_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.camera_operator)
}

// .dji.waypointv2.WaypointActionOperatorGimbal gimbal_operator = 6;
inline bool WaypointActionActuator::has_gimbal_operator() const {
  return this != internal_default_instance() && gimbal_operator_ != NULL;
}
inline void WaypointActionActuator::clear_gimbal_operator() {
  if (GetArenaNoVirtual() == NULL && gimbal_operator_ != NULL) {
    delete gimbal_operator_;
  }
  gimbal_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorGimbal& WaypointActionActuator::gimbal_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorGimbal* p = gimbal_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.gimbal_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorGimbal*>(
      &::dji::waypointv2::_WaypointActionOperatorGimbal_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorGimbal* WaypointActionActuator::release_gimbal_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.gimbal_operator)
  
  ::dji::waypointv2::WaypointActionOperatorGimbal* temp = gimbal_operator_;
  gimbal_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorGimbal* WaypointActionActuator::mutable_gimbal_operator() {
  
  if (gimbal_operator_ == NULL) {
    gimbal_operator_ = new ::dji::waypointv2::WaypointActionOperatorGimbal;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.gimbal_operator)
  return gimbal_operator_;
}
inline void WaypointActionActuator::set_allocated_gimbal_operator(::dji::waypointv2::WaypointActionOperatorGimbal* gimbal_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gimbal_operator_;
  }
  if (gimbal_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gimbal_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, gimbal_operator, submessage_arena);
    }
    
  } else {
    
  }
  gimbal_operator_ = gimbal_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.gimbal_operator)
}

// .dji.waypointv2.WaypointActionOperatorAircraftControl aircraft_control_operator = 7;
inline bool WaypointActionActuator::has_aircraft_control_operator() const {
  return this != internal_default_instance() && aircraft_control_operator_ != NULL;
}
inline void WaypointActionActuator::clear_aircraft_control_operator() {
  if (GetArenaNoVirtual() == NULL && aircraft_control_operator_ != NULL) {
    delete aircraft_control_operator_;
  }
  aircraft_control_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorAircraftControl& WaypointActionActuator::aircraft_control_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorAircraftControl* p = aircraft_control_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.aircraft_control_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorAircraftControl*>(
      &::dji::waypointv2::_WaypointActionOperatorAircraftControl_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorAircraftControl* WaypointActionActuator::release_aircraft_control_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.aircraft_control_operator)
  
  ::dji::waypointv2::WaypointActionOperatorAircraftControl* temp = aircraft_control_operator_;
  aircraft_control_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorAircraftControl* WaypointActionActuator::mutable_aircraft_control_operator() {
  
  if (aircraft_control_operator_ == NULL) {
    aircraft_control_operator_ = new ::dji::waypointv2::WaypointActionOperatorAircraftControl;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.aircraft_control_operator)
  return aircraft_control_operator_;
}
inline void WaypointActionActuator::set_allocated_aircraft_control_operator(::dji::waypointv2::WaypointActionOperatorAircraftControl* aircraft_control_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete aircraft_control_operator_;
  }
  if (aircraft_control_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aircraft_control_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, aircraft_control_operator, submessage_arena);
    }
    
  } else {
    
  }
  aircraft_control_operator_ = aircraft_control_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.aircraft_control_operator)
}

// .dji.waypointv2.WaypointActionOperatorPayload payload_control_operator = 8;
inline bool WaypointActionActuator::has_payload_control_operator() const {
  return this != internal_default_instance() && payload_control_operator_ != NULL;
}
inline void WaypointActionActuator::clear_payload_control_operator() {
  if (GetArenaNoVirtual() == NULL && payload_control_operator_ != NULL) {
    delete payload_control_operator_;
  }
  payload_control_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorPayload& WaypointActionActuator::payload_control_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorPayload* p = payload_control_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.payload_control_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorPayload*>(
      &::dji::waypointv2::_WaypointActionOperatorPayload_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorPayload* WaypointActionActuator::release_payload_control_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.payload_control_operator)
  
  ::dji::waypointv2::WaypointActionOperatorPayload* temp = payload_control_operator_;
  payload_control_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorPayload* WaypointActionActuator::mutable_payload_control_operator() {
  
  if (payload_control_operator_ == NULL) {
    payload_control_operator_ = new ::dji::waypointv2::WaypointActionOperatorPayload;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.payload_control_operator)
  return payload_control_operator_;
}
inline void WaypointActionActuator::set_allocated_payload_control_operator(::dji::waypointv2::WaypointActionOperatorPayload* payload_control_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete payload_control_operator_;
  }
  if (payload_control_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload_control_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, payload_control_operator, submessage_arena);
    }
    
  } else {
    
  }
  payload_control_operator_ = payload_control_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.payload_control_operator)
}

// .dji.waypointv2.WaypointActionOperatorNavigation navigation_operator = 9;
inline bool WaypointActionActuator::has_navigation_operator() const {
  return this != internal_default_instance() && navigation_operator_ != NULL;
}
inline void WaypointActionActuator::clear_navigation_operator() {
  if (GetArenaNoVirtual() == NULL && navigation_operator_ != NULL) {
    delete navigation_operator_;
  }
  navigation_operator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionOperatorNavigation& WaypointActionActuator::navigation_operator() const {
  const ::dji::waypointv2::WaypointActionOperatorNavigation* p = navigation_operator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionActuator.navigation_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionOperatorNavigation*>(
      &::dji::waypointv2::_WaypointActionOperatorNavigation_default_instance_);
}
inline ::dji::waypointv2::WaypointActionOperatorNavigation* WaypointActionActuator::release_navigation_operator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionActuator.navigation_operator)
  
  ::dji::waypointv2::WaypointActionOperatorNavigation* temp = navigation_operator_;
  navigation_operator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionOperatorNavigation* WaypointActionActuator::mutable_navigation_operator() {
  
  if (navigation_operator_ == NULL) {
    navigation_operator_ = new ::dji::waypointv2::WaypointActionOperatorNavigation;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionActuator.navigation_operator)
  return navigation_operator_;
}
inline void WaypointActionActuator::set_allocated_navigation_operator(::dji::waypointv2::WaypointActionOperatorNavigation* navigation_operator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete navigation_operator_;
  }
  if (navigation_operator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      navigation_operator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, navigation_operator, submessage_arena);
    }
    
  } else {
    
  }
  navigation_operator_ = navigation_operator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionActuator.navigation_operator)
}

// -------------------------------------------------------------------

// WaypointActionConfig

// uint32 action_id = 1;
inline void WaypointActionConfig::clear_action_id() {
  action_id_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointActionConfig::action_id() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionConfig.action_id)
  return action_id_;
}
inline void WaypointActionConfig::set_action_id(::dji::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionConfig.action_id)
}

// .dji.waypointv2.WaypointActionTrigger trigger = 2;
inline bool WaypointActionConfig::has_trigger() const {
  return this != internal_default_instance() && trigger_ != NULL;
}
inline void WaypointActionConfig::clear_trigger() {
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionTrigger& WaypointActionConfig::trigger() const {
  const ::dji::waypointv2::WaypointActionTrigger* p = trigger_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionConfig.trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionTrigger*>(
      &::dji::waypointv2::_WaypointActionTrigger_default_instance_);
}
inline ::dji::waypointv2::WaypointActionTrigger* WaypointActionConfig::release_trigger() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionConfig.trigger)
  
  ::dji::waypointv2::WaypointActionTrigger* temp = trigger_;
  trigger_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionTrigger* WaypointActionConfig::mutable_trigger() {
  
  if (trigger_ == NULL) {
    trigger_ = new ::dji::waypointv2::WaypointActionTrigger;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionConfig.trigger)
  return trigger_;
}
inline void WaypointActionConfig::set_allocated_trigger(::dji::waypointv2::WaypointActionTrigger* trigger) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trigger_;
  }
  if (trigger) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trigger = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionConfig.trigger)
}

// .dji.waypointv2.WaypointActionActuator actuator = 3;
inline bool WaypointActionConfig::has_actuator() const {
  return this != internal_default_instance() && actuator_ != NULL;
}
inline void WaypointActionConfig::clear_actuator() {
  if (GetArenaNoVirtual() == NULL && actuator_ != NULL) {
    delete actuator_;
  }
  actuator_ = NULL;
}
inline const ::dji::waypointv2::WaypointActionActuator& WaypointActionConfig::actuator() const {
  const ::dji::waypointv2::WaypointActionActuator* p = actuator_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionConfig.actuator)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointActionActuator*>(
      &::dji::waypointv2::_WaypointActionActuator_default_instance_);
}
inline ::dji::waypointv2::WaypointActionActuator* WaypointActionConfig::release_actuator() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionConfig.actuator)
  
  ::dji::waypointv2::WaypointActionActuator* temp = actuator_;
  actuator_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointActionActuator* WaypointActionConfig::mutable_actuator() {
  
  if (actuator_ == NULL) {
    actuator_ = new ::dji::waypointv2::WaypointActionActuator;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionConfig.actuator)
  return actuator_;
}
inline void WaypointActionConfig::set_allocated_actuator(::dji::waypointv2::WaypointActionActuator* actuator) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actuator_;
  }
  if (actuator) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actuator = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, actuator, submessage_arena);
    }
    
  } else {
    
  }
  actuator_ = actuator;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionConfig.actuator)
}

// -------------------------------------------------------------------

// TrajectoryReplayOperationData

// uint32 newest_waypoint_count = 1;
inline void TrajectoryReplayOperationData::clear_newest_waypoint_count() {
  newest_waypoint_count_ = 0u;
}
inline ::dji::protobuf::uint32 TrajectoryReplayOperationData::newest_waypoint_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayOperationData.newest_waypoint_count)
  return newest_waypoint_count_;
}
inline void TrajectoryReplayOperationData::set_newest_waypoint_count(::dji::protobuf::uint32 value) {
  
  newest_waypoint_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayOperationData.newest_waypoint_count)
}

// uint32 newest_action_count = 2;
inline void TrajectoryReplayOperationData::clear_newest_action_count() {
  newest_action_count_ = 0u;
}
inline ::dji::protobuf::uint32 TrajectoryReplayOperationData::newest_action_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayOperationData.newest_action_count)
  return newest_action_count_;
}
inline void TrajectoryReplayOperationData::set_newest_action_count(::dji::protobuf::uint32 value) {
  
  newest_action_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayOperationData.newest_action_count)
}

// int32 error_code = 3;
inline void TrajectoryReplayOperationData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 TrajectoryReplayOperationData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayOperationData.error_code)
  return error_code_;
}
inline void TrajectoryReplayOperationData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayOperationData.error_code)
}

// .dji.waypointv2.WaypointItem new_waypoint = 4;
inline bool TrajectoryReplayOperationData::has_new_waypoint() const {
  return this != internal_default_instance() && new_waypoint_ != NULL;
}
inline void TrajectoryReplayOperationData::clear_new_waypoint() {
  if (GetArenaNoVirtual() == NULL && new_waypoint_ != NULL) {
    delete new_waypoint_;
  }
  new_waypoint_ = NULL;
}
inline const ::dji::waypointv2::WaypointItem& TrajectoryReplayOperationData::new_waypoint() const {
  const ::dji::waypointv2::WaypointItem* p = new_waypoint_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayOperationData.new_waypoint)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::WaypointItem*>(
      &::dji::waypointv2::_WaypointItem_default_instance_);
}
inline ::dji::waypointv2::WaypointItem* TrajectoryReplayOperationData::release_new_waypoint() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.TrajectoryReplayOperationData.new_waypoint)
  
  ::dji::waypointv2::WaypointItem* temp = new_waypoint_;
  new_waypoint_ = NULL;
  return temp;
}
inline ::dji::waypointv2::WaypointItem* TrajectoryReplayOperationData::mutable_new_waypoint() {
  
  if (new_waypoint_ == NULL) {
    new_waypoint_ = new ::dji::waypointv2::WaypointItem;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.TrajectoryReplayOperationData.new_waypoint)
  return new_waypoint_;
}
inline void TrajectoryReplayOperationData::set_allocated_new_waypoint(::dji::waypointv2::WaypointItem* new_waypoint) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_waypoint_;
  }
  if (new_waypoint) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_waypoint = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, new_waypoint, submessage_arena);
    }
    
  } else {
    
  }
  new_waypoint_ = new_waypoint;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.TrajectoryReplayOperationData.new_waypoint)
}

// repeated .dji.waypointv2.WaypointActionConfig waypoint_list = 5;
inline int TrajectoryReplayOperationData::waypoint_list_size() const {
  return waypoint_list_.size();
}
inline void TrajectoryReplayOperationData::clear_waypoint_list() {
  waypoint_list_.Clear();
}
inline const ::dji::waypointv2::WaypointActionConfig& TrajectoryReplayOperationData::waypoint_list(int index) const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayOperationData.waypoint_list)
  return waypoint_list_.Get(index);
}
inline ::dji::waypointv2::WaypointActionConfig* TrajectoryReplayOperationData::mutable_waypoint_list(int index) {
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.TrajectoryReplayOperationData.waypoint_list)
  return waypoint_list_.Mutable(index);
}
inline ::dji::waypointv2::WaypointActionConfig* TrajectoryReplayOperationData::add_waypoint_list() {
  // @@protoc_insertion_point(field_add:dji.waypointv2.TrajectoryReplayOperationData.waypoint_list)
  return waypoint_list_.Add();
}
inline ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointActionConfig >*
TrajectoryReplayOperationData::mutable_waypoint_list() {
  // @@protoc_insertion_point(field_mutable_list:dji.waypointv2.TrajectoryReplayOperationData.waypoint_list)
  return &waypoint_list_;
}
inline const ::dji::protobuf::RepeatedPtrField< ::dji::waypointv2::WaypointActionConfig >&
TrajectoryReplayOperationData::waypoint_list() const {
  // @@protoc_insertion_point(field_list:dji.waypointv2.TrajectoryReplayOperationData.waypoint_list)
  return waypoint_list_;
}

// -------------------------------------------------------------------

// ErrorData

// int32 error_code = 1;
inline void ErrorData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 ErrorData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ErrorData.error_code)
  return error_code_;
}
inline void ErrorData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ErrorData.error_code)
}

// -------------------------------------------------------------------

// WaypointUploadData

// bool is_waypoint_summary_uploaded = 1;
inline void WaypointUploadData::clear_is_waypoint_summary_uploaded() {
  is_waypoint_summary_uploaded_ = false;
}
inline bool WaypointUploadData::is_waypoint_summary_uploaded() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointUploadData.is_waypoint_summary_uploaded)
  return is_waypoint_summary_uploaded_;
}
inline void WaypointUploadData::set_is_waypoint_summary_uploaded(bool value) {
  
  is_waypoint_summary_uploaded_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointUploadData.is_waypoint_summary_uploaded)
}

// int32 uploaded_waypoint_index = 2;
inline void WaypointUploadData::clear_uploaded_waypoint_index() {
  uploaded_waypoint_index_ = 0;
}
inline ::dji::protobuf::int32 WaypointUploadData::uploaded_waypoint_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointUploadData.uploaded_waypoint_index)
  return uploaded_waypoint_index_;
}
inline void WaypointUploadData::set_uploaded_waypoint_index(::dji::protobuf::int32 value) {
  
  uploaded_waypoint_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointUploadData.uploaded_waypoint_index)
}

// uint32 total_waypoint_count = 3;
inline void WaypointUploadData::clear_total_waypoint_count() {
  total_waypoint_count_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointUploadData::total_waypoint_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointUploadData.total_waypoint_count)
  return total_waypoint_count_;
}
inline void WaypointUploadData::set_total_waypoint_count(::dji::protobuf::uint32 value) {
  
  total_waypoint_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointUploadData.total_waypoint_count)
}

// int32 error_code = 4;
inline void WaypointUploadData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 WaypointUploadData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointUploadData.error_code)
  return error_code_;
}
inline void WaypointUploadData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointUploadData.error_code)
}

// -------------------------------------------------------------------

// ActionUploadData

// uint32 uploaded_action_index = 1;
inline void ActionUploadData::clear_uploaded_action_index() {
  uploaded_action_index_ = 0u;
}
inline ::dji::protobuf::uint32 ActionUploadData::uploaded_action_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionUploadData.uploaded_action_index)
  return uploaded_action_index_;
}
inline void ActionUploadData::set_uploaded_action_index(::dji::protobuf::uint32 value) {
  
  uploaded_action_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionUploadData.uploaded_action_index)
}

// int32 total_action_count = 2;
inline void ActionUploadData::clear_total_action_count() {
  total_action_count_ = 0;
}
inline ::dji::protobuf::int32 ActionUploadData::total_action_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionUploadData.total_action_count)
  return total_action_count_;
}
inline void ActionUploadData::set_total_action_count(::dji::protobuf::int32 value) {
  
  total_action_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionUploadData.total_action_count)
}

// int32 error_code = 3;
inline void ActionUploadData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 ActionUploadData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionUploadData.error_code)
  return error_code_;
}
inline void ActionUploadData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionUploadData.error_code)
}

// -------------------------------------------------------------------

// WaypointDownloadData

// bool is_summary_downloaded = 1;
inline void WaypointDownloadData::clear_is_summary_downloaded() {
  is_summary_downloaded_ = false;
}
inline bool WaypointDownloadData::is_summary_downloaded() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointDownloadData.is_summary_downloaded)
  return is_summary_downloaded_;
}
inline void WaypointDownloadData::set_is_summary_downloaded(bool value) {
  
  is_summary_downloaded_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointDownloadData.is_summary_downloaded)
}

// uint32 downloaded_waypoint_index = 2;
inline void WaypointDownloadData::clear_downloaded_waypoint_index() {
  downloaded_waypoint_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointDownloadData::downloaded_waypoint_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointDownloadData.downloaded_waypoint_index)
  return downloaded_waypoint_index_;
}
inline void WaypointDownloadData::set_downloaded_waypoint_index(::dji::protobuf::uint32 value) {
  
  downloaded_waypoint_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointDownloadData.downloaded_waypoint_index)
}

// uint32 total_waypoint_count = 3;
inline void WaypointDownloadData::clear_total_waypoint_count() {
  total_waypoint_count_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointDownloadData::total_waypoint_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointDownloadData.total_waypoint_count)
  return total_waypoint_count_;
}
inline void WaypointDownloadData::set_total_waypoint_count(::dji::protobuf::uint32 value) {
  
  total_waypoint_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointDownloadData.total_waypoint_count)
}

// int32 error_code = 4;
inline void WaypointDownloadData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 WaypointDownloadData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointDownloadData.error_code)
  return error_code_;
}
inline void WaypointDownloadData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointDownloadData.error_code)
}

// -------------------------------------------------------------------

// ActionDownloadData

// uint32 downloaded_action_index = 1;
inline void ActionDownloadData::clear_downloaded_action_index() {
  downloaded_action_index_ = 0u;
}
inline ::dji::protobuf::uint32 ActionDownloadData::downloaded_action_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionDownloadData.downloaded_action_index)
  return downloaded_action_index_;
}
inline void ActionDownloadData::set_downloaded_action_index(::dji::protobuf::uint32 value) {
  
  downloaded_action_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionDownloadData.downloaded_action_index)
}

// uint32 total_action_count = 2;
inline void ActionDownloadData::clear_total_action_count() {
  total_action_count_ = 0u;
}
inline ::dji::protobuf::uint32 ActionDownloadData::total_action_count() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionDownloadData.total_action_count)
  return total_action_count_;
}
inline void ActionDownloadData::set_total_action_count(::dji::protobuf::uint32 value) {
  
  total_action_count_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionDownloadData.total_action_count)
}

// int32 error_code = 3;
inline void ActionDownloadData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 ActionDownloadData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionDownloadData.error_code)
  return error_code_;
}
inline void ActionDownloadData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionDownloadData.error_code)
}

// -------------------------------------------------------------------

// WaypointExecuteData

// uint32 target_waypoint_index = 1;
inline void WaypointExecuteData::clear_target_waypoint_index() {
  target_waypoint_index_ = 0u;
}
inline ::dji::protobuf::uint32 WaypointExecuteData::target_waypoint_index() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointExecuteData.target_waypoint_index)
  return target_waypoint_index_;
}
inline void WaypointExecuteData::set_target_waypoint_index(::dji::protobuf::uint32 value) {
  
  target_waypoint_index_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointExecuteData.target_waypoint_index)
}

// bool is_waypoint_reached = 2;
inline void WaypointExecuteData::clear_is_waypoint_reached() {
  is_waypoint_reached_ = false;
}
inline bool WaypointExecuteData::is_waypoint_reached() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointExecuteData.is_waypoint_reached)
  return is_waypoint_reached_;
}
inline void WaypointExecuteData::set_is_waypoint_reached(bool value) {
  
  is_waypoint_reached_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointExecuteData.is_waypoint_reached)
}

// .dji.waypointv2.ExecuteState exec_state = 3;
inline void WaypointExecuteData::clear_exec_state() {
  exec_state_ = 0;
}
inline ::dji::waypointv2::ExecuteState WaypointExecuteData::exec_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointExecuteData.exec_state)
  return static_cast< ::dji::waypointv2::ExecuteState >(exec_state_);
}
inline void WaypointExecuteData::set_exec_state(::dji::waypointv2::ExecuteState value) {
  
  exec_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointExecuteData.exec_state)
}

// int32 error_code = 4;
inline void WaypointExecuteData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 WaypointExecuteData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointExecuteData.error_code)
  return error_code_;
}
inline void WaypointExecuteData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointExecuteData.error_code)
}

// -------------------------------------------------------------------

// ActionExecuteData

// uint32 action_id = 1;
inline void ActionExecuteData::clear_action_id() {
  action_id_ = 0u;
}
inline ::dji::protobuf::uint32 ActionExecuteData::action_id() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionExecuteData.action_id)
  return action_id_;
}
inline void ActionExecuteData::set_action_id(::dji::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionExecuteData.action_id)
}

// bool result = 2;
inline void ActionExecuteData::clear_result() {
  result_ = false;
}
inline bool ActionExecuteData::result() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionExecuteData.result)
  return result_;
}
inline void ActionExecuteData::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionExecuteData.result)
}

// int32 error_code = 3;
inline void ActionExecuteData::clear_error_code() {
  error_code_ = 0;
}
inline ::dji::protobuf::int32 ActionExecuteData::error_code() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionExecuteData.error_code)
  return error_code_;
}
inline void ActionExecuteData::set_error_code(::dji::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionExecuteData.error_code)
}

// -------------------------------------------------------------------

// WaypointStateChangeInformation

// .dji.waypointv2.AbstractionState pre_state = 1;
inline void WaypointStateChangeInformation::clear_pre_state() {
  pre_state_ = 0;
}
inline ::dji::waypointv2::AbstractionState WaypointStateChangeInformation::pre_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointStateChangeInformation.pre_state)
  return static_cast< ::dji::waypointv2::AbstractionState >(pre_state_);
}
inline void WaypointStateChangeInformation::set_pre_state(::dji::waypointv2::AbstractionState value) {
  
  pre_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointStateChangeInformation.pre_state)
}

// .dji.waypointv2.AbstractionState cur_state = 2;
inline void WaypointStateChangeInformation::clear_cur_state() {
  cur_state_ = 0;
}
inline ::dji::waypointv2::AbstractionState WaypointStateChangeInformation::cur_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointStateChangeInformation.cur_state)
  return static_cast< ::dji::waypointv2::AbstractionState >(cur_state_);
}
inline void WaypointStateChangeInformation::set_cur_state(::dji::waypointv2::AbstractionState value) {
  
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointStateChangeInformation.cur_state)
}

// .dji.waypointv2.AbstractionEvent event = 3;
inline void WaypointStateChangeInformation::clear_event() {
  event_ = 0;
}
inline ::dji::waypointv2::AbstractionEvent WaypointStateChangeInformation::event() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointStateChangeInformation.event)
  return static_cast< ::dji::waypointv2::AbstractionEvent >(event_);
}
inline void WaypointStateChangeInformation::set_event(::dji::waypointv2::AbstractionEvent value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointStateChangeInformation.event)
}

// bytes data = 4;
inline void WaypointStateChangeInformation::clear_data() {
  data_.ClearToEmptyNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WaypointStateChangeInformation::data() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointStateChangeInformation.data)
  return data_.GetNoArena();
}
inline void WaypointStateChangeInformation::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointStateChangeInformation.data)
}
#if LANG_CXX11
inline void WaypointStateChangeInformation::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dji.waypointv2.WaypointStateChangeInformation.data)
}
#endif
inline void WaypointStateChangeInformation::set_data(const char* value) {
  DJI_DCHECK(value != NULL);
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dji.waypointv2.WaypointStateChangeInformation.data)
}
inline void WaypointStateChangeInformation::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dji.waypointv2.WaypointStateChangeInformation.data)
}
inline ::std::string* WaypointStateChangeInformation::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointStateChangeInformation.data)
  return data_.MutableNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WaypointStateChangeInformation::release_data() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointStateChangeInformation.data)
  
  return data_.ReleaseNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WaypointStateChangeInformation::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointStateChangeInformation.data)
}

// -------------------------------------------------------------------

// ActionStateChangeInformation

// .dji.waypointv2.ActionState pre_state = 1;
inline void ActionStateChangeInformation::clear_pre_state() {
  pre_state_ = 0;
}
inline ::dji::waypointv2::ActionState ActionStateChangeInformation::pre_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionStateChangeInformation.pre_state)
  return static_cast< ::dji::waypointv2::ActionState >(pre_state_);
}
inline void ActionStateChangeInformation::set_pre_state(::dji::waypointv2::ActionState value) {
  
  pre_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionStateChangeInformation.pre_state)
}

// .dji.waypointv2.ActionState cur_state = 2;
inline void ActionStateChangeInformation::clear_cur_state() {
  cur_state_ = 0;
}
inline ::dji::waypointv2::ActionState ActionStateChangeInformation::cur_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionStateChangeInformation.cur_state)
  return static_cast< ::dji::waypointv2::ActionState >(cur_state_);
}
inline void ActionStateChangeInformation::set_cur_state(::dji::waypointv2::ActionState value) {
  
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionStateChangeInformation.cur_state)
}

// .dji.waypointv2.ActionEvent event = 3;
inline void ActionStateChangeInformation::clear_event() {
  event_ = 0;
}
inline ::dji::waypointv2::ActionEvent ActionStateChangeInformation::event() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionStateChangeInformation.event)
  return static_cast< ::dji::waypointv2::ActionEvent >(event_);
}
inline void ActionStateChangeInformation::set_event(::dji::waypointv2::ActionEvent value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionStateChangeInformation.event)
}

// bytes data = 4;
inline void ActionStateChangeInformation::clear_data() {
  data_.ClearToEmptyNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionStateChangeInformation::data() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActionStateChangeInformation.data)
  return data_.GetNoArena();
}
inline void ActionStateChangeInformation::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActionStateChangeInformation.data)
}
#if LANG_CXX11
inline void ActionStateChangeInformation::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dji.waypointv2.ActionStateChangeInformation.data)
}
#endif
inline void ActionStateChangeInformation::set_data(const char* value) {
  DJI_DCHECK(value != NULL);
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dji.waypointv2.ActionStateChangeInformation.data)
}
inline void ActionStateChangeInformation::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dji.waypointv2.ActionStateChangeInformation.data)
}
inline ::std::string* ActionStateChangeInformation::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActionStateChangeInformation.data)
  return data_.MutableNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionStateChangeInformation::release_data() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActionStateChangeInformation.data)
  
  return data_.ReleaseNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionStateChangeInformation::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActionStateChangeInformation.data)
}

// -------------------------------------------------------------------

// TrajectoryReplayStateChangeInformation

// .dji.waypointv2.TrajectoryReplayState pre_state = 1;
inline void TrajectoryReplayStateChangeInformation::clear_pre_state() {
  pre_state_ = 0;
}
inline ::dji::waypointv2::TrajectoryReplayState TrajectoryReplayStateChangeInformation::pre_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayStateChangeInformation.pre_state)
  return static_cast< ::dji::waypointv2::TrajectoryReplayState >(pre_state_);
}
inline void TrajectoryReplayStateChangeInformation::set_pre_state(::dji::waypointv2::TrajectoryReplayState value) {
  
  pre_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayStateChangeInformation.pre_state)
}

// .dji.waypointv2.TrajectoryReplayState cur_state = 2;
inline void TrajectoryReplayStateChangeInformation::clear_cur_state() {
  cur_state_ = 0;
}
inline ::dji::waypointv2::TrajectoryReplayState TrajectoryReplayStateChangeInformation::cur_state() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayStateChangeInformation.cur_state)
  return static_cast< ::dji::waypointv2::TrajectoryReplayState >(cur_state_);
}
inline void TrajectoryReplayStateChangeInformation::set_cur_state(::dji::waypointv2::TrajectoryReplayState value) {
  
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayStateChangeInformation.cur_state)
}

// .dji.waypointv2.TrajectoryReplayEvent event = 3;
inline void TrajectoryReplayStateChangeInformation::clear_event() {
  event_ = 0;
}
inline ::dji::waypointv2::TrajectoryReplayEvent TrajectoryReplayStateChangeInformation::event() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayStateChangeInformation.event)
  return static_cast< ::dji::waypointv2::TrajectoryReplayEvent >(event_);
}
inline void TrajectoryReplayStateChangeInformation::set_event(::dji::waypointv2::TrajectoryReplayEvent value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayStateChangeInformation.event)
}

// bytes data = 4;
inline void TrajectoryReplayStateChangeInformation::clear_data() {
  data_.ClearToEmptyNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrajectoryReplayStateChangeInformation::data() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
  return data_.GetNoArena();
}
inline void TrajectoryReplayStateChangeInformation::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
}
#if LANG_CXX11
inline void TrajectoryReplayStateChangeInformation::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
}
#endif
inline void TrajectoryReplayStateChangeInformation::set_data(const char* value) {
  DJI_DCHECK(value != NULL);
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
}
inline void TrajectoryReplayStateChangeInformation::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
}
inline ::std::string* TrajectoryReplayStateChangeInformation::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
  return data_.MutableNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrajectoryReplayStateChangeInformation::release_data() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
  
  return data_.ReleaseNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrajectoryReplayStateChangeInformation::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.TrajectoryReplayStateChangeInformation.data)
}

// -------------------------------------------------------------------

// Size

// float width = 1;
inline void Size::clear_width() {
  width_ = 0;
}
inline float Size::width() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.Size.width)
  return width_;
}
inline void Size::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.Size.width)
}

// float height = 2;
inline void Size::clear_height() {
  height_ = 0;
}
inline float Size::height() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.Size.height)
  return height_;
}
inline void Size::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.Size.height)
}

// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.Point.y)
}

// -------------------------------------------------------------------

// AccurateShootPhotoTargetRect

// .dji.waypointv2.Point position = 1;
inline bool AccurateShootPhotoTargetRect::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void AccurateShootPhotoTargetRect::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::dji::waypointv2::Point& AccurateShootPhotoTargetRect::position() const {
  const ::dji::waypointv2::Point* p = position_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoTargetRect.position)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::Point*>(
      &::dji::waypointv2::_Point_default_instance_);
}
inline ::dji::waypointv2::Point* AccurateShootPhotoTargetRect::release_position() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.AccurateShootPhotoTargetRect.position)
  
  ::dji::waypointv2::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::dji::waypointv2::Point* AccurateShootPhotoTargetRect::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::dji::waypointv2::Point;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.AccurateShootPhotoTargetRect.position)
  return position_;
}
inline void AccurateShootPhotoTargetRect::set_allocated_position(::dji::waypointv2::Point* position) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.AccurateShootPhotoTargetRect.position)
}

// .dji.waypointv2.Size size = 2;
inline bool AccurateShootPhotoTargetRect::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
inline void AccurateShootPhotoTargetRect::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
}
inline const ::dji::waypointv2::Size& AccurateShootPhotoTargetRect::size() const {
  const ::dji::waypointv2::Size* p = size_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoTargetRect.size)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::Size*>(
      &::dji::waypointv2::_Size_default_instance_);
}
inline ::dji::waypointv2::Size* AccurateShootPhotoTargetRect::release_size() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.AccurateShootPhotoTargetRect.size)
  
  ::dji::waypointv2::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline ::dji::waypointv2::Size* AccurateShootPhotoTargetRect::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::dji::waypointv2::Size;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.AccurateShootPhotoTargetRect.size)
  return size_;
}
inline void AccurateShootPhotoTargetRect::set_allocated_size(::dji::waypointv2::Size* size) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete size_;
  }
  if (size) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      size = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.AccurateShootPhotoTargetRect.size)
}

// -------------------------------------------------------------------

// AccurateShootPhotoCameraStateInformation

// uint32 focal_distance = 1;
inline void AccurateShootPhotoCameraStateInformation::clear_focal_distance() {
  focal_distance_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoCameraStateInformation::focal_distance() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoCameraStateInformation.focal_distance)
  return focal_distance_;
}
inline void AccurateShootPhotoCameraStateInformation::set_focal_distance(::dji::protobuf::uint32 value) {
  
  focal_distance_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoCameraStateInformation.focal_distance)
}

// uint32 AF_position = 2;
inline void AccurateShootPhotoCameraStateInformation::clear_af_position() {
  af_position_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoCameraStateInformation::af_position() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoCameraStateInformation.AF_position)
  return af_position_;
}
inline void AccurateShootPhotoCameraStateInformation::set_af_position(::dji::protobuf::uint32 value) {
  
  af_position_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoCameraStateInformation.AF_position)
}

// -------------------------------------------------------------------

// AccurateShootPhotoGimbalStateInformation

// float pitch = 1;
inline void AccurateShootPhotoGimbalStateInformation::clear_pitch() {
  pitch_ = 0;
}
inline float AccurateShootPhotoGimbalStateInformation::pitch() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.pitch)
  return pitch_;
}
inline void AccurateShootPhotoGimbalStateInformation::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.pitch)
}

// float roll = 2;
inline void AccurateShootPhotoGimbalStateInformation::clear_roll() {
  roll_ = 0;
}
inline float AccurateShootPhotoGimbalStateInformation::roll() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.roll)
  return roll_;
}
inline void AccurateShootPhotoGimbalStateInformation::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.roll)
}

// float yaw = 3;
inline void AccurateShootPhotoGimbalStateInformation::clear_yaw() {
  yaw_ = 0;
}
inline float AccurateShootPhotoGimbalStateInformation::yaw() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.yaw)
  return yaw_;
}
inline void AccurateShootPhotoGimbalStateInformation::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoGimbalStateInformation.yaw)
}

// -------------------------------------------------------------------

// AccurateShootPhotoDeviceInformation

// uint32 camera_type = 1;
inline void AccurateShootPhotoDeviceInformation::clear_camera_type() {
  camera_type_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoDeviceInformation::camera_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoDeviceInformation.camera_type)
  return camera_type_;
}
inline void AccurateShootPhotoDeviceInformation::set_camera_type(::dji::protobuf::uint32 value) {
  
  camera_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoDeviceInformation.camera_type)
}

// uint32 gimbal_port = 2;
inline void AccurateShootPhotoDeviceInformation::clear_gimbal_port() {
  gimbal_port_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoDeviceInformation::gimbal_port() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoDeviceInformation.gimbal_port)
  return gimbal_port_;
}
inline void AccurateShootPhotoDeviceInformation::set_gimbal_port(::dji::protobuf::uint32 value) {
  
  gimbal_port_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoDeviceInformation.gimbal_port)
}

// -------------------------------------------------------------------

// AccurateShootPhotoFileInformation

// uint32 file_name_length = 1;
inline void AccurateShootPhotoFileInformation::clear_file_name_length() {
  file_name_length_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoFileInformation::file_name_length() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoFileInformation.file_name_length)
  return file_name_length_;
}
inline void AccurateShootPhotoFileInformation::set_file_name_length(::dji::protobuf::uint32 value) {
  
  file_name_length_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoFileInformation.file_name_length)
}

// uint32 file_size = 2;
inline void AccurateShootPhotoFileInformation::clear_file_size() {
  file_size_ = 0u;
}
inline ::dji::protobuf::uint32 AccurateShootPhotoFileInformation::file_size() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoFileInformation.file_size)
  return file_size_;
}
inline void AccurateShootPhotoFileInformation::set_file_size(::dji::protobuf::uint32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoFileInformation.file_size)
}

// string file_name = 3;
inline void AccurateShootPhotoFileInformation::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccurateShootPhotoFileInformation::file_name() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
  return file_name_.GetNoArena();
}
inline void AccurateShootPhotoFileInformation::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
}
#if LANG_CXX11
inline void AccurateShootPhotoFileInformation::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
}
#endif
inline void AccurateShootPhotoFileInformation::set_file_name(const char* value) {
  DJI_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
}
inline void AccurateShootPhotoFileInformation::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
}
inline ::std::string* AccurateShootPhotoFileInformation::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
  return file_name_.MutableNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccurateShootPhotoFileInformation::release_file_name() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
  
  return file_name_.ReleaseNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccurateShootPhotoFileInformation::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::dji::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.AccurateShootPhotoFileInformation.file_name)
}

// -------------------------------------------------------------------

// ActuatorNavigationAccurateShootPhotoOperatingParam

// uint32 action_id = 1;
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_action_id() {
  action_id_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorNavigationAccurateShootPhotoOperatingParam::action_id() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.action_id)
  return action_id_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_action_id(::dji::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.action_id)
}

// uint32 retry_times = 2;
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::dji::protobuf::uint32 ActuatorNavigationAccurateShootPhotoOperatingParam::retry_times() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.retry_times)
  return retry_times_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_retry_times(::dji::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.retry_times)
}

// .dji.waypointv2.AccurateShootPhotoTargetRect target_rect = 3;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_target_rect() const {
  return this != internal_default_instance() && target_rect_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_target_rect() {
  if (GetArenaNoVirtual() == NULL && target_rect_ != NULL) {
    delete target_rect_;
  }
  target_rect_ = NULL;
}
inline const ::dji::waypointv2::AccurateShootPhotoTargetRect& ActuatorNavigationAccurateShootPhotoOperatingParam::target_rect() const {
  const ::dji::waypointv2::AccurateShootPhotoTargetRect* p = target_rect_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.target_rect)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::AccurateShootPhotoTargetRect*>(
      &::dji::waypointv2::_AccurateShootPhotoTargetRect_default_instance_);
}
inline ::dji::waypointv2::AccurateShootPhotoTargetRect* ActuatorNavigationAccurateShootPhotoOperatingParam::release_target_rect() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.target_rect)
  
  ::dji::waypointv2::AccurateShootPhotoTargetRect* temp = target_rect_;
  target_rect_ = NULL;
  return temp;
}
inline ::dji::waypointv2::AccurateShootPhotoTargetRect* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_target_rect() {
  
  if (target_rect_ == NULL) {
    target_rect_ = new ::dji::waypointv2::AccurateShootPhotoTargetRect;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.target_rect)
  return target_rect_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_target_rect(::dji::waypointv2::AccurateShootPhotoTargetRect* target_rect) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_rect_;
  }
  if (target_rect) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_rect = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, target_rect, submessage_arena);
    }
    
  } else {
    
  }
  target_rect_ = target_rect;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.target_rect)
}

// .dji.waypointv2.Size image_size = 4;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_image_size() const {
  return this != internal_default_instance() && image_size_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_image_size() {
  if (GetArenaNoVirtual() == NULL && image_size_ != NULL) {
    delete image_size_;
  }
  image_size_ = NULL;
}
inline const ::dji::waypointv2::Size& ActuatorNavigationAccurateShootPhotoOperatingParam::image_size() const {
  const ::dji::waypointv2::Size* p = image_size_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.image_size)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::Size*>(
      &::dji::waypointv2::_Size_default_instance_);
}
inline ::dji::waypointv2::Size* ActuatorNavigationAccurateShootPhotoOperatingParam::release_image_size() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.image_size)
  
  ::dji::waypointv2::Size* temp = image_size_;
  image_size_ = NULL;
  return temp;
}
inline ::dji::waypointv2::Size* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_image_size() {
  
  if (image_size_ == NULL) {
    image_size_ = new ::dji::waypointv2::Size;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.image_size)
  return image_size_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_image_size(::dji::waypointv2::Size* image_size) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_size_;
  }
  if (image_size) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_size = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, image_size, submessage_arena);
    }
    
  } else {
    
  }
  image_size_ = image_size;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.image_size)
}

// .dji.waypointv2.AccurateShootPhotoCameraStateInformation camera_infos = 5;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_camera_infos() const {
  return this != internal_default_instance() && camera_infos_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_camera_infos() {
  if (GetArenaNoVirtual() == NULL && camera_infos_ != NULL) {
    delete camera_infos_;
  }
  camera_infos_ = NULL;
}
inline const ::dji::waypointv2::AccurateShootPhotoCameraStateInformation& ActuatorNavigationAccurateShootPhotoOperatingParam::camera_infos() const {
  const ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* p = camera_infos_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.camera_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::AccurateShootPhotoCameraStateInformation*>(
      &::dji::waypointv2::_AccurateShootPhotoCameraStateInformation_default_instance_);
}
inline ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::release_camera_infos() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.camera_infos)
  
  ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* temp = camera_infos_;
  camera_infos_ = NULL;
  return temp;
}
inline ::dji::waypointv2::AccurateShootPhotoCameraStateInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_camera_infos() {
  
  if (camera_infos_ == NULL) {
    camera_infos_ = new ::dji::waypointv2::AccurateShootPhotoCameraStateInformation;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.camera_infos)
  return camera_infos_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_camera_infos(::dji::waypointv2::AccurateShootPhotoCameraStateInformation* camera_infos) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_infos_;
  }
  if (camera_infos) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_infos = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, camera_infos, submessage_arena);
    }
    
  } else {
    
  }
  camera_infos_ = camera_infos;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.camera_infos)
}

// .dji.waypointv2.AccurateShootPhotoGimbalStateInformation gimbal_infos = 6;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_gimbal_infos() const {
  return this != internal_default_instance() && gimbal_infos_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_gimbal_infos() {
  if (GetArenaNoVirtual() == NULL && gimbal_infos_ != NULL) {
    delete gimbal_infos_;
  }
  gimbal_infos_ = NULL;
}
inline const ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation& ActuatorNavigationAccurateShootPhotoOperatingParam::gimbal_infos() const {
  const ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* p = gimbal_infos_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.gimbal_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation*>(
      &::dji::waypointv2::_AccurateShootPhotoGimbalStateInformation_default_instance_);
}
inline ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::release_gimbal_infos() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.gimbal_infos)
  
  ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* temp = gimbal_infos_;
  gimbal_infos_ = NULL;
  return temp;
}
inline ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_gimbal_infos() {
  
  if (gimbal_infos_ == NULL) {
    gimbal_infos_ = new ::dji::waypointv2::AccurateShootPhotoGimbalStateInformation;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.gimbal_infos)
  return gimbal_infos_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_gimbal_infos(::dji::waypointv2::AccurateShootPhotoGimbalStateInformation* gimbal_infos) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gimbal_infos_;
  }
  if (gimbal_infos) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gimbal_infos = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, gimbal_infos, submessage_arena);
    }
    
  } else {
    
  }
  gimbal_infos_ = gimbal_infos;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.gimbal_infos)
}

// .dji.waypointv2.AccurateShootPhotoDeviceInformation device_infos = 7;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_device_infos() const {
  return this != internal_default_instance() && device_infos_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_device_infos() {
  if (GetArenaNoVirtual() == NULL && device_infos_ != NULL) {
    delete device_infos_;
  }
  device_infos_ = NULL;
}
inline const ::dji::waypointv2::AccurateShootPhotoDeviceInformation& ActuatorNavigationAccurateShootPhotoOperatingParam::device_infos() const {
  const ::dji::waypointv2::AccurateShootPhotoDeviceInformation* p = device_infos_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.device_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::AccurateShootPhotoDeviceInformation*>(
      &::dji::waypointv2::_AccurateShootPhotoDeviceInformation_default_instance_);
}
inline ::dji::waypointv2::AccurateShootPhotoDeviceInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::release_device_infos() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.device_infos)
  
  ::dji::waypointv2::AccurateShootPhotoDeviceInformation* temp = device_infos_;
  device_infos_ = NULL;
  return temp;
}
inline ::dji::waypointv2::AccurateShootPhotoDeviceInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_device_infos() {
  
  if (device_infos_ == NULL) {
    device_infos_ = new ::dji::waypointv2::AccurateShootPhotoDeviceInformation;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.device_infos)
  return device_infos_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_device_infos(::dji::waypointv2::AccurateShootPhotoDeviceInformation* device_infos) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_infos_;
  }
  if (device_infos) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_infos = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, device_infos, submessage_arena);
    }
    
  } else {
    
  }
  device_infos_ = device_infos;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.device_infos)
}

// .dji.waypointv2.AccurateShootPhotoFileInformation file_infos = 8;
inline bool ActuatorNavigationAccurateShootPhotoOperatingParam::has_file_infos() const {
  return this != internal_default_instance() && file_infos_ != NULL;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::clear_file_infos() {
  if (GetArenaNoVirtual() == NULL && file_infos_ != NULL) {
    delete file_infos_;
  }
  file_infos_ = NULL;
}
inline const ::dji::waypointv2::AccurateShootPhotoFileInformation& ActuatorNavigationAccurateShootPhotoOperatingParam::file_infos() const {
  const ::dji::waypointv2::AccurateShootPhotoFileInformation* p = file_infos_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.file_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::AccurateShootPhotoFileInformation*>(
      &::dji::waypointv2::_AccurateShootPhotoFileInformation_default_instance_);
}
inline ::dji::waypointv2::AccurateShootPhotoFileInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::release_file_infos() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.file_infos)
  
  ::dji::waypointv2::AccurateShootPhotoFileInformation* temp = file_infos_;
  file_infos_ = NULL;
  return temp;
}
inline ::dji::waypointv2::AccurateShootPhotoFileInformation* ActuatorNavigationAccurateShootPhotoOperatingParam::mutable_file_infos() {
  
  if (file_infos_ == NULL) {
    file_infos_ = new ::dji::waypointv2::AccurateShootPhotoFileInformation;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.file_infos)
  return file_infos_;
}
inline void ActuatorNavigationAccurateShootPhotoOperatingParam::set_allocated_file_infos(::dji::waypointv2::AccurateShootPhotoFileInformation* file_infos) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete file_infos_;
  }
  if (file_infos) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_infos = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, file_infos, submessage_arena);
    }
    
  } else {
    
  }
  file_infos_ = file_infos;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam.file_infos)
}

// -------------------------------------------------------------------

// WaypointActionOperatorNavigation

// .dji.waypointv2.NavigationActionType action_type = 1;
inline void WaypointActionOperatorNavigation::clear_action_type() {
  action_type_ = 0;
}
inline ::dji::waypointv2::NavigationActionType WaypointActionOperatorNavigation::action_type() const {
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorNavigation.action_type)
  return static_cast< ::dji::waypointv2::NavigationActionType >(action_type_);
}
inline void WaypointActionOperatorNavigation::set_action_type(::dji::waypointv2::NavigationActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:dji.waypointv2.WaypointActionOperatorNavigation.action_type)
}

// .dji.waypointv2.ActuatorNavigationAccurateShootPhotoOperatingParam accurate_shootphoto_param = 2;
inline bool WaypointActionOperatorNavigation::has_accurate_shootphoto_param() const {
  return this != internal_default_instance() && accurate_shootphoto_param_ != NULL;
}
inline void WaypointActionOperatorNavigation::clear_accurate_shootphoto_param() {
  if (GetArenaNoVirtual() == NULL && accurate_shootphoto_param_ != NULL) {
    delete accurate_shootphoto_param_;
  }
  accurate_shootphoto_param_ = NULL;
}
inline const ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam& WaypointActionOperatorNavigation::accurate_shootphoto_param() const {
  const ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* p = accurate_shootphoto_param_;
  // @@protoc_insertion_point(field_get:dji.waypointv2.WaypointActionOperatorNavigation.accurate_shootphoto_param)
  return p != NULL ? *p : *reinterpret_cast<const ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam*>(
      &::dji::waypointv2::_ActuatorNavigationAccurateShootPhotoOperatingParam_default_instance_);
}
inline ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* WaypointActionOperatorNavigation::release_accurate_shootphoto_param() {
  // @@protoc_insertion_point(field_release:dji.waypointv2.WaypointActionOperatorNavigation.accurate_shootphoto_param)
  
  ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* temp = accurate_shootphoto_param_;
  accurate_shootphoto_param_ = NULL;
  return temp;
}
inline ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* WaypointActionOperatorNavigation::mutable_accurate_shootphoto_param() {
  
  if (accurate_shootphoto_param_ == NULL) {
    accurate_shootphoto_param_ = new ::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam;
  }
  // @@protoc_insertion_point(field_mutable:dji.waypointv2.WaypointActionOperatorNavigation.accurate_shootphoto_param)
  return accurate_shootphoto_param_;
}
inline void WaypointActionOperatorNavigation::set_allocated_accurate_shootphoto_param(::dji::waypointv2::ActuatorNavigationAccurateShootPhotoOperatingParam* accurate_shootphoto_param) {
  ::dji::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accurate_shootphoto_param_;
  }
  if (accurate_shootphoto_param) {
    ::dji::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accurate_shootphoto_param = ::dji::protobuf::internal::GetOwnedMessage(
          message_arena, accurate_shootphoto_param, submessage_arena);
    }
    
  } else {
    
  }
  accurate_shootphoto_param_ = accurate_shootphoto_param;
  // @@protoc_insertion_point(field_set_allocated:dji.waypointv2.WaypointActionOperatorNavigation.accurate_shootphoto_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace waypointv2
}  // namespace dji

namespace dji {
namespace protobuf {

template <> struct is_proto_enum< ::dji::waypointv2::WaypointMissionFinishedAction> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointMissionFinishedAction>() {
  return ::dji::waypointv2::WaypointMissionFinishedAction_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointMissionRCLostConnection> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointMissionRCLostConnection>() {
  return ::dji::waypointv2::WaypointMissionRCLostConnection_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointMissionGotoWaypointMode> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointMissionGotoWaypointMode>() {
  return ::dji::waypointv2::WaypointMissionGotoWaypointMode_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::TrajectoryReplayTeachPointType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::TrajectoryReplayTeachPointType>() {
  return ::dji::waypointv2::TrajectoryReplayTeachPointType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointType>() {
  return ::dji::waypointv2::WaypointType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointYawMode> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointYawMode>() {
  return ::dji::waypointv2::WaypointYawMode_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::InterruptRecoverAction> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::InterruptRecoverAction>() {
  return ::dji::waypointv2::InterruptRecoverAction_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointActionTriggerType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointActionTriggerType>() {
  return ::dji::waypointv2::WaypointActionTriggerType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::AssociateType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::AssociateType>() {
  return ::dji::waypointv2::AssociateType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::WaypointActionActuatorType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::WaypointActionActuatorType>() {
  return ::dji::waypointv2::WaypointActionActuatorType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::IntervalType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::IntervalType>() {
  return ::dji::waypointv2::IntervalType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::GimbalActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::GimbalActionType>() {
  return ::dji::waypointv2::GimbalActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::CameraActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::CameraActionType>() {
  return ::dji::waypointv2::CameraActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::SprayActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::SprayActionType>() {
  return ::dji::waypointv2::SprayActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::AircraftControlActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::AircraftControlActionType>() {
  return ::dji::waypointv2::AircraftControlActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::PayloadControlActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::PayloadControlActionType>() {
  return ::dji::waypointv2::PayloadControlActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::NavigationActionType> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::NavigationActionType>() {
  return ::dji::waypointv2::NavigationActionType_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::AbstractionState> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::AbstractionState>() {
  return ::dji::waypointv2::AbstractionState_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::AbstractionEvent> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::AbstractionEvent>() {
  return ::dji::waypointv2::AbstractionEvent_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::ActionState> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::ActionState>() {
  return ::dji::waypointv2::ActionState_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::ActionEvent> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::ActionEvent>() {
  return ::dji::waypointv2::ActionEvent_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::ExecuteState> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::ExecuteState>() {
  return ::dji::waypointv2::ExecuteState_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::TrajectoryReplayState> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::TrajectoryReplayState>() {
  return ::dji::waypointv2::TrajectoryReplayState_descriptor();
}
template <> struct is_proto_enum< ::dji::waypointv2::TrajectoryReplayEvent> : ::dji::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dji::waypointv2::TrajectoryReplayEvent>() {
  return ::dji::waypointv2::TrajectoryReplayEvent_descriptor();
}

}  // namespace protobuf
}  // namespace dji

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WaypointV2_2eproto__INCLUDED
