/**
 * @author Russell Toris - rctoris@wpi.edu
 */

var KEYBOARDTELEOP = KEYBOARDTELEOP || {
  REVISION : '2'
};

/**
 * @author Russell Toris - rctoris@wpi.edu
 */

/**
 * Manages connection to the server and all interactions with ROS.
 *
 * Emits the following events:
 *   * 'change' - emitted with a change in speed occurs
 *
 * @constructor
 * @param options - possible keys include:
 *   * ros - the ROSLIB.Ros connection handle
 *   * topic (optional) - the Twist topic to publish to, like '/cmd_vel'
 *   * throttle (optional) - a constant throttle for the speed
 */
KEYBOARDTELEOP.Teleop = function(options) {
  var that = this;
  options = options || {};
  var ros = options.ros;
  var topic = options.topic || '/cmd_vel';
  // permanent throttle
  var throttle = options.throttle || 1.0;

  // used to externally throttle the speed (e.g., from a slider)
  this.scale = 300;

  // linear x and y movement and angular z movement
  var x = 0;
  var y = 0;
  var z = 0;
  var speed_level = 1;
  var base_speed = 5;

  var cmdVel = new ROSLIB.Topic({
    ros : ros,
    name : topic,
    messageType : 'geometry_msgs/Quaternion'
  });

  // sets up a key listener on the page used for keyboard teleoperation
  var handleKey = function(keyCode, keyDown) {
    // used to check for changes in speed
    var oldX = x;
    var oldY = y;
    var oldZ = z;

    var speed = 0;
	var iskeydown = 0;
    // throttle the speed by the slider and throttle constant
    if (keyDown === true) {
    	speed = throttle * that.scale;
		iskeydown = 1;
    }
	else 
		iskeydown = 0;
    // check which key was pressed
	console.log(keyCode)
    switch (keyCode) {
      case 65:
        // roll positive
        y = -base_speed*speed_level*iskeydown;
        break;
      case 87:
        // pitch positive
        x = -base_speed*speed_level*iskeydown;

        break;
      case 68:
        // roll negative
        y = base_speed*speed_level*iskeydown;
        break;
      case 83:
        // pitch negative
        x = base_speed*speed_level*iskeydown;
        break;
      case 69:
        // yaw rate positive
        z = base_speed*speed_level*iskeydown;
        break;
      case 81:
        // yaw rate negative
        z = -base_speed*speed_level*iskeydown;
        break;

      //change speed level
	  case 49: //num 1
		speed_level = 1;
		break;
	  case 50: //num 2
		speed_level = 2;
		break;
	  case 51: //num 3
		speed_level = 3;
		break;
	  case 52: //num 4
		speed_level = 4;
	  case 53: //num 5
		speed_level = 5;
		break;
	  case 54: //num 6
		speed_level = 6;
		break;
    }

    // publish the command
    var qua = new ROSLIB.Message({
		x : x,
		y : y,
		z : z,
		w : speed
    });
    cmdVel.publish(qua);

    // check for changes
    if (oldX !== x || oldY !== y || oldZ !== z) {
      that.emit('change', qua);
    }
  };

  // handle the key
  var body = document.getElementsByTagName('body')[0];
  body.addEventListener('keydown', function(e) {
    handleKey(e.keyCode, true);
  }, false);
  body.addEventListener('keyup', function(e) {
    handleKey(e.keyCode, false);
  }, false);
};
KEYBOARDTELEOP.Teleop.prototype.__proto__ = EventEmitter2.prototype;
